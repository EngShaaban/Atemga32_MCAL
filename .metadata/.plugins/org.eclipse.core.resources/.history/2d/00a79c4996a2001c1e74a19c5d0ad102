/*****************************************************************************/
/*****************************************************************************/
/* Title                 :   UART_Prog                                       */
/* Filename              :   UART_Prog.c                                     */
/* Author                :   Shaban Abdullah Awad                            */
/* Created on            :   Feb 27, 2022                                    */
/* Version               :   1.0.0                                           */
/* Toolchain             :   avr-gcc (4.3.3)                                 */
/* Target                :   ATmega32                                        */
/* Notes                 :   None                                            */
/*                                                                           */
/*****************************************************************************/

/*****************************************************************************/
/******************************  INCLUDES  ***********************************/
#include "LIB/STD_TYPES.h"
#include "LIB/errorStates.h"

#include "USART_Priv.h"

#include "USART_Cnfg.h"
#include "USART_Interface.h"


void UART_enuInit( void )
{
	u8  UCSRA_Temp   = 0 ;
	u8  UCSRB_Temp   = 0 ;
	u8  UCSRC_Temp   = 0 ;
	f32 BaudRate_Temp= 0 ;

	switch( USART0.EnableMode )
	{

	case USART_Disable :
		break;

	case USART_Tx_Only :
		UCSRB_Temp |=(USART_MSK_BIT<<TXEN);
		break;

	case USART_Rx_Only :
		UCSRB_Temp |=(USART_MSK_BIT<<RXEN);
		break;

	case USART_Tx_Rx:
		UCSRB_Temp |=(USART_MSK_BIT<<RXEN)|(USART_MSK_BIT<<TXEN);
		break;

	default:
		break;

	}//End of switch( USART0.EnableMode ).


	switch( USART0.CommunicationMode )
	{

	case USART_Async_NormalSpeed :
		/*1.Set USART for Async. Mode Normal Speed
		 *U2X = 0. According to DataSheet page:143
		 */
		break;

	case USART_Async_DoubleSpeed:
		/*1.Set USART for Async. Mode Double Speed
		 *U2X = 1. According to DataSheet page:143
		 */
		UCSRA_Temp |=(USART_MSK_BIT<<U2X);
		break;

	case USART_Sync:
		//_For Synchronous Operation.
		UCSRC_Temp |=(USART_MSK_BIT<<UMSEL);
		break;

	default:
		break;
	}//End of switch( USART0.CommunicationMode).

	switch(USART0.CommunicationTerminal)
	{
	case USART_SingleProcessor:
		break;

	case USART_MultiProcessor:
		//_To enable the Multi-processor Communication mode.
		UCSRA_Temp |=(USART_MSK_BIT<<MPCM);
		break;

	default:
		break;

	}//End of switch USART0.CommunicationTerminal.

	switch(USART0.InterruptSources)
	{
	case USART_InterruptDisable :
		break;

	case USART_RxCompletEnable:
		UCSRB_Temp |=(USART_MSK_BIT<<RXCIE);
		break;

	case USART_TxCompletEnable :
		UCSRB_Temp |=(USART_MSK_BIT<<TXCIE);
		break;

	case USART_UDR_EmptyEnable :
		UCSRB |=(USART_MSK_BIT<<UDRIE);
		break;

	case USART_RxComplet_TxComplet_Enable:
		UCSRB_Temp |=(USART_MSK_BIT<<RXCIE) | (USART_MSK_BIT<<TXCIE);
		break;

	case USART_RxComplet_UDREmpty_Enable:
		UCSRB_Temp |=(USART_MSK_BIT<<RXCIE)|(USART_MSK_BIT<<UDRIE);
		break;

	case USART_TxComplet_UDREmpty_Enable  :
		UCSRB_Temp |=(USART_MSK_BIT<<TXCIE)|(USART_MSK_BIT<<UDRIE);
		break;

	case USART_TxComplet_RxComplet_UDR_EmptyEnable:
		UCSRB_Temp |=(USART_MSK_BIT<<TXCIE)|(USART_MSK_BIT<<RXCIE)|(USART_MSK_BIT<<UDRIE);
		break;

	default:
		break;

	}


	UCSRA= UCSRA_Temp;
	UCSRB= UCSRB_Temp;
	UCSRC= UCSRC_Temp;


}//End of UART_enuInit().

ES_t UART_enuSendByte(u8 Copy_u8Data)
{
	ES_t Local_enuErrorState  = ES_NOK ;

	// Poll the for the UDRE
	while( !((UCSRA>>UDRE)&1) );

	UDR = Copy_u8Data  ;

	//Check for the Completion of Transmittioin.
	if( (UCSRA>>TXC)&1 )
	{
		//Clear the flag.
		UCSRA |=(USART_MSK_BIT<<TXC);

		Local_enuErrorState = ES_OK ;
	}
	else
	{
		//Do nothing.
	}

	return Local_enuErrorState  ;
}//End of UART_enuSendByte().


ES_t UART_enuRecieveByte( u8* Copy_u8Data )
{
	ES_t Local_enuErrorState  = ES_NOK ;

	if(  Copy_u8Data != NULL  )
	{
		//There is NO Data to Read.
		while( !(( UCSRA>>RXC)&1) );

		*Copy_u8Data = UDR ;

		Local_enuErrorState  = ES_OK ;
	}
	else
	{
		Local_enuErrorState  = ES_NULL_POINTER;
	}

	return Local_enuErrorState  ;
}//End of UART_enuRecieveByte().

//          UART_enuSendString( arr );

ES_t UART_enuSendString( const u8* Copy_pcData)
{
	ES_t Local_enuErrorState  = ES_NOK ;

	if( Copy_pcData != NULL )
	{

		while( *Copy_pcData != '\0')
		{

			while( !((UCSRA>>UDRE)&1) );

			UDR = *Copy_pcData ;

			Copy_pcData++ ;

		}

		Local_enuErrorState  = ES_OK ;
	}
	else
	{
		Local_enuErrorState  = ES_NULL_POINTER ;
	}

	return Local_enuErrorState  ;
}//End of UART_enuRecieveByte().



ES_t UART_enuReceiveString(u8*  Copy_pcData)
{
	ES_t Local_enuErrorState  = ES_NOK ;

	if( Copy_pcData != 	NULL )
	{
		u8 Local_u8Data  = 0  ;

		u8 Local_u8Index = 0  ;

		while( !((UCSRA>>RXC)&1) );

		u8 Local_u8Terminator = UDR ;

		while(1)
		{
			while( !((UCSRA>>RXC)&1) );

			Local_u8Data = UDR ;

			if(Local_u8Data == Local_u8Terminator )
			{
				Copy_pcData[Local_u8Index] = '\0' ;

				break;
			}
			else
			{
				Copy_pcData[Local_u8Index] = Local_u8Data ;

				Local_u8Index++ ;
			}

		}

		Local_enuErrorState = ES_OK ;
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER ;
	}

	return Local_enuErrorState  ;
}//End of UART_enuRecieveByte().

