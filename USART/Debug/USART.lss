
USART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000023c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000114  00800060  000023c0  00002454  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800174  00800174  00002568  2**0
                  ALLOC
  3 .stab         00002118  00000000  00000000  00002568  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f56  00000000  00000000  00004680  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000055d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001b6  00000000  00000000  00005736  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001f0d  00000000  00000000  000058ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000010d2  00000000  00000000  000077f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001030  00000000  00000000  000088cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  000098fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002e6  00000000  00000000  00009a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008f6  00000000  00000000  00009d62  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a658  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 a7 09 	jmp	0x134e	; 0x134e <__vector_1>
       8:	0c 94 de 09 	jmp	0x13bc	; 0x13bc <__vector_2>
       c:	0c 94 15 0a 	jmp	0x142a	; 0x142a <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ec       	ldi	r30, 0xC0	; 192
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 38       	cpi	r26, 0x80	; 128
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 8a 11 	call	0x2314	; 0x2314 <main>
      8a:	0c 94 de 11 	jmp	0x23bc	; 0x23bc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a7 11 	jmp	0x234e	; 0x234e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c3 11 	jmp	0x2386	; 0x2386 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b3 11 	jmp	0x2366	; 0x2366 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 cf 11 	jmp	0x239e	; 0x239e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b3 11 	jmp	0x2366	; 0x2366 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 cf 11 	jmp	0x239e	; 0x239e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a7 11 	jmp	0x234e	; 0x234e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c3 11 	jmp	0x2386	; 0x2386 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 af 11 	jmp	0x235e	; 0x235e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 cb 11 	jmp	0x2396	; 0x2396 <__epilogue_restores__+0x10>

0000078a <__gesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 b3 11 	jmp	0x2366	; 0x2366 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gesf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 cf 11 	jmp	0x239e	; 0x239e <__epilogue_restores__+0x18>

000007ea <__fixsfsi>:
     7ea:	ac e0       	ldi	r26, 0x0C	; 12
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 b7 11 	jmp	0x236e	; 0x236e <__prologue_saves__+0x20>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	be 01       	movw	r22, r28
     804:	6b 5f       	subi	r22, 0xFB	; 251
     806:	7f 4f       	sbci	r23, 0xFF	; 255
     808:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     80c:	8d 81       	ldd	r24, Y+5	; 0x05
     80e:	82 30       	cpi	r24, 0x02	; 2
     810:	61 f1       	breq	.+88     	; 0x86a <__stack+0xb>
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	50 f1       	brcs	.+84     	; 0x86a <__stack+0xb>
     816:	84 30       	cpi	r24, 0x04	; 4
     818:	21 f4       	brne	.+8      	; 0x822 <__fixsfsi+0x38>
     81a:	8e 81       	ldd	r24, Y+6	; 0x06
     81c:	88 23       	and	r24, r24
     81e:	51 f1       	breq	.+84     	; 0x874 <__stack+0x15>
     820:	2e c0       	rjmp	.+92     	; 0x87e <__stack+0x1f>
     822:	2f 81       	ldd	r18, Y+7	; 0x07
     824:	38 85       	ldd	r19, Y+8	; 0x08
     826:	37 fd       	sbrc	r19, 7
     828:	20 c0       	rjmp	.+64     	; 0x86a <__stack+0xb>
     82a:	6e 81       	ldd	r22, Y+6	; 0x06
     82c:	2f 31       	cpi	r18, 0x1F	; 31
     82e:	31 05       	cpc	r19, r1
     830:	1c f0       	brlt	.+6      	; 0x838 <__fixsfsi+0x4e>
     832:	66 23       	and	r22, r22
     834:	f9 f0       	breq	.+62     	; 0x874 <__stack+0x15>
     836:	23 c0       	rjmp	.+70     	; 0x87e <__stack+0x1f>
     838:	8e e1       	ldi	r24, 0x1E	; 30
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	82 1b       	sub	r24, r18
     83e:	93 0b       	sbc	r25, r19
     840:	29 85       	ldd	r18, Y+9	; 0x09
     842:	3a 85       	ldd	r19, Y+10	; 0x0a
     844:	4b 85       	ldd	r20, Y+11	; 0x0b
     846:	5c 85       	ldd	r21, Y+12	; 0x0c
     848:	04 c0       	rjmp	.+8      	; 0x852 <__fixsfsi+0x68>
     84a:	56 95       	lsr	r21
     84c:	47 95       	ror	r20
     84e:	37 95       	ror	r19
     850:	27 95       	ror	r18
     852:	8a 95       	dec	r24
     854:	d2 f7       	brpl	.-12     	; 0x84a <__fixsfsi+0x60>
     856:	66 23       	and	r22, r22
     858:	b1 f0       	breq	.+44     	; 0x886 <__stack+0x27>
     85a:	50 95       	com	r21
     85c:	40 95       	com	r20
     85e:	30 95       	com	r19
     860:	21 95       	neg	r18
     862:	3f 4f       	sbci	r19, 0xFF	; 255
     864:	4f 4f       	sbci	r20, 0xFF	; 255
     866:	5f 4f       	sbci	r21, 0xFF	; 255
     868:	0e c0       	rjmp	.+28     	; 0x886 <__stack+0x27>
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	40 e0       	ldi	r20, 0x00	; 0
     870:	50 e0       	ldi	r21, 0x00	; 0
     872:	09 c0       	rjmp	.+18     	; 0x886 <__stack+0x27>
     874:	2f ef       	ldi	r18, 0xFF	; 255
     876:	3f ef       	ldi	r19, 0xFF	; 255
     878:	4f ef       	ldi	r20, 0xFF	; 255
     87a:	5f e7       	ldi	r21, 0x7F	; 127
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	40 e0       	ldi	r20, 0x00	; 0
     884:	50 e8       	ldi	r21, 0x80	; 128
     886:	b9 01       	movw	r22, r18
     888:	ca 01       	movw	r24, r20
     88a:	2c 96       	adiw	r28, 0x0c	; 12
     88c:	e2 e0       	ldi	r30, 0x02	; 2
     88e:	0c 94 d3 11 	jmp	0x23a6	; 0x23a6 <__epilogue_restores__+0x20>

00000892 <__floatunsisf>:
     892:	a8 e0       	ldi	r26, 0x08	; 8
     894:	b0 e0       	ldi	r27, 0x00	; 0
     896:	ef e4       	ldi	r30, 0x4F	; 79
     898:	f4 e0       	ldi	r31, 0x04	; 4
     89a:	0c 94 af 11 	jmp	0x235e	; 0x235e <__prologue_saves__+0x10>
     89e:	7b 01       	movw	r14, r22
     8a0:	8c 01       	movw	r16, r24
     8a2:	61 15       	cp	r22, r1
     8a4:	71 05       	cpc	r23, r1
     8a6:	81 05       	cpc	r24, r1
     8a8:	91 05       	cpc	r25, r1
     8aa:	19 f4       	brne	.+6      	; 0x8b2 <__floatunsisf+0x20>
     8ac:	82 e0       	ldi	r24, 0x02	; 2
     8ae:	89 83       	std	Y+1, r24	; 0x01
     8b0:	60 c0       	rjmp	.+192    	; 0x972 <__floatunsisf+0xe0>
     8b2:	83 e0       	ldi	r24, 0x03	; 3
     8b4:	89 83       	std	Y+1, r24	; 0x01
     8b6:	8e e1       	ldi	r24, 0x1E	; 30
     8b8:	c8 2e       	mov	r12, r24
     8ba:	d1 2c       	mov	r13, r1
     8bc:	dc 82       	std	Y+4, r13	; 0x04
     8be:	cb 82       	std	Y+3, r12	; 0x03
     8c0:	ed 82       	std	Y+5, r14	; 0x05
     8c2:	fe 82       	std	Y+6, r15	; 0x06
     8c4:	0f 83       	std	Y+7, r16	; 0x07
     8c6:	18 87       	std	Y+8, r17	; 0x08
     8c8:	c8 01       	movw	r24, r16
     8ca:	b7 01       	movw	r22, r14
     8cc:	0e 94 c2 04 	call	0x984	; 0x984 <__clzsi2>
     8d0:	fc 01       	movw	r30, r24
     8d2:	31 97       	sbiw	r30, 0x01	; 1
     8d4:	f7 ff       	sbrs	r31, 7
     8d6:	3b c0       	rjmp	.+118    	; 0x94e <__floatunsisf+0xbc>
     8d8:	22 27       	eor	r18, r18
     8da:	33 27       	eor	r19, r19
     8dc:	2e 1b       	sub	r18, r30
     8de:	3f 0b       	sbc	r19, r31
     8e0:	57 01       	movw	r10, r14
     8e2:	68 01       	movw	r12, r16
     8e4:	02 2e       	mov	r0, r18
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__floatunsisf+0x5e>
     8e8:	d6 94       	lsr	r13
     8ea:	c7 94       	ror	r12
     8ec:	b7 94       	ror	r11
     8ee:	a7 94       	ror	r10
     8f0:	0a 94       	dec	r0
     8f2:	d2 f7       	brpl	.-12     	; 0x8e8 <__floatunsisf+0x56>
     8f4:	40 e0       	ldi	r20, 0x00	; 0
     8f6:	50 e0       	ldi	r21, 0x00	; 0
     8f8:	60 e0       	ldi	r22, 0x00	; 0
     8fa:	70 e0       	ldi	r23, 0x00	; 0
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	a0 e0       	ldi	r26, 0x00	; 0
     902:	b0 e0       	ldi	r27, 0x00	; 0
     904:	04 c0       	rjmp	.+8      	; 0x90e <__floatunsisf+0x7c>
     906:	88 0f       	add	r24, r24
     908:	99 1f       	adc	r25, r25
     90a:	aa 1f       	adc	r26, r26
     90c:	bb 1f       	adc	r27, r27
     90e:	2a 95       	dec	r18
     910:	d2 f7       	brpl	.-12     	; 0x906 <__floatunsisf+0x74>
     912:	01 97       	sbiw	r24, 0x01	; 1
     914:	a1 09       	sbc	r26, r1
     916:	b1 09       	sbc	r27, r1
     918:	8e 21       	and	r24, r14
     91a:	9f 21       	and	r25, r15
     91c:	a0 23       	and	r26, r16
     91e:	b1 23       	and	r27, r17
     920:	00 97       	sbiw	r24, 0x00	; 0
     922:	a1 05       	cpc	r26, r1
     924:	b1 05       	cpc	r27, r1
     926:	21 f0       	breq	.+8      	; 0x930 <__floatunsisf+0x9e>
     928:	41 e0       	ldi	r20, 0x01	; 1
     92a:	50 e0       	ldi	r21, 0x00	; 0
     92c:	60 e0       	ldi	r22, 0x00	; 0
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	4a 29       	or	r20, r10
     932:	5b 29       	or	r21, r11
     934:	6c 29       	or	r22, r12
     936:	7d 29       	or	r23, r13
     938:	4d 83       	std	Y+5, r20	; 0x05
     93a:	5e 83       	std	Y+6, r21	; 0x06
     93c:	6f 83       	std	Y+7, r22	; 0x07
     93e:	78 87       	std	Y+8, r23	; 0x08
     940:	8e e1       	ldi	r24, 0x1E	; 30
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	8e 1b       	sub	r24, r30
     946:	9f 0b       	sbc	r25, r31
     948:	9c 83       	std	Y+4, r25	; 0x04
     94a:	8b 83       	std	Y+3, r24	; 0x03
     94c:	12 c0       	rjmp	.+36     	; 0x972 <__floatunsisf+0xe0>
     94e:	30 97       	sbiw	r30, 0x00	; 0
     950:	81 f0       	breq	.+32     	; 0x972 <__floatunsisf+0xe0>
     952:	0e 2e       	mov	r0, r30
     954:	04 c0       	rjmp	.+8      	; 0x95e <__floatunsisf+0xcc>
     956:	ee 0c       	add	r14, r14
     958:	ff 1c       	adc	r15, r15
     95a:	00 1f       	adc	r16, r16
     95c:	11 1f       	adc	r17, r17
     95e:	0a 94       	dec	r0
     960:	d2 f7       	brpl	.-12     	; 0x956 <__floatunsisf+0xc4>
     962:	ed 82       	std	Y+5, r14	; 0x05
     964:	fe 82       	std	Y+6, r15	; 0x06
     966:	0f 83       	std	Y+7, r16	; 0x07
     968:	18 87       	std	Y+8, r17	; 0x08
     96a:	ce 1a       	sub	r12, r30
     96c:	df 0a       	sbc	r13, r31
     96e:	dc 82       	std	Y+4, r13	; 0x04
     970:	cb 82       	std	Y+3, r12	; 0x03
     972:	1a 82       	std	Y+2, r1	; 0x02
     974:	ce 01       	movw	r24, r28
     976:	01 96       	adiw	r24, 0x01	; 1
     978:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     97c:	28 96       	adiw	r28, 0x08	; 8
     97e:	ea e0       	ldi	r30, 0x0A	; 10
     980:	0c 94 cb 11 	jmp	0x2396	; 0x2396 <__epilogue_restores__+0x10>

00000984 <__clzsi2>:
     984:	ef 92       	push	r14
     986:	ff 92       	push	r15
     988:	0f 93       	push	r16
     98a:	1f 93       	push	r17
     98c:	7b 01       	movw	r14, r22
     98e:	8c 01       	movw	r16, r24
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	e8 16       	cp	r14, r24
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	f8 06       	cpc	r15, r24
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	08 07       	cpc	r16, r24
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	18 07       	cpc	r17, r24
     9a0:	88 f4       	brcc	.+34     	; 0x9c4 <__clzsi2+0x40>
     9a2:	8f ef       	ldi	r24, 0xFF	; 255
     9a4:	e8 16       	cp	r14, r24
     9a6:	f1 04       	cpc	r15, r1
     9a8:	01 05       	cpc	r16, r1
     9aa:	11 05       	cpc	r17, r1
     9ac:	31 f0       	breq	.+12     	; 0x9ba <__clzsi2+0x36>
     9ae:	28 f0       	brcs	.+10     	; 0x9ba <__clzsi2+0x36>
     9b0:	88 e0       	ldi	r24, 0x08	; 8
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	a0 e0       	ldi	r26, 0x00	; 0
     9b6:	b0 e0       	ldi	r27, 0x00	; 0
     9b8:	17 c0       	rjmp	.+46     	; 0x9e8 <__clzsi2+0x64>
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	a0 e0       	ldi	r26, 0x00	; 0
     9c0:	b0 e0       	ldi	r27, 0x00	; 0
     9c2:	12 c0       	rjmp	.+36     	; 0x9e8 <__clzsi2+0x64>
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	e8 16       	cp	r14, r24
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	f8 06       	cpc	r15, r24
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	08 07       	cpc	r16, r24
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	18 07       	cpc	r17, r24
     9d4:	28 f0       	brcs	.+10     	; 0x9e0 <__clzsi2+0x5c>
     9d6:	88 e1       	ldi	r24, 0x18	; 24
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	a0 e0       	ldi	r26, 0x00	; 0
     9dc:	b0 e0       	ldi	r27, 0x00	; 0
     9de:	04 c0       	rjmp	.+8      	; 0x9e8 <__clzsi2+0x64>
     9e0:	80 e1       	ldi	r24, 0x10	; 16
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	a0 e0       	ldi	r26, 0x00	; 0
     9e6:	b0 e0       	ldi	r27, 0x00	; 0
     9e8:	20 e2       	ldi	r18, 0x20	; 32
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	40 e0       	ldi	r20, 0x00	; 0
     9ee:	50 e0       	ldi	r21, 0x00	; 0
     9f0:	28 1b       	sub	r18, r24
     9f2:	39 0b       	sbc	r19, r25
     9f4:	4a 0b       	sbc	r20, r26
     9f6:	5b 0b       	sbc	r21, r27
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__clzsi2+0x7e>
     9fa:	16 95       	lsr	r17
     9fc:	07 95       	ror	r16
     9fe:	f7 94       	ror	r15
     a00:	e7 94       	ror	r14
     a02:	8a 95       	dec	r24
     a04:	d2 f7       	brpl	.-12     	; 0x9fa <__clzsi2+0x76>
     a06:	f7 01       	movw	r30, r14
     a08:	e8 59       	subi	r30, 0x98	; 152
     a0a:	ff 4f       	sbci	r31, 0xFF	; 255
     a0c:	80 81       	ld	r24, Z
     a0e:	28 1b       	sub	r18, r24
     a10:	31 09       	sbc	r19, r1
     a12:	41 09       	sbc	r20, r1
     a14:	51 09       	sbc	r21, r1
     a16:	c9 01       	movw	r24, r18
     a18:	1f 91       	pop	r17
     a1a:	0f 91       	pop	r16
     a1c:	ff 90       	pop	r15
     a1e:	ef 90       	pop	r14
     a20:	08 95       	ret

00000a22 <__pack_f>:
     a22:	df 92       	push	r13
     a24:	ef 92       	push	r14
     a26:	ff 92       	push	r15
     a28:	0f 93       	push	r16
     a2a:	1f 93       	push	r17
     a2c:	fc 01       	movw	r30, r24
     a2e:	e4 80       	ldd	r14, Z+4	; 0x04
     a30:	f5 80       	ldd	r15, Z+5	; 0x05
     a32:	06 81       	ldd	r16, Z+6	; 0x06
     a34:	17 81       	ldd	r17, Z+7	; 0x07
     a36:	d1 80       	ldd	r13, Z+1	; 0x01
     a38:	80 81       	ld	r24, Z
     a3a:	82 30       	cpi	r24, 0x02	; 2
     a3c:	48 f4       	brcc	.+18     	; 0xa50 <__pack_f+0x2e>
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	a0 e1       	ldi	r26, 0x10	; 16
     a44:	b0 e0       	ldi	r27, 0x00	; 0
     a46:	e8 2a       	or	r14, r24
     a48:	f9 2a       	or	r15, r25
     a4a:	0a 2b       	or	r16, r26
     a4c:	1b 2b       	or	r17, r27
     a4e:	a5 c0       	rjmp	.+330    	; 0xb9a <__pack_f+0x178>
     a50:	84 30       	cpi	r24, 0x04	; 4
     a52:	09 f4       	brne	.+2      	; 0xa56 <__pack_f+0x34>
     a54:	9f c0       	rjmp	.+318    	; 0xb94 <__pack_f+0x172>
     a56:	82 30       	cpi	r24, 0x02	; 2
     a58:	21 f4       	brne	.+8      	; 0xa62 <__pack_f+0x40>
     a5a:	ee 24       	eor	r14, r14
     a5c:	ff 24       	eor	r15, r15
     a5e:	87 01       	movw	r16, r14
     a60:	05 c0       	rjmp	.+10     	; 0xa6c <__pack_f+0x4a>
     a62:	e1 14       	cp	r14, r1
     a64:	f1 04       	cpc	r15, r1
     a66:	01 05       	cpc	r16, r1
     a68:	11 05       	cpc	r17, r1
     a6a:	19 f4       	brne	.+6      	; 0xa72 <__pack_f+0x50>
     a6c:	e0 e0       	ldi	r30, 0x00	; 0
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	96 c0       	rjmp	.+300    	; 0xb9e <__pack_f+0x17c>
     a72:	62 81       	ldd	r22, Z+2	; 0x02
     a74:	73 81       	ldd	r23, Z+3	; 0x03
     a76:	9f ef       	ldi	r25, 0xFF	; 255
     a78:	62 38       	cpi	r22, 0x82	; 130
     a7a:	79 07       	cpc	r23, r25
     a7c:	0c f0       	brlt	.+2      	; 0xa80 <__pack_f+0x5e>
     a7e:	5b c0       	rjmp	.+182    	; 0xb36 <__pack_f+0x114>
     a80:	22 e8       	ldi	r18, 0x82	; 130
     a82:	3f ef       	ldi	r19, 0xFF	; 255
     a84:	26 1b       	sub	r18, r22
     a86:	37 0b       	sbc	r19, r23
     a88:	2a 31       	cpi	r18, 0x1A	; 26
     a8a:	31 05       	cpc	r19, r1
     a8c:	2c f0       	brlt	.+10     	; 0xa98 <__pack_f+0x76>
     a8e:	20 e0       	ldi	r18, 0x00	; 0
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	40 e0       	ldi	r20, 0x00	; 0
     a94:	50 e0       	ldi	r21, 0x00	; 0
     a96:	2a c0       	rjmp	.+84     	; 0xaec <__pack_f+0xca>
     a98:	b8 01       	movw	r22, r16
     a9a:	a7 01       	movw	r20, r14
     a9c:	02 2e       	mov	r0, r18
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__pack_f+0x86>
     aa0:	76 95       	lsr	r23
     aa2:	67 95       	ror	r22
     aa4:	57 95       	ror	r21
     aa6:	47 95       	ror	r20
     aa8:	0a 94       	dec	r0
     aaa:	d2 f7       	brpl	.-12     	; 0xaa0 <__pack_f+0x7e>
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	a0 e0       	ldi	r26, 0x00	; 0
     ab2:	b0 e0       	ldi	r27, 0x00	; 0
     ab4:	04 c0       	rjmp	.+8      	; 0xabe <__pack_f+0x9c>
     ab6:	88 0f       	add	r24, r24
     ab8:	99 1f       	adc	r25, r25
     aba:	aa 1f       	adc	r26, r26
     abc:	bb 1f       	adc	r27, r27
     abe:	2a 95       	dec	r18
     ac0:	d2 f7       	brpl	.-12     	; 0xab6 <__pack_f+0x94>
     ac2:	01 97       	sbiw	r24, 0x01	; 1
     ac4:	a1 09       	sbc	r26, r1
     ac6:	b1 09       	sbc	r27, r1
     ac8:	8e 21       	and	r24, r14
     aca:	9f 21       	and	r25, r15
     acc:	a0 23       	and	r26, r16
     ace:	b1 23       	and	r27, r17
     ad0:	00 97       	sbiw	r24, 0x00	; 0
     ad2:	a1 05       	cpc	r26, r1
     ad4:	b1 05       	cpc	r27, r1
     ad6:	21 f0       	breq	.+8      	; 0xae0 <__pack_f+0xbe>
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	9a 01       	movw	r18, r20
     ae2:	ab 01       	movw	r20, r22
     ae4:	28 2b       	or	r18, r24
     ae6:	39 2b       	or	r19, r25
     ae8:	4a 2b       	or	r20, r26
     aea:	5b 2b       	or	r21, r27
     aec:	da 01       	movw	r26, r20
     aee:	c9 01       	movw	r24, r18
     af0:	8f 77       	andi	r24, 0x7F	; 127
     af2:	90 70       	andi	r25, 0x00	; 0
     af4:	a0 70       	andi	r26, 0x00	; 0
     af6:	b0 70       	andi	r27, 0x00	; 0
     af8:	80 34       	cpi	r24, 0x40	; 64
     afa:	91 05       	cpc	r25, r1
     afc:	a1 05       	cpc	r26, r1
     afe:	b1 05       	cpc	r27, r1
     b00:	39 f4       	brne	.+14     	; 0xb10 <__pack_f+0xee>
     b02:	27 ff       	sbrs	r18, 7
     b04:	09 c0       	rjmp	.+18     	; 0xb18 <__pack_f+0xf6>
     b06:	20 5c       	subi	r18, 0xC0	; 192
     b08:	3f 4f       	sbci	r19, 0xFF	; 255
     b0a:	4f 4f       	sbci	r20, 0xFF	; 255
     b0c:	5f 4f       	sbci	r21, 0xFF	; 255
     b0e:	04 c0       	rjmp	.+8      	; 0xb18 <__pack_f+0xf6>
     b10:	21 5c       	subi	r18, 0xC1	; 193
     b12:	3f 4f       	sbci	r19, 0xFF	; 255
     b14:	4f 4f       	sbci	r20, 0xFF	; 255
     b16:	5f 4f       	sbci	r21, 0xFF	; 255
     b18:	e0 e0       	ldi	r30, 0x00	; 0
     b1a:	f0 e0       	ldi	r31, 0x00	; 0
     b1c:	20 30       	cpi	r18, 0x00	; 0
     b1e:	a0 e0       	ldi	r26, 0x00	; 0
     b20:	3a 07       	cpc	r19, r26
     b22:	a0 e0       	ldi	r26, 0x00	; 0
     b24:	4a 07       	cpc	r20, r26
     b26:	a0 e4       	ldi	r26, 0x40	; 64
     b28:	5a 07       	cpc	r21, r26
     b2a:	10 f0       	brcs	.+4      	; 0xb30 <__pack_f+0x10e>
     b2c:	e1 e0       	ldi	r30, 0x01	; 1
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	79 01       	movw	r14, r18
     b32:	8a 01       	movw	r16, r20
     b34:	27 c0       	rjmp	.+78     	; 0xb84 <__pack_f+0x162>
     b36:	60 38       	cpi	r22, 0x80	; 128
     b38:	71 05       	cpc	r23, r1
     b3a:	64 f5       	brge	.+88     	; 0xb94 <__pack_f+0x172>
     b3c:	fb 01       	movw	r30, r22
     b3e:	e1 58       	subi	r30, 0x81	; 129
     b40:	ff 4f       	sbci	r31, 0xFF	; 255
     b42:	d8 01       	movw	r26, r16
     b44:	c7 01       	movw	r24, r14
     b46:	8f 77       	andi	r24, 0x7F	; 127
     b48:	90 70       	andi	r25, 0x00	; 0
     b4a:	a0 70       	andi	r26, 0x00	; 0
     b4c:	b0 70       	andi	r27, 0x00	; 0
     b4e:	80 34       	cpi	r24, 0x40	; 64
     b50:	91 05       	cpc	r25, r1
     b52:	a1 05       	cpc	r26, r1
     b54:	b1 05       	cpc	r27, r1
     b56:	39 f4       	brne	.+14     	; 0xb66 <__pack_f+0x144>
     b58:	e7 fe       	sbrs	r14, 7
     b5a:	0d c0       	rjmp	.+26     	; 0xb76 <__pack_f+0x154>
     b5c:	80 e4       	ldi	r24, 0x40	; 64
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x14c>
     b66:	8f e3       	ldi	r24, 0x3F	; 63
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	a0 e0       	ldi	r26, 0x00	; 0
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e8 0e       	add	r14, r24
     b70:	f9 1e       	adc	r15, r25
     b72:	0a 1f       	adc	r16, r26
     b74:	1b 1f       	adc	r17, r27
     b76:	17 ff       	sbrs	r17, 7
     b78:	05 c0       	rjmp	.+10     	; 0xb84 <__pack_f+0x162>
     b7a:	16 95       	lsr	r17
     b7c:	07 95       	ror	r16
     b7e:	f7 94       	ror	r15
     b80:	e7 94       	ror	r14
     b82:	31 96       	adiw	r30, 0x01	; 1
     b84:	87 e0       	ldi	r24, 0x07	; 7
     b86:	16 95       	lsr	r17
     b88:	07 95       	ror	r16
     b8a:	f7 94       	ror	r15
     b8c:	e7 94       	ror	r14
     b8e:	8a 95       	dec	r24
     b90:	d1 f7       	brne	.-12     	; 0xb86 <__pack_f+0x164>
     b92:	05 c0       	rjmp	.+10     	; 0xb9e <__pack_f+0x17c>
     b94:	ee 24       	eor	r14, r14
     b96:	ff 24       	eor	r15, r15
     b98:	87 01       	movw	r16, r14
     b9a:	ef ef       	ldi	r30, 0xFF	; 255
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	6e 2f       	mov	r22, r30
     ba0:	67 95       	ror	r22
     ba2:	66 27       	eor	r22, r22
     ba4:	67 95       	ror	r22
     ba6:	90 2f       	mov	r25, r16
     ba8:	9f 77       	andi	r25, 0x7F	; 127
     baa:	d7 94       	ror	r13
     bac:	dd 24       	eor	r13, r13
     bae:	d7 94       	ror	r13
     bb0:	8e 2f       	mov	r24, r30
     bb2:	86 95       	lsr	r24
     bb4:	49 2f       	mov	r20, r25
     bb6:	46 2b       	or	r20, r22
     bb8:	58 2f       	mov	r21, r24
     bba:	5d 29       	or	r21, r13
     bbc:	b7 01       	movw	r22, r14
     bbe:	ca 01       	movw	r24, r20
     bc0:	1f 91       	pop	r17
     bc2:	0f 91       	pop	r16
     bc4:	ff 90       	pop	r15
     bc6:	ef 90       	pop	r14
     bc8:	df 90       	pop	r13
     bca:	08 95       	ret

00000bcc <__unpack_f>:
     bcc:	fc 01       	movw	r30, r24
     bce:	db 01       	movw	r26, r22
     bd0:	40 81       	ld	r20, Z
     bd2:	51 81       	ldd	r21, Z+1	; 0x01
     bd4:	22 81       	ldd	r18, Z+2	; 0x02
     bd6:	62 2f       	mov	r22, r18
     bd8:	6f 77       	andi	r22, 0x7F	; 127
     bda:	70 e0       	ldi	r23, 0x00	; 0
     bdc:	22 1f       	adc	r18, r18
     bde:	22 27       	eor	r18, r18
     be0:	22 1f       	adc	r18, r18
     be2:	93 81       	ldd	r25, Z+3	; 0x03
     be4:	89 2f       	mov	r24, r25
     be6:	88 0f       	add	r24, r24
     be8:	82 2b       	or	r24, r18
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	99 1f       	adc	r25, r25
     bf0:	99 27       	eor	r25, r25
     bf2:	99 1f       	adc	r25, r25
     bf4:	11 96       	adiw	r26, 0x01	; 1
     bf6:	9c 93       	st	X, r25
     bf8:	11 97       	sbiw	r26, 0x01	; 1
     bfa:	21 15       	cp	r18, r1
     bfc:	31 05       	cpc	r19, r1
     bfe:	a9 f5       	brne	.+106    	; 0xc6a <__unpack_f+0x9e>
     c00:	41 15       	cp	r20, r1
     c02:	51 05       	cpc	r21, r1
     c04:	61 05       	cpc	r22, r1
     c06:	71 05       	cpc	r23, r1
     c08:	11 f4       	brne	.+4      	; 0xc0e <__unpack_f+0x42>
     c0a:	82 e0       	ldi	r24, 0x02	; 2
     c0c:	37 c0       	rjmp	.+110    	; 0xc7c <__unpack_f+0xb0>
     c0e:	82 e8       	ldi	r24, 0x82	; 130
     c10:	9f ef       	ldi	r25, 0xFF	; 255
     c12:	13 96       	adiw	r26, 0x03	; 3
     c14:	9c 93       	st	X, r25
     c16:	8e 93       	st	-X, r24
     c18:	12 97       	sbiw	r26, 0x02	; 2
     c1a:	9a 01       	movw	r18, r20
     c1c:	ab 01       	movw	r20, r22
     c1e:	67 e0       	ldi	r22, 0x07	; 7
     c20:	22 0f       	add	r18, r18
     c22:	33 1f       	adc	r19, r19
     c24:	44 1f       	adc	r20, r20
     c26:	55 1f       	adc	r21, r21
     c28:	6a 95       	dec	r22
     c2a:	d1 f7       	brne	.-12     	; 0xc20 <__unpack_f+0x54>
     c2c:	83 e0       	ldi	r24, 0x03	; 3
     c2e:	8c 93       	st	X, r24
     c30:	0d c0       	rjmp	.+26     	; 0xc4c <__unpack_f+0x80>
     c32:	22 0f       	add	r18, r18
     c34:	33 1f       	adc	r19, r19
     c36:	44 1f       	adc	r20, r20
     c38:	55 1f       	adc	r21, r21
     c3a:	12 96       	adiw	r26, 0x02	; 2
     c3c:	8d 91       	ld	r24, X+
     c3e:	9c 91       	ld	r25, X
     c40:	13 97       	sbiw	r26, 0x03	; 3
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	13 96       	adiw	r26, 0x03	; 3
     c46:	9c 93       	st	X, r25
     c48:	8e 93       	st	-X, r24
     c4a:	12 97       	sbiw	r26, 0x02	; 2
     c4c:	20 30       	cpi	r18, 0x00	; 0
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	38 07       	cpc	r19, r24
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	48 07       	cpc	r20, r24
     c56:	80 e4       	ldi	r24, 0x40	; 64
     c58:	58 07       	cpc	r21, r24
     c5a:	58 f3       	brcs	.-42     	; 0xc32 <__unpack_f+0x66>
     c5c:	14 96       	adiw	r26, 0x04	; 4
     c5e:	2d 93       	st	X+, r18
     c60:	3d 93       	st	X+, r19
     c62:	4d 93       	st	X+, r20
     c64:	5c 93       	st	X, r21
     c66:	17 97       	sbiw	r26, 0x07	; 7
     c68:	08 95       	ret
     c6a:	2f 3f       	cpi	r18, 0xFF	; 255
     c6c:	31 05       	cpc	r19, r1
     c6e:	79 f4       	brne	.+30     	; 0xc8e <__unpack_f+0xc2>
     c70:	41 15       	cp	r20, r1
     c72:	51 05       	cpc	r21, r1
     c74:	61 05       	cpc	r22, r1
     c76:	71 05       	cpc	r23, r1
     c78:	19 f4       	brne	.+6      	; 0xc80 <__unpack_f+0xb4>
     c7a:	84 e0       	ldi	r24, 0x04	; 4
     c7c:	8c 93       	st	X, r24
     c7e:	08 95       	ret
     c80:	64 ff       	sbrs	r22, 4
     c82:	03 c0       	rjmp	.+6      	; 0xc8a <__unpack_f+0xbe>
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	8c 93       	st	X, r24
     c88:	12 c0       	rjmp	.+36     	; 0xcae <__unpack_f+0xe2>
     c8a:	1c 92       	st	X, r1
     c8c:	10 c0       	rjmp	.+32     	; 0xcae <__unpack_f+0xe2>
     c8e:	2f 57       	subi	r18, 0x7F	; 127
     c90:	30 40       	sbci	r19, 0x00	; 0
     c92:	13 96       	adiw	r26, 0x03	; 3
     c94:	3c 93       	st	X, r19
     c96:	2e 93       	st	-X, r18
     c98:	12 97       	sbiw	r26, 0x02	; 2
     c9a:	83 e0       	ldi	r24, 0x03	; 3
     c9c:	8c 93       	st	X, r24
     c9e:	87 e0       	ldi	r24, 0x07	; 7
     ca0:	44 0f       	add	r20, r20
     ca2:	55 1f       	adc	r21, r21
     ca4:	66 1f       	adc	r22, r22
     ca6:	77 1f       	adc	r23, r23
     ca8:	8a 95       	dec	r24
     caa:	d1 f7       	brne	.-12     	; 0xca0 <__unpack_f+0xd4>
     cac:	70 64       	ori	r23, 0x40	; 64
     cae:	14 96       	adiw	r26, 0x04	; 4
     cb0:	4d 93       	st	X+, r20
     cb2:	5d 93       	st	X+, r21
     cb4:	6d 93       	st	X+, r22
     cb6:	7c 93       	st	X, r23
     cb8:	17 97       	sbiw	r26, 0x07	; 7
     cba:	08 95       	ret

00000cbc <__fpcmp_parts_f>:
     cbc:	1f 93       	push	r17
     cbe:	dc 01       	movw	r26, r24
     cc0:	fb 01       	movw	r30, r22
     cc2:	9c 91       	ld	r25, X
     cc4:	92 30       	cpi	r25, 0x02	; 2
     cc6:	08 f4       	brcc	.+2      	; 0xcca <__fpcmp_parts_f+0xe>
     cc8:	47 c0       	rjmp	.+142    	; 0xd58 <__fpcmp_parts_f+0x9c>
     cca:	80 81       	ld	r24, Z
     ccc:	82 30       	cpi	r24, 0x02	; 2
     cce:	08 f4       	brcc	.+2      	; 0xcd2 <__fpcmp_parts_f+0x16>
     cd0:	43 c0       	rjmp	.+134    	; 0xd58 <__fpcmp_parts_f+0x9c>
     cd2:	94 30       	cpi	r25, 0x04	; 4
     cd4:	51 f4       	brne	.+20     	; 0xcea <__fpcmp_parts_f+0x2e>
     cd6:	11 96       	adiw	r26, 0x01	; 1
     cd8:	1c 91       	ld	r17, X
     cda:	84 30       	cpi	r24, 0x04	; 4
     cdc:	99 f5       	brne	.+102    	; 0xd44 <__fpcmp_parts_f+0x88>
     cde:	81 81       	ldd	r24, Z+1	; 0x01
     ce0:	68 2f       	mov	r22, r24
     ce2:	70 e0       	ldi	r23, 0x00	; 0
     ce4:	61 1b       	sub	r22, r17
     ce6:	71 09       	sbc	r23, r1
     ce8:	3f c0       	rjmp	.+126    	; 0xd68 <__fpcmp_parts_f+0xac>
     cea:	84 30       	cpi	r24, 0x04	; 4
     cec:	21 f0       	breq	.+8      	; 0xcf6 <__fpcmp_parts_f+0x3a>
     cee:	92 30       	cpi	r25, 0x02	; 2
     cf0:	31 f4       	brne	.+12     	; 0xcfe <__fpcmp_parts_f+0x42>
     cf2:	82 30       	cpi	r24, 0x02	; 2
     cf4:	b9 f1       	breq	.+110    	; 0xd64 <__fpcmp_parts_f+0xa8>
     cf6:	81 81       	ldd	r24, Z+1	; 0x01
     cf8:	88 23       	and	r24, r24
     cfa:	89 f1       	breq	.+98     	; 0xd5e <__fpcmp_parts_f+0xa2>
     cfc:	2d c0       	rjmp	.+90     	; 0xd58 <__fpcmp_parts_f+0x9c>
     cfe:	11 96       	adiw	r26, 0x01	; 1
     d00:	1c 91       	ld	r17, X
     d02:	11 97       	sbiw	r26, 0x01	; 1
     d04:	82 30       	cpi	r24, 0x02	; 2
     d06:	f1 f0       	breq	.+60     	; 0xd44 <__fpcmp_parts_f+0x88>
     d08:	81 81       	ldd	r24, Z+1	; 0x01
     d0a:	18 17       	cp	r17, r24
     d0c:	d9 f4       	brne	.+54     	; 0xd44 <__fpcmp_parts_f+0x88>
     d0e:	12 96       	adiw	r26, 0x02	; 2
     d10:	2d 91       	ld	r18, X+
     d12:	3c 91       	ld	r19, X
     d14:	13 97       	sbiw	r26, 0x03	; 3
     d16:	82 81       	ldd	r24, Z+2	; 0x02
     d18:	93 81       	ldd	r25, Z+3	; 0x03
     d1a:	82 17       	cp	r24, r18
     d1c:	93 07       	cpc	r25, r19
     d1e:	94 f0       	brlt	.+36     	; 0xd44 <__fpcmp_parts_f+0x88>
     d20:	28 17       	cp	r18, r24
     d22:	39 07       	cpc	r19, r25
     d24:	bc f0       	brlt	.+46     	; 0xd54 <__fpcmp_parts_f+0x98>
     d26:	14 96       	adiw	r26, 0x04	; 4
     d28:	8d 91       	ld	r24, X+
     d2a:	9d 91       	ld	r25, X+
     d2c:	0d 90       	ld	r0, X+
     d2e:	bc 91       	ld	r27, X
     d30:	a0 2d       	mov	r26, r0
     d32:	24 81       	ldd	r18, Z+4	; 0x04
     d34:	35 81       	ldd	r19, Z+5	; 0x05
     d36:	46 81       	ldd	r20, Z+6	; 0x06
     d38:	57 81       	ldd	r21, Z+7	; 0x07
     d3a:	28 17       	cp	r18, r24
     d3c:	39 07       	cpc	r19, r25
     d3e:	4a 07       	cpc	r20, r26
     d40:	5b 07       	cpc	r21, r27
     d42:	18 f4       	brcc	.+6      	; 0xd4a <__fpcmp_parts_f+0x8e>
     d44:	11 23       	and	r17, r17
     d46:	41 f0       	breq	.+16     	; 0xd58 <__fpcmp_parts_f+0x9c>
     d48:	0a c0       	rjmp	.+20     	; 0xd5e <__fpcmp_parts_f+0xa2>
     d4a:	82 17       	cp	r24, r18
     d4c:	93 07       	cpc	r25, r19
     d4e:	a4 07       	cpc	r26, r20
     d50:	b5 07       	cpc	r27, r21
     d52:	40 f4       	brcc	.+16     	; 0xd64 <__fpcmp_parts_f+0xa8>
     d54:	11 23       	and	r17, r17
     d56:	19 f0       	breq	.+6      	; 0xd5e <__fpcmp_parts_f+0xa2>
     d58:	61 e0       	ldi	r22, 0x01	; 1
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	05 c0       	rjmp	.+10     	; 0xd68 <__fpcmp_parts_f+0xac>
     d5e:	6f ef       	ldi	r22, 0xFF	; 255
     d60:	7f ef       	ldi	r23, 0xFF	; 255
     d62:	02 c0       	rjmp	.+4      	; 0xd68 <__fpcmp_parts_f+0xac>
     d64:	60 e0       	ldi	r22, 0x00	; 0
     d66:	70 e0       	ldi	r23, 0x00	; 0
     d68:	cb 01       	movw	r24, r22
     d6a:	1f 91       	pop	r17
     d6c:	08 95       	ret

00000d6e <GIE_enuEnable>:

#include "GIE_priv.h"


ES_t GIE_enuEnable( void )
{
     d6e:	df 93       	push	r29
     d70:	cf 93       	push	r28
     d72:	0f 92       	push	r0
     d74:	cd b7       	in	r28, 0x3d	; 61
     d76:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK ;
     d78:	19 82       	std	Y+1, r1	; 0x01

	SREG  |=(GIE_MASK_BIT<<I);
     d7a:	af e5       	ldi	r26, 0x5F	; 95
     d7c:	b0 e0       	ldi	r27, 0x00	; 0
     d7e:	ef e5       	ldi	r30, 0x5F	; 95
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
     d84:	80 68       	ori	r24, 0x80	; 128
     d86:	8c 93       	st	X, r24


	return Local_enuErrorState ;
     d88:	89 81       	ldd	r24, Y+1	; 0x01
}
     d8a:	0f 90       	pop	r0
     d8c:	cf 91       	pop	r28
     d8e:	df 91       	pop	r29
     d90:	08 95       	ret

00000d92 <GIE_enuDisable>:
ES_t GIE_enuDisable( void )
{
     d92:	df 93       	push	r29
     d94:	cf 93       	push	r28
     d96:	0f 92       	push	r0
     d98:	cd b7       	in	r28, 0x3d	; 61
     d9a:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK ;
     d9c:	19 82       	std	Y+1, r1	; 0x01

	SREG  &=~(GIE_MASK_BIT<<I);
     d9e:	af e5       	ldi	r26, 0x5F	; 95
     da0:	b0 e0       	ldi	r27, 0x00	; 0
     da2:	ef e5       	ldi	r30, 0x5F	; 95
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	80 81       	ld	r24, Z
     da8:	8f 77       	andi	r24, 0x7F	; 127
     daa:	8c 93       	st	X, r24



	return Local_enuErrorState ;
     dac:	89 81       	ldd	r24, Y+1	; 0x01
}
     dae:	0f 90       	pop	r0
     db0:	cf 91       	pop	r28
     db2:	df 91       	pop	r29
     db4:	08 95       	ret

00000db6 <EXTI_enuInit>:
/* Description     : Utility function to initialize the Enabled interrupts. */
/* Argument        : Address array of interrupts .                          */
/* Return          : Error state of type ES_t.                              */
/**............................................******************************/
ES_t   EXTI_enuInit( EXTI_t*  Cpy_pstrEXTICnfg )
{
     db6:	df 93       	push	r29
     db8:	cf 93       	push	r28
     dba:	cd b7       	in	r28, 0x3d	; 61
     dbc:	de b7       	in	r29, 0x3e	; 62
     dbe:	2c 97       	sbiw	r28, 0x0c	; 12
     dc0:	0f b6       	in	r0, 0x3f	; 63
     dc2:	f8 94       	cli
     dc4:	de bf       	out	0x3e, r29	; 62
     dc6:	0f be       	out	0x3f, r0	; 63
     dc8:	cd bf       	out	0x3d, r28	; 61
     dca:	9c 83       	std	Y+4, r25	; 0x04
     dcc:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK ;
     dce:	1a 82       	std	Y+2, r1	; 0x02


	if( Cpy_pstrEXTICnfg != NULL )
     dd0:	8b 81       	ldd	r24, Y+3	; 0x03
     dd2:	9c 81       	ldd	r25, Y+4	; 0x04
     dd4:	00 97       	sbiw	r24, 0x00	; 0
     dd6:	09 f4       	brne	.+2      	; 0xdda <EXTI_enuInit+0x24>
     dd8:	15 c1       	rjmp	.+554    	; 0x1004 <EXTI_enuInit+0x24e>
	{
		u8 Local_u8Iterator = 0;
     dda:	19 82       	std	Y+1, r1	; 0x01

		for( Local_u8Iterator = 0 ; Local_u8Iterator < EXTI_NUM ; Local_u8Iterator++ )
     ddc:	19 82       	std	Y+1, r1	; 0x01
     dde:	0d c1       	rjmp	.+538    	; 0xffa <EXTI_enuInit+0x244>
		{

			if( Cpy_pstrEXTICnfg[Local_u8Iterator].EXTI_u8State == EXTI_ACTIVE )
     de0:	89 81       	ldd	r24, Y+1	; 0x01
     de2:	88 2f       	mov	r24, r24
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	9c 01       	movw	r18, r24
     de8:	22 0f       	add	r18, r18
     dea:	33 1f       	adc	r19, r19
     dec:	8b 81       	ldd	r24, Y+3	; 0x03
     dee:	9c 81       	ldd	r25, Y+4	; 0x04
     df0:	fc 01       	movw	r30, r24
     df2:	e2 0f       	add	r30, r18
     df4:	f3 1f       	adc	r31, r19
     df6:	80 81       	ld	r24, Z
     df8:	81 30       	cpi	r24, 0x01	; 1
     dfa:	09 f0       	breq	.+2      	; 0xdfe <EXTI_enuInit+0x48>
     dfc:	fb c0       	rjmp	.+502    	; 0xff4 <EXTI_enuInit+0x23e>
			{
				// Enable the appropriate interrupt in each iteration.
				switch(Local_u8Iterator)
     dfe:	89 81       	ldd	r24, Y+1	; 0x01
     e00:	28 2f       	mov	r18, r24
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	3c 87       	std	Y+12, r19	; 0x0c
     e06:	2b 87       	std	Y+11, r18	; 0x0b
     e08:	8b 85       	ldd	r24, Y+11	; 0x0b
     e0a:	9c 85       	ldd	r25, Y+12	; 0x0c
     e0c:	81 30       	cpi	r24, 0x01	; 1
     e0e:	91 05       	cpc	r25, r1
     e10:	09 f4       	brne	.+2      	; 0xe14 <EXTI_enuInit+0x5e>
     e12:	67 c0       	rjmp	.+206    	; 0xee2 <EXTI_enuInit+0x12c>
     e14:	2b 85       	ldd	r18, Y+11	; 0x0b
     e16:	3c 85       	ldd	r19, Y+12	; 0x0c
     e18:	22 30       	cpi	r18, 0x02	; 2
     e1a:	31 05       	cpc	r19, r1
     e1c:	09 f4       	brne	.+2      	; 0xe20 <EXTI_enuInit+0x6a>
     e1e:	b4 c0       	rjmp	.+360    	; 0xf88 <EXTI_enuInit+0x1d2>
     e20:	8b 85       	ldd	r24, Y+11	; 0x0b
     e22:	9c 85       	ldd	r25, Y+12	; 0x0c
     e24:	00 97       	sbiw	r24, 0x00	; 0
     e26:	09 f0       	breq	.+2      	; 0xe2a <EXTI_enuInit+0x74>
     e28:	e2 c0       	rjmp	.+452    	; 0xfee <EXTI_enuInit+0x238>

				/*********************************************************
				 * Configure the interrupt0 and Handling it's cases.     *
				 *********************************************************/
				case EXTI0 :
					MCUCR  &= ~( (EXTI_MASK_BIT<<ISC00) | (EXTI_MASK_BIT<<ISC01) );
     e2a:	a5 e5       	ldi	r26, 0x55	; 85
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	e5 e5       	ldi	r30, 0x55	; 85
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	8c 7f       	andi	r24, 0xFC	; 252
     e36:	8c 93       	st	X, r24

					switch(Cpy_pstrEXTICnfg[Local_u8Iterator].EXTI_u8SenceLevel)
     e38:	89 81       	ldd	r24, Y+1	; 0x01
     e3a:	88 2f       	mov	r24, r24
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	9c 01       	movw	r18, r24
     e40:	22 0f       	add	r18, r18
     e42:	33 1f       	adc	r19, r19
     e44:	8b 81       	ldd	r24, Y+3	; 0x03
     e46:	9c 81       	ldd	r25, Y+4	; 0x04
     e48:	fc 01       	movw	r30, r24
     e4a:	e2 0f       	add	r30, r18
     e4c:	f3 1f       	adc	r31, r19
     e4e:	81 81       	ldd	r24, Z+1	; 0x01
     e50:	28 2f       	mov	r18, r24
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	3a 87       	std	Y+10, r19	; 0x0a
     e56:	29 87       	std	Y+9, r18	; 0x09
     e58:	89 85       	ldd	r24, Y+9	; 0x09
     e5a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e5c:	81 30       	cpi	r24, 0x01	; 1
     e5e:	91 05       	cpc	r25, r1
     e60:	f9 f0       	breq	.+62     	; 0xea0 <EXTI_enuInit+0xea>
     e62:	29 85       	ldd	r18, Y+9	; 0x09
     e64:	3a 85       	ldd	r19, Y+10	; 0x0a
     e66:	22 30       	cpi	r18, 0x02	; 2
     e68:	31 05       	cpc	r19, r1
     e6a:	2c f4       	brge	.+10     	; 0xe76 <EXTI_enuInit+0xc0>
     e6c:	89 85       	ldd	r24, Y+9	; 0x09
     e6e:	9a 85       	ldd	r25, Y+10	; 0x0a
     e70:	00 97       	sbiw	r24, 0x00	; 0
     e72:	61 f0       	breq	.+24     	; 0xe8c <EXTI_enuInit+0xd6>
     e74:	2c c0       	rjmp	.+88     	; 0xece <EXTI_enuInit+0x118>
     e76:	29 85       	ldd	r18, Y+9	; 0x09
     e78:	3a 85       	ldd	r19, Y+10	; 0x0a
     e7a:	22 30       	cpi	r18, 0x02	; 2
     e7c:	31 05       	cpc	r19, r1
     e7e:	d1 f0       	breq	.+52     	; 0xeb4 <EXTI_enuInit+0xfe>
     e80:	89 85       	ldd	r24, Y+9	; 0x09
     e82:	9a 85       	ldd	r25, Y+10	; 0x0a
     e84:	83 30       	cpi	r24, 0x03	; 3
     e86:	91 05       	cpc	r25, r1
     e88:	f9 f0       	breq	.+62     	; 0xec8 <EXTI_enuInit+0x112>
     e8a:	21 c0       	rjmp	.+66     	; 0xece <EXTI_enuInit+0x118>
					{
					case EXTI_RISING_EDGE :
						MCUCR   |= (EXTI_MASK_BIT<<ISC00 )|(EXTI_MASK_BIT<<ISC01 );
     e8c:	a5 e5       	ldi	r26, 0x55	; 85
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	e5 e5       	ldi	r30, 0x55	; 85
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	83 60       	ori	r24, 0x03	; 3
     e98:	8c 93       	st	X, r24
						Local_enuErrorState = ES_OK ;
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	8a 83       	std	Y+2, r24	; 0x02
     e9e:	19 c0       	rjmp	.+50     	; 0xed2 <EXTI_enuInit+0x11c>
						break;

					case EXTI_FALLING_EDGE :
						MCUCR   |=  (EXTI_MASK_BIT<<ISC01 );
     ea0:	a5 e5       	ldi	r26, 0x55	; 85
     ea2:	b0 e0       	ldi	r27, 0x00	; 0
     ea4:	e5 e5       	ldi	r30, 0x55	; 85
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	80 81       	ld	r24, Z
     eaa:	82 60       	ori	r24, 0x02	; 2
     eac:	8c 93       	st	X, r24
						Local_enuErrorState = ES_OK ;
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	8a 83       	std	Y+2, r24	; 0x02
     eb2:	0f c0       	rjmp	.+30     	; 0xed2 <EXTI_enuInit+0x11c>
						break;

					case  EXTI_LOGIC_CHANGE:
						MCUCR   |=  (EXTI_MASK_BIT<<ISC00 );
     eb4:	a5 e5       	ldi	r26, 0x55	; 85
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	e5 e5       	ldi	r30, 0x55	; 85
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	81 60       	ori	r24, 0x01	; 1
     ec0:	8c 93       	st	X, r24
						Local_enuErrorState = ES_OK ;
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	8a 83       	std	Y+2, r24	; 0x02
     ec6:	05 c0       	rjmp	.+10     	; 0xed2 <EXTI_enuInit+0x11c>
						break;

					case EXTI_LOW_LEVEL :
						Local_enuErrorState = ES_OK ;
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	8a 83       	std	Y+2, r24	; 0x02
     ecc:	02 c0       	rjmp	.+4      	; 0xed2 <EXTI_enuInit+0x11c>
						break;

					default:
						Local_enuErrorState = ES_OUT_OF_RANGE ;
     ece:	83 e0       	ldi	r24, 0x03	; 3
     ed0:	8a 83       	std	Y+2, r24	; 0x02


					}

					//Enable the ENT0.
					GICR |=(EXTI_MASK_BIT<<INT0);
     ed2:	ab e5       	ldi	r26, 0x5B	; 91
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	eb e5       	ldi	r30, 0x5B	; 91
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	80 64       	ori	r24, 0x40	; 64
     ede:	8c 93       	st	X, r24
     ee0:	88 c0       	rjmp	.+272    	; 0xff2 <EXTI_enuInit+0x23c>

					/*********************************************************
					 * Configure the interrupt1 and Handling it's cases.     *
					 *********************************************************/
					case EXTI1 :
						MCUCR  &= ~( (EXTI_MASK_BIT<<ISC10) | (EXTI_MASK_BIT<<ISC11) );
     ee2:	a5 e5       	ldi	r26, 0x55	; 85
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	e5 e5       	ldi	r30, 0x55	; 85
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	83 7f       	andi	r24, 0xF3	; 243
     eee:	8c 93       	st	X, r24

						switch(Cpy_pstrEXTICnfg[Local_u8Iterator].EXTI_u8SenceLevel)
     ef0:	89 81       	ldd	r24, Y+1	; 0x01
     ef2:	88 2f       	mov	r24, r24
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	9c 01       	movw	r18, r24
     ef8:	22 0f       	add	r18, r18
     efa:	33 1f       	adc	r19, r19
     efc:	8b 81       	ldd	r24, Y+3	; 0x03
     efe:	9c 81       	ldd	r25, Y+4	; 0x04
     f00:	fc 01       	movw	r30, r24
     f02:	e2 0f       	add	r30, r18
     f04:	f3 1f       	adc	r31, r19
     f06:	81 81       	ldd	r24, Z+1	; 0x01
     f08:	28 2f       	mov	r18, r24
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	38 87       	std	Y+8, r19	; 0x08
     f0e:	2f 83       	std	Y+7, r18	; 0x07
     f10:	8f 81       	ldd	r24, Y+7	; 0x07
     f12:	98 85       	ldd	r25, Y+8	; 0x08
     f14:	81 30       	cpi	r24, 0x01	; 1
     f16:	91 05       	cpc	r25, r1
     f18:	e9 f0       	breq	.+58     	; 0xf54 <EXTI_enuInit+0x19e>
     f1a:	2f 81       	ldd	r18, Y+7	; 0x07
     f1c:	38 85       	ldd	r19, Y+8	; 0x08
     f1e:	22 30       	cpi	r18, 0x02	; 2
     f20:	31 05       	cpc	r19, r1
     f22:	2c f4       	brge	.+10     	; 0xf2e <EXTI_enuInit+0x178>
     f24:	8f 81       	ldd	r24, Y+7	; 0x07
     f26:	98 85       	ldd	r25, Y+8	; 0x08
     f28:	00 97       	sbiw	r24, 0x00	; 0
     f2a:	61 f0       	breq	.+24     	; 0xf44 <EXTI_enuInit+0x18e>
     f2c:	23 c0       	rjmp	.+70     	; 0xf74 <EXTI_enuInit+0x1be>
     f2e:	2f 81       	ldd	r18, Y+7	; 0x07
     f30:	38 85       	ldd	r19, Y+8	; 0x08
     f32:	22 30       	cpi	r18, 0x02	; 2
     f34:	31 05       	cpc	r19, r1
     f36:	b1 f0       	breq	.+44     	; 0xf64 <EXTI_enuInit+0x1ae>
     f38:	8f 81       	ldd	r24, Y+7	; 0x07
     f3a:	98 85       	ldd	r25, Y+8	; 0x08
     f3c:	83 30       	cpi	r24, 0x03	; 3
     f3e:	91 05       	cpc	r25, r1
     f40:	d9 f0       	breq	.+54     	; 0xf78 <EXTI_enuInit+0x1c2>
     f42:	18 c0       	rjmp	.+48     	; 0xf74 <EXTI_enuInit+0x1be>
						{
						case EXTI_RISING_EDGE :
							MCUCR   |= (EXTI_MASK_BIT<<ISC10 )|(EXTI_MASK_BIT<<ISC11 );
     f44:	a5 e5       	ldi	r26, 0x55	; 85
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	e5 e5       	ldi	r30, 0x55	; 85
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	8c 60       	ori	r24, 0x0C	; 12
     f50:	8c 93       	st	X, r24
     f52:	12 c0       	rjmp	.+36     	; 0xf78 <EXTI_enuInit+0x1c2>
							break;

						case EXTI_FALLING_EDGE :
							MCUCR   |=  (EXTI_MASK_BIT<<ISC11 );
     f54:	a5 e5       	ldi	r26, 0x55	; 85
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	e5 e5       	ldi	r30, 0x55	; 85
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	88 60       	ori	r24, 0x08	; 8
     f60:	8c 93       	st	X, r24
     f62:	0a c0       	rjmp	.+20     	; 0xf78 <EXTI_enuInit+0x1c2>
							break;

						case  EXTI_LOGIC_CHANGE:
							MCUCR   |=  (EXTI_MASK_BIT<<ISC10 );
     f64:	a5 e5       	ldi	r26, 0x55	; 85
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	e5 e5       	ldi	r30, 0x55	; 85
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	84 60       	ori	r24, 0x04	; 4
     f70:	8c 93       	st	X, r24
     f72:	02 c0       	rjmp	.+4      	; 0xf78 <EXTI_enuInit+0x1c2>

						case EXTI_LOW_LEVEL :
							break;

						default:
							Local_enuErrorState = ES_OUT_OF_RANGE ;
     f74:	83 e0       	ldi	r24, 0x03	; 3
     f76:	8a 83       	std	Y+2, r24	; 0x02
						}

						//Enable the ENT1.
						GICR |=(EXTI_MASK_BIT<<INT1);
     f78:	ab e5       	ldi	r26, 0x5B	; 91
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	eb e5       	ldi	r30, 0x5B	; 91
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	80 68       	ori	r24, 0x80	; 128
     f84:	8c 93       	st	X, r24
     f86:	35 c0       	rjmp	.+106    	; 0xff2 <EXTI_enuInit+0x23c>

						/*********************************************************
						 * Configure the interrupt2 and Handling it's cases.     *
						 *********************************************************/
						case EXTI2 :
							MCUCSR  &= ~(EXTI_MASK_BIT<<ISC2) ;
     f88:	a4 e5       	ldi	r26, 0x54	; 84
     f8a:	b0 e0       	ldi	r27, 0x00	; 0
     f8c:	e4 e5       	ldi	r30, 0x54	; 84
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
     f92:	8f 7b       	andi	r24, 0xBF	; 191
     f94:	8c 93       	st	X, r24

							switch(Cpy_pstrEXTICnfg[Local_u8Iterator].EXTI_u8SenceLevel)
     f96:	89 81       	ldd	r24, Y+1	; 0x01
     f98:	88 2f       	mov	r24, r24
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	9c 01       	movw	r18, r24
     f9e:	22 0f       	add	r18, r18
     fa0:	33 1f       	adc	r19, r19
     fa2:	8b 81       	ldd	r24, Y+3	; 0x03
     fa4:	9c 81       	ldd	r25, Y+4	; 0x04
     fa6:	fc 01       	movw	r30, r24
     fa8:	e2 0f       	add	r30, r18
     faa:	f3 1f       	adc	r31, r19
     fac:	81 81       	ldd	r24, Z+1	; 0x01
     fae:	28 2f       	mov	r18, r24
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	3e 83       	std	Y+6, r19	; 0x06
     fb4:	2d 83       	std	Y+5, r18	; 0x05
     fb6:	8d 81       	ldd	r24, Y+5	; 0x05
     fb8:	9e 81       	ldd	r25, Y+6	; 0x06
     fba:	00 97       	sbiw	r24, 0x00	; 0
     fbc:	31 f0       	breq	.+12     	; 0xfca <EXTI_enuInit+0x214>
     fbe:	2d 81       	ldd	r18, Y+5	; 0x05
     fc0:	3e 81       	ldd	r19, Y+6	; 0x06
     fc2:	21 30       	cpi	r18, 0x01	; 1
     fc4:	31 05       	cpc	r19, r1
     fc6:	59 f0       	breq	.+22     	; 0xfde <EXTI_enuInit+0x228>
     fc8:	08 c0       	rjmp	.+16     	; 0xfda <EXTI_enuInit+0x224>
							{
							case EXTI_RISING_EDGE :
								MCUCSR   |= (EXTI_MASK_BIT<<ISC2 );
     fca:	a4 e5       	ldi	r26, 0x54	; 84
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	e4 e5       	ldi	r30, 0x54	; 84
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	80 64       	ori	r24, 0x40	; 64
     fd6:	8c 93       	st	X, r24
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <EXTI_enuInit+0x228>

							case EXTI_FALLING_EDGE :
								break;

							default:
								Local_enuErrorState = ES_OUT_OF_RANGE ;
     fda:	83 e0       	ldi	r24, 0x03	; 3
     fdc:	8a 83       	std	Y+2, r24	; 0x02
							}

							//Enable the ENT2.
							GICR |=(EXTI_MASK_BIT<<INT2);
     fde:	ab e5       	ldi	r26, 0x5B	; 91
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	eb e5       	ldi	r30, 0x5B	; 91
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	80 62       	ori	r24, 0x20	; 32
     fea:	8c 93       	st	X, r24
     fec:	02 c0       	rjmp	.+4      	; 0xff2 <EXTI_enuInit+0x23c>
							break;



							default:
								Local_enuErrorState = ES_OUT_OF_RANGE ;
     fee:	83 e0       	ldi	r24, 0x03	; 3
     ff0:	8a 83       	std	Y+2, r24	; 0x02

				}//End of outer Switch case.

				Local_enuErrorState = ES_NOK ;
     ff2:	1a 82       	std	Y+2, r1	; 0x02

	if( Cpy_pstrEXTICnfg != NULL )
	{
		u8 Local_u8Iterator = 0;

		for( Local_u8Iterator = 0 ; Local_u8Iterator < EXTI_NUM ; Local_u8Iterator++ )
     ff4:	89 81       	ldd	r24, Y+1	; 0x01
     ff6:	8f 5f       	subi	r24, 0xFF	; 255
     ff8:	89 83       	std	Y+1, r24	; 0x01
     ffa:	89 81       	ldd	r24, Y+1	; 0x01
     ffc:	88 23       	and	r24, r24
     ffe:	09 f4       	brne	.+2      	; 0x1002 <EXTI_enuInit+0x24c>
    1000:	ef ce       	rjmp	.-546    	; 0xde0 <EXTI_enuInit+0x2a>
    1002:	02 c0       	rjmp	.+4      	; 0x1008 <EXTI_enuInit+0x252>
		}

	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER ;
    1004:	82 e0       	ldi	r24, 0x02	; 2
    1006:	8a 83       	std	Y+2, r24	; 0x02
	}


	return Local_enuErrorState;
    1008:	8a 81       	ldd	r24, Y+2	; 0x02
}//End of EXTI_enuInit.
    100a:	2c 96       	adiw	r28, 0x0c	; 12
    100c:	0f b6       	in	r0, 0x3f	; 63
    100e:	f8 94       	cli
    1010:	de bf       	out	0x3e, r29	; 62
    1012:	0f be       	out	0x3f, r0	; 63
    1014:	cd bf       	out	0x3d, r28	; 61
    1016:	cf 91       	pop	r28
    1018:	df 91       	pop	r29
    101a:	08 95       	ret

0000101c <EXTI_enuSetSenceMode>:
/*                                  FALLING_EDGE                            */
/*                                                                          */
/* Return          : Error state of type ES_t.                              */
/*..........................*************************************************/
ES_t   EXTI_enuSetSenceMode( u8 Cpy_u8EXTI_ID  , u8 Cpy_u8SenceLevel )
{
    101c:	df 93       	push	r29
    101e:	cf 93       	push	r28
    1020:	cd b7       	in	r28, 0x3d	; 61
    1022:	de b7       	in	r29, 0x3e	; 62
    1024:	2b 97       	sbiw	r28, 0x0b	; 11
    1026:	0f b6       	in	r0, 0x3f	; 63
    1028:	f8 94       	cli
    102a:	de bf       	out	0x3e, r29	; 62
    102c:	0f be       	out	0x3f, r0	; 63
    102e:	cd bf       	out	0x3d, r28	; 61
    1030:	8a 83       	std	Y+2, r24	; 0x02
    1032:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK ;
    1034:	19 82       	std	Y+1, r1	; 0x01

	if(Cpy_u8EXTI_ID <= EXTI_NUM )
    1036:	8a 81       	ldd	r24, Y+2	; 0x02
    1038:	82 30       	cpi	r24, 0x02	; 2
    103a:	08 f0       	brcs	.+2      	; 0x103e <EXTI_enuSetSenceMode+0x22>
    103c:	bd c0       	rjmp	.+378    	; 0x11b8 <EXTI_enuSetSenceMode+0x19c>
	{

		switch( Cpy_u8EXTI_ID )
    103e:	8a 81       	ldd	r24, Y+2	; 0x02
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	3b 87       	std	Y+11, r19	; 0x0b
    1046:	2a 87       	std	Y+10, r18	; 0x0a
    1048:	8a 85       	ldd	r24, Y+10	; 0x0a
    104a:	9b 85       	ldd	r25, Y+11	; 0x0b
    104c:	81 30       	cpi	r24, 0x01	; 1
    104e:	91 05       	cpc	r25, r1
    1050:	09 f4       	brne	.+2      	; 0x1054 <EXTI_enuSetSenceMode+0x38>
    1052:	4d c0       	rjmp	.+154    	; 0x10ee <EXTI_enuSetSenceMode+0xd2>
    1054:	2a 85       	ldd	r18, Y+10	; 0x0a
    1056:	3b 85       	ldd	r19, Y+11	; 0x0b
    1058:	22 30       	cpi	r18, 0x02	; 2
    105a:	31 05       	cpc	r19, r1
    105c:	09 f4       	brne	.+2      	; 0x1060 <EXTI_enuSetSenceMode+0x44>
    105e:	88 c0       	rjmp	.+272    	; 0x1170 <EXTI_enuSetSenceMode+0x154>
    1060:	8a 85       	ldd	r24, Y+10	; 0x0a
    1062:	9b 85       	ldd	r25, Y+11	; 0x0b
    1064:	00 97       	sbiw	r24, 0x00	; 0
    1066:	09 f0       	breq	.+2      	; 0x106a <EXTI_enuSetSenceMode+0x4e>
    1068:	a4 c0       	rjmp	.+328    	; 0x11b2 <EXTI_enuSetSenceMode+0x196>
		{
		/*****************************************************************
		 * Interrupt0  Sense Control Cases Handling.                     *
		 *****************************************************************/
		case EXTI0:
			MCUCR  &= ~( (EXTI_MASK_BIT<<ISC00) | (EXTI_MASK_BIT<<ISC01) );
    106a:	a5 e5       	ldi	r26, 0x55	; 85
    106c:	b0 e0       	ldi	r27, 0x00	; 0
    106e:	e5 e5       	ldi	r30, 0x55	; 85
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	8c 7f       	andi	r24, 0xFC	; 252
    1076:	8c 93       	st	X, r24

			switch(Cpy_u8SenceLevel)
    1078:	8b 81       	ldd	r24, Y+3	; 0x03
    107a:	28 2f       	mov	r18, r24
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	39 87       	std	Y+9, r19	; 0x09
    1080:	28 87       	std	Y+8, r18	; 0x08
    1082:	88 85       	ldd	r24, Y+8	; 0x08
    1084:	99 85       	ldd	r25, Y+9	; 0x09
    1086:	81 30       	cpi	r24, 0x01	; 1
    1088:	91 05       	cpc	r25, r1
    108a:	f1 f0       	breq	.+60     	; 0x10c8 <EXTI_enuSetSenceMode+0xac>
    108c:	28 85       	ldd	r18, Y+8	; 0x08
    108e:	39 85       	ldd	r19, Y+9	; 0x09
    1090:	22 30       	cpi	r18, 0x02	; 2
    1092:	31 05       	cpc	r19, r1
    1094:	2c f4       	brge	.+10     	; 0x10a0 <EXTI_enuSetSenceMode+0x84>
    1096:	88 85       	ldd	r24, Y+8	; 0x08
    1098:	99 85       	ldd	r25, Y+9	; 0x09
    109a:	00 97       	sbiw	r24, 0x00	; 0
    109c:	69 f0       	breq	.+26     	; 0x10b8 <EXTI_enuSetSenceMode+0x9c>
    109e:	24 c0       	rjmp	.+72     	; 0x10e8 <EXTI_enuSetSenceMode+0xcc>
    10a0:	28 85       	ldd	r18, Y+8	; 0x08
    10a2:	39 85       	ldd	r19, Y+9	; 0x09
    10a4:	22 30       	cpi	r18, 0x02	; 2
    10a6:	31 05       	cpc	r19, r1
    10a8:	b9 f0       	breq	.+46     	; 0x10d8 <EXTI_enuSetSenceMode+0xbc>
    10aa:	88 85       	ldd	r24, Y+8	; 0x08
    10ac:	99 85       	ldd	r25, Y+9	; 0x09
    10ae:	83 30       	cpi	r24, 0x03	; 3
    10b0:	91 05       	cpc	r25, r1
    10b2:	09 f4       	brne	.+2      	; 0x10b6 <EXTI_enuSetSenceMode+0x9a>
    10b4:	7e c0       	rjmp	.+252    	; 0x11b2 <EXTI_enuSetSenceMode+0x196>
    10b6:	18 c0       	rjmp	.+48     	; 0x10e8 <EXTI_enuSetSenceMode+0xcc>
			{
			case EXTI_RISING_EDGE :
				MCUCR   |= (EXTI_MASK_BIT<<ISC00 )|(EXTI_MASK_BIT<<ISC01 );
    10b8:	a5 e5       	ldi	r26, 0x55	; 85
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	e5 e5       	ldi	r30, 0x55	; 85
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	83 60       	ori	r24, 0x03	; 3
    10c4:	8c 93       	st	X, r24
    10c6:	75 c0       	rjmp	.+234    	; 0x11b2 <EXTI_enuSetSenceMode+0x196>
				break;

			case EXTI_FALLING_EDGE :
				MCUCR   |=  (EXTI_MASK_BIT<<ISC01 );
    10c8:	a5 e5       	ldi	r26, 0x55	; 85
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	e5 e5       	ldi	r30, 0x55	; 85
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	82 60       	ori	r24, 0x02	; 2
    10d4:	8c 93       	st	X, r24
    10d6:	6d c0       	rjmp	.+218    	; 0x11b2 <EXTI_enuSetSenceMode+0x196>
				break;

			case  EXTI_LOGIC_CHANGE:
				MCUCR   |=  (EXTI_MASK_BIT<<ISC00 );
    10d8:	a5 e5       	ldi	r26, 0x55	; 85
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	e5 e5       	ldi	r30, 0x55	; 85
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	81 60       	ori	r24, 0x01	; 1
    10e4:	8c 93       	st	X, r24
    10e6:	65 c0       	rjmp	.+202    	; 0x11b2 <EXTI_enuSetSenceMode+0x196>

			case EXTI_LOW_LEVEL :
				break;

			default:
				Local_enuErrorState = ES_OUT_OF_RANGE ;
    10e8:	83 e0       	ldi	r24, 0x03	; 3
    10ea:	89 83       	std	Y+1, r24	; 0x01
    10ec:	62 c0       	rjmp	.+196    	; 0x11b2 <EXTI_enuSetSenceMode+0x196>

			/*****************************************************************
			 * Interrupt1  Sense Control Cases Handling.                     *
			 *****************************************************************/
			case EXTI1:
				MCUCR  &= ~( (EXTI_MASK_BIT<<ISC10) | (EXTI_MASK_BIT<<ISC11) );
    10ee:	a5 e5       	ldi	r26, 0x55	; 85
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	e5 e5       	ldi	r30, 0x55	; 85
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	83 7f       	andi	r24, 0xF3	; 243
    10fa:	8c 93       	st	X, r24
				switch(Cpy_u8SenceLevel)
    10fc:	8b 81       	ldd	r24, Y+3	; 0x03
    10fe:	28 2f       	mov	r18, r24
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	3f 83       	std	Y+7, r19	; 0x07
    1104:	2e 83       	std	Y+6, r18	; 0x06
    1106:	8e 81       	ldd	r24, Y+6	; 0x06
    1108:	9f 81       	ldd	r25, Y+7	; 0x07
    110a:	81 30       	cpi	r24, 0x01	; 1
    110c:	91 05       	cpc	r25, r1
    110e:	e9 f0       	breq	.+58     	; 0x114a <EXTI_enuSetSenceMode+0x12e>
    1110:	2e 81       	ldd	r18, Y+6	; 0x06
    1112:	3f 81       	ldd	r19, Y+7	; 0x07
    1114:	22 30       	cpi	r18, 0x02	; 2
    1116:	31 05       	cpc	r19, r1
    1118:	2c f4       	brge	.+10     	; 0x1124 <EXTI_enuSetSenceMode+0x108>
    111a:	8e 81       	ldd	r24, Y+6	; 0x06
    111c:	9f 81       	ldd	r25, Y+7	; 0x07
    111e:	00 97       	sbiw	r24, 0x00	; 0
    1120:	61 f0       	breq	.+24     	; 0x113a <EXTI_enuSetSenceMode+0x11e>
    1122:	23 c0       	rjmp	.+70     	; 0x116a <EXTI_enuSetSenceMode+0x14e>
    1124:	2e 81       	ldd	r18, Y+6	; 0x06
    1126:	3f 81       	ldd	r19, Y+7	; 0x07
    1128:	22 30       	cpi	r18, 0x02	; 2
    112a:	31 05       	cpc	r19, r1
    112c:	b1 f0       	breq	.+44     	; 0x115a <EXTI_enuSetSenceMode+0x13e>
    112e:	8e 81       	ldd	r24, Y+6	; 0x06
    1130:	9f 81       	ldd	r25, Y+7	; 0x07
    1132:	83 30       	cpi	r24, 0x03	; 3
    1134:	91 05       	cpc	r25, r1
    1136:	e9 f1       	breq	.+122    	; 0x11b2 <EXTI_enuSetSenceMode+0x196>
    1138:	18 c0       	rjmp	.+48     	; 0x116a <EXTI_enuSetSenceMode+0x14e>
				{
				case EXTI_RISING_EDGE :
					MCUCR   |= (EXTI_MASK_BIT<<ISC10 )|(EXTI_MASK_BIT<<ISC11 );
    113a:	a5 e5       	ldi	r26, 0x55	; 85
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	e5 e5       	ldi	r30, 0x55	; 85
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	8c 60       	ori	r24, 0x0C	; 12
    1146:	8c 93       	st	X, r24
    1148:	34 c0       	rjmp	.+104    	; 0x11b2 <EXTI_enuSetSenceMode+0x196>
					break;

				case EXTI_FALLING_EDGE :
					MCUCR   |=  (EXTI_MASK_BIT<<ISC11 );
    114a:	a5 e5       	ldi	r26, 0x55	; 85
    114c:	b0 e0       	ldi	r27, 0x00	; 0
    114e:	e5 e5       	ldi	r30, 0x55	; 85
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	88 60       	ori	r24, 0x08	; 8
    1156:	8c 93       	st	X, r24
    1158:	2c c0       	rjmp	.+88     	; 0x11b2 <EXTI_enuSetSenceMode+0x196>
					break;

				case  EXTI_LOGIC_CHANGE:
					MCUCR   |=  (EXTI_MASK_BIT<<ISC10 );
    115a:	a5 e5       	ldi	r26, 0x55	; 85
    115c:	b0 e0       	ldi	r27, 0x00	; 0
    115e:	e5 e5       	ldi	r30, 0x55	; 85
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	80 81       	ld	r24, Z
    1164:	84 60       	ori	r24, 0x04	; 4
    1166:	8c 93       	st	X, r24
    1168:	24 c0       	rjmp	.+72     	; 0x11b2 <EXTI_enuSetSenceMode+0x196>

				case EXTI_LOW_LEVEL :
					break;

				default:
					Local_enuErrorState = ES_OUT_OF_RANGE ;
    116a:	83 e0       	ldi	r24, 0x03	; 3
    116c:	89 83       	std	Y+1, r24	; 0x01
    116e:	21 c0       	rjmp	.+66     	; 0x11b2 <EXTI_enuSetSenceMode+0x196>
				/*****************************************************************
				 * Interrupt2  Sense Control Cases Handling.                     *
				 *****************************************************************/
				case EXTI2:

					switch(Cpy_u8SenceLevel)
    1170:	8b 81       	ldd	r24, Y+3	; 0x03
    1172:	28 2f       	mov	r18, r24
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	3d 83       	std	Y+5, r19	; 0x05
    1178:	2c 83       	std	Y+4, r18	; 0x04
    117a:	8c 81       	ldd	r24, Y+4	; 0x04
    117c:	9d 81       	ldd	r25, Y+5	; 0x05
    117e:	00 97       	sbiw	r24, 0x00	; 0
    1180:	31 f0       	breq	.+12     	; 0x118e <EXTI_enuSetSenceMode+0x172>
    1182:	2c 81       	ldd	r18, Y+4	; 0x04
    1184:	3d 81       	ldd	r19, Y+5	; 0x05
    1186:	21 30       	cpi	r18, 0x01	; 1
    1188:	31 05       	cpc	r19, r1
    118a:	49 f0       	breq	.+18     	; 0x119e <EXTI_enuSetSenceMode+0x182>
    118c:	10 c0       	rjmp	.+32     	; 0x11ae <EXTI_enuSetSenceMode+0x192>
					{
					case EXTI_RISING_EDGE :
						MCUCSR  |=(EXTI_MASK_BIT<<ISC2) ;
    118e:	a4 e5       	ldi	r26, 0x54	; 84
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	e4 e5       	ldi	r30, 0x54	; 84
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	80 64       	ori	r24, 0x40	; 64
    119a:	8c 93       	st	X, r24
    119c:	0a c0       	rjmp	.+20     	; 0x11b2 <EXTI_enuSetSenceMode+0x196>
						break;

					case EXTI_FALLING_EDGE :
						MCUCSR  &=~(EXTI_MASK_BIT<<ISC2) ;
    119e:	a4 e5       	ldi	r26, 0x54	; 84
    11a0:	b0 e0       	ldi	r27, 0x00	; 0
    11a2:	e4 e5       	ldi	r30, 0x54	; 84
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	80 81       	ld	r24, Z
    11a8:	8f 7b       	andi	r24, 0xBF	; 191
    11aa:	8c 93       	st	X, r24
    11ac:	02 c0       	rjmp	.+4      	; 0x11b2 <EXTI_enuSetSenceMode+0x196>
						break;

					default:
						Local_enuErrorState = ES_OUT_OF_RANGE ;
    11ae:	83 e0       	ldi	r24, 0x03	; 3
    11b0:	89 83       	std	Y+1, r24	; 0x01
					break ;


		}

		Local_enuErrorState = ES_OK;
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	89 83       	std	Y+1, r24	; 0x01
    11b6:	02 c0       	rjmp	.+4      	; 0x11bc <EXTI_enuSetSenceMode+0x1a0>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    11b8:	83 e0       	ldi	r24, 0x03	; 3
    11ba:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    11bc:	89 81       	ldd	r24, Y+1	; 0x01

}//End of EXTI_enuSetSenceMode.
    11be:	2b 96       	adiw	r28, 0x0b	; 11
    11c0:	0f b6       	in	r0, 0x3f	; 63
    11c2:	f8 94       	cli
    11c4:	de bf       	out	0x3e, r29	; 62
    11c6:	0f be       	out	0x3f, r0	; 63
    11c8:	cd bf       	out	0x3d, r28	; 61
    11ca:	cf 91       	pop	r28
    11cc:	df 91       	pop	r29
    11ce:	08 95       	ret

000011d0 <EXTI_enuEnableINT>:
/*                                 EXTI_2 --->for interrupt_2                */
/*                                                                           */
/* Return          : Error state of type ES_t.                               */
/*.......................*****************************************************/
ES_t   EXTI_enuEnableINT( u8 Cpy_u8EXTI_ID  )
{
    11d0:	df 93       	push	r29
    11d2:	cf 93       	push	r28
    11d4:	00 d0       	rcall	.+0      	; 0x11d6 <EXTI_enuEnableINT+0x6>
    11d6:	00 d0       	rcall	.+0      	; 0x11d8 <EXTI_enuEnableINT+0x8>
    11d8:	cd b7       	in	r28, 0x3d	; 61
    11da:	de b7       	in	r29, 0x3e	; 62
    11dc:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK ;
    11de:	19 82       	std	Y+1, r1	; 0x01

	if( Cpy_u8EXTI_ID < EXTI_NUM)
    11e0:	8a 81       	ldd	r24, Y+2	; 0x02
    11e2:	88 23       	and	r24, r24
    11e4:	69 f5       	brne	.+90     	; 0x1240 <EXTI_enuEnableINT+0x70>
	{
		switch(Cpy_u8EXTI_ID)
    11e6:	8a 81       	ldd	r24, Y+2	; 0x02
    11e8:	28 2f       	mov	r18, r24
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	3c 83       	std	Y+4, r19	; 0x04
    11ee:	2b 83       	std	Y+3, r18	; 0x03
    11f0:	8b 81       	ldd	r24, Y+3	; 0x03
    11f2:	9c 81       	ldd	r25, Y+4	; 0x04
    11f4:	81 30       	cpi	r24, 0x01	; 1
    11f6:	91 05       	cpc	r25, r1
    11f8:	89 f0       	breq	.+34     	; 0x121c <EXTI_enuEnableINT+0x4c>
    11fa:	2b 81       	ldd	r18, Y+3	; 0x03
    11fc:	3c 81       	ldd	r19, Y+4	; 0x04
    11fe:	22 30       	cpi	r18, 0x02	; 2
    1200:	31 05       	cpc	r19, r1
    1202:	a1 f0       	breq	.+40     	; 0x122c <EXTI_enuEnableINT+0x5c>
    1204:	8b 81       	ldd	r24, Y+3	; 0x03
    1206:	9c 81       	ldd	r25, Y+4	; 0x04
    1208:	00 97       	sbiw	r24, 0x00	; 0
    120a:	b9 f4       	brne	.+46     	; 0x123a <EXTI_enuEnableINT+0x6a>
		{

		case EXTI0:
			//Enable interrupt 0 .
			GICR |= (EXTI_MASK_BIT<< INT0);
    120c:	ab e5       	ldi	r26, 0x5B	; 91
    120e:	b0 e0       	ldi	r27, 0x00	; 0
    1210:	eb e5       	ldi	r30, 0x5B	; 91
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	80 81       	ld	r24, Z
    1216:	80 64       	ori	r24, 0x40	; 64
    1218:	8c 93       	st	X, r24
    121a:	0f c0       	rjmp	.+30     	; 0x123a <EXTI_enuEnableINT+0x6a>
			break;

		case EXTI1:
			//Enable interrupt 1 .
			GICR |= (EXTI_MASK_BIT<< INT1);
    121c:	ab e5       	ldi	r26, 0x5B	; 91
    121e:	b0 e0       	ldi	r27, 0x00	; 0
    1220:	eb e5       	ldi	r30, 0x5B	; 91
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	80 68       	ori	r24, 0x80	; 128
    1228:	8c 93       	st	X, r24
    122a:	07 c0       	rjmp	.+14     	; 0x123a <EXTI_enuEnableINT+0x6a>
			break;

		case EXTI2:
			//Enable interrupt 2 .
			GICR |= (EXTI_MASK_BIT<< INT2);
    122c:	ab e5       	ldi	r26, 0x5B	; 91
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	eb e5       	ldi	r30, 0x5B	; 91
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	80 62       	ori	r24, 0x20	; 32
    1238:	8c 93       	st	X, r24
			break;

		}
		Local_enuErrorState = ES_OK  ;
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	89 83       	std	Y+1, r24	; 0x01
    123e:	02 c0       	rjmp	.+4      	; 0x1244 <EXTI_enuEnableINT+0x74>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE ;
    1240:	83 e0       	ldi	r24, 0x03	; 3
    1242:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1244:	89 81       	ldd	r24, Y+1	; 0x01
}//End of EXTI_enuEnableINT.
    1246:	0f 90       	pop	r0
    1248:	0f 90       	pop	r0
    124a:	0f 90       	pop	r0
    124c:	0f 90       	pop	r0
    124e:	cf 91       	pop	r28
    1250:	df 91       	pop	r29
    1252:	08 95       	ret

00001254 <EXTI_enuDisableINT>:
/*                                 EXTI_2 --->for interrupt_2                */
/*                                                                           */
/* Return          : Error state of type ES_t.                               */
/*.......................*****************************************************/
ES_t   EXTI_enuDisableINT(   u8 Cpy_u8EXTI_ID  )
{
    1254:	df 93       	push	r29
    1256:	cf 93       	push	r28
    1258:	00 d0       	rcall	.+0      	; 0x125a <EXTI_enuDisableINT+0x6>
    125a:	00 d0       	rcall	.+0      	; 0x125c <EXTI_enuDisableINT+0x8>
    125c:	cd b7       	in	r28, 0x3d	; 61
    125e:	de b7       	in	r29, 0x3e	; 62
    1260:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK ;
    1262:	19 82       	std	Y+1, r1	; 0x01

	if( Cpy_u8EXTI_ID < EXTI_NUM)
    1264:	8a 81       	ldd	r24, Y+2	; 0x02
    1266:	88 23       	and	r24, r24
    1268:	69 f5       	brne	.+90     	; 0x12c4 <EXTI_enuDisableINT+0x70>
	{
		switch(Cpy_u8EXTI_ID)
    126a:	8a 81       	ldd	r24, Y+2	; 0x02
    126c:	28 2f       	mov	r18, r24
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	3c 83       	std	Y+4, r19	; 0x04
    1272:	2b 83       	std	Y+3, r18	; 0x03
    1274:	8b 81       	ldd	r24, Y+3	; 0x03
    1276:	9c 81       	ldd	r25, Y+4	; 0x04
    1278:	81 30       	cpi	r24, 0x01	; 1
    127a:	91 05       	cpc	r25, r1
    127c:	89 f0       	breq	.+34     	; 0x12a0 <EXTI_enuDisableINT+0x4c>
    127e:	2b 81       	ldd	r18, Y+3	; 0x03
    1280:	3c 81       	ldd	r19, Y+4	; 0x04
    1282:	22 30       	cpi	r18, 0x02	; 2
    1284:	31 05       	cpc	r19, r1
    1286:	a1 f0       	breq	.+40     	; 0x12b0 <EXTI_enuDisableINT+0x5c>
    1288:	8b 81       	ldd	r24, Y+3	; 0x03
    128a:	9c 81       	ldd	r25, Y+4	; 0x04
    128c:	00 97       	sbiw	r24, 0x00	; 0
    128e:	b9 f4       	brne	.+46     	; 0x12be <EXTI_enuDisableINT+0x6a>
		{

		    //Disable interrupt 0 .
		case EXTI0:
			GICR &=~(EXTI_MASK_BIT<< INT0);
    1290:	ab e5       	ldi	r26, 0x5B	; 91
    1292:	b0 e0       	ldi	r27, 0x00	; 0
    1294:	eb e5       	ldi	r30, 0x5B	; 91
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	80 81       	ld	r24, Z
    129a:	8f 7b       	andi	r24, 0xBF	; 191
    129c:	8c 93       	st	X, r24
    129e:	0f c0       	rjmp	.+30     	; 0x12be <EXTI_enuDisableINT+0x6a>
			break;

			//Disable interrupt 1 .
		case EXTI1:
			GICR &=~(EXTI_MASK_BIT<< INT1);
    12a0:	ab e5       	ldi	r26, 0x5B	; 91
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	eb e5       	ldi	r30, 0x5B	; 91
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	8f 77       	andi	r24, 0x7F	; 127
    12ac:	8c 93       	st	X, r24
    12ae:	07 c0       	rjmp	.+14     	; 0x12be <EXTI_enuDisableINT+0x6a>
			break;

			//Disable interrupt 2 .
		case EXTI2:
			GICR &=~(EXTI_MASK_BIT<< INT2);
    12b0:	ab e5       	ldi	r26, 0x5B	; 91
    12b2:	b0 e0       	ldi	r27, 0x00	; 0
    12b4:	eb e5       	ldi	r30, 0x5B	; 91
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	8f 7d       	andi	r24, 0xDF	; 223
    12bc:	8c 93       	st	X, r24
			break;

		}
		Local_enuErrorState = ES_OK  ;
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	89 83       	std	Y+1, r24	; 0x01
    12c2:	02 c0       	rjmp	.+4      	; 0x12c8 <EXTI_enuDisableINT+0x74>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE ;
    12c4:	83 e0       	ldi	r24, 0x03	; 3
    12c6:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    12c8:	89 81       	ldd	r24, Y+1	; 0x01

}//End of EXTI_enuDisableINT.
    12ca:	0f 90       	pop	r0
    12cc:	0f 90       	pop	r0
    12ce:	0f 90       	pop	r0
    12d0:	0f 90       	pop	r0
    12d2:	cf 91       	pop	r28
    12d4:	df 91       	pop	r29
    12d6:	08 95       	ret

000012d8 <EXTI_enuCallBack>:
/*                                                                                                      */
/*                                                                                                      */
/* Return          : Error state of type ES_t.                                                          */
/*.......................********************************************************************************/
ES_t   EXTI_enuCallBack(volatile void (*Cpy_pfunAppFunc)(void*)  , volatile void* Cpy_pvidParameter ,  u8 Cpy_u8EXTI_ID  )
{
    12d8:	df 93       	push	r29
    12da:	cf 93       	push	r28
    12dc:	00 d0       	rcall	.+0      	; 0x12de <EXTI_enuCallBack+0x6>
    12de:	00 d0       	rcall	.+0      	; 0x12e0 <EXTI_enuCallBack+0x8>
    12e0:	00 d0       	rcall	.+0      	; 0x12e2 <EXTI_enuCallBack+0xa>
    12e2:	cd b7       	in	r28, 0x3d	; 61
    12e4:	de b7       	in	r29, 0x3e	; 62
    12e6:	9b 83       	std	Y+3, r25	; 0x03
    12e8:	8a 83       	std	Y+2, r24	; 0x02
    12ea:	7d 83       	std	Y+5, r23	; 0x05
    12ec:	6c 83       	std	Y+4, r22	; 0x04
    12ee:	4e 83       	std	Y+6, r20	; 0x06
	ES_t Local_enuErrorState =ES_NOK ;
    12f0:	19 82       	std	Y+1, r1	; 0x01

	if( (Cpy_pfunAppFunc !=NULL)&&(Cpy_u8EXTI_ID < EXTI_NUM) )
    12f2:	8a 81       	ldd	r24, Y+2	; 0x02
    12f4:	9b 81       	ldd	r25, Y+3	; 0x03
    12f6:	00 97       	sbiw	r24, 0x00	; 0
    12f8:	f1 f0       	breq	.+60     	; 0x1336 <EXTI_enuCallBack+0x5e>
    12fa:	8e 81       	ldd	r24, Y+6	; 0x06
    12fc:	88 23       	and	r24, r24
    12fe:	d9 f4       	brne	.+54     	; 0x1336 <EXTI_enuCallBack+0x5e>
	{

		EXTI_ApfunINTFunc[Cpy_u8EXTI_ID]= Cpy_pfunAppFunc ;
    1300:	8e 81       	ldd	r24, Y+6	; 0x06
    1302:	88 2f       	mov	r24, r24
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	88 0f       	add	r24, r24
    1308:	99 1f       	adc	r25, r25
    130a:	fc 01       	movw	r30, r24
    130c:	ec 58       	subi	r30, 0x8C	; 140
    130e:	fe 4f       	sbci	r31, 0xFE	; 254
    1310:	8a 81       	ldd	r24, Y+2	; 0x02
    1312:	9b 81       	ldd	r25, Y+3	; 0x03
    1314:	91 83       	std	Z+1, r25	; 0x01
    1316:	80 83       	st	Z, r24

		EXTI_ApvidGenericParameter[Cpy_u8EXTI_ID]= Cpy_pvidParameter;
    1318:	8e 81       	ldd	r24, Y+6	; 0x06
    131a:	88 2f       	mov	r24, r24
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	88 0f       	add	r24, r24
    1320:	99 1f       	adc	r25, r25
    1322:	fc 01       	movw	r30, r24
    1324:	e6 58       	subi	r30, 0x86	; 134
    1326:	fe 4f       	sbci	r31, 0xFE	; 254
    1328:	8c 81       	ldd	r24, Y+4	; 0x04
    132a:	9d 81       	ldd	r25, Y+5	; 0x05
    132c:	91 83       	std	Z+1, r25	; 0x01
    132e:	80 83       	st	Z, r24

		Local_enuErrorState =ES_OK ;
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	89 83       	std	Y+1, r24	; 0x01
    1334:	02 c0       	rjmp	.+4      	; 0x133a <EXTI_enuCallBack+0x62>

	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER ;
    1336:	82 e0       	ldi	r24, 0x02	; 2
    1338:	89 83       	std	Y+1, r24	; 0x01
	}




	return Local_enuErrorState;
    133a:	89 81       	ldd	r24, Y+1	; 0x01
}//End of EXTI_enuCallBack.
    133c:	26 96       	adiw	r28, 0x06	; 6
    133e:	0f b6       	in	r0, 0x3f	; 63
    1340:	f8 94       	cli
    1342:	de bf       	out	0x3e, r29	; 62
    1344:	0f be       	out	0x3f, r0	; 63
    1346:	cd bf       	out	0x3d, r28	; 61
    1348:	cf 91       	pop	r28
    134a:	df 91       	pop	r29
    134c:	08 95       	ret

0000134e <__vector_1>:


/**********************************************************************/
/************* Interrupt service routine for interrupt0 ***************/
ISR(VECT_INT0)
{
    134e:	1f 92       	push	r1
    1350:	0f 92       	push	r0
    1352:	0f b6       	in	r0, 0x3f	; 63
    1354:	0f 92       	push	r0
    1356:	11 24       	eor	r1, r1
    1358:	2f 93       	push	r18
    135a:	3f 93       	push	r19
    135c:	4f 93       	push	r20
    135e:	5f 93       	push	r21
    1360:	6f 93       	push	r22
    1362:	7f 93       	push	r23
    1364:	8f 93       	push	r24
    1366:	9f 93       	push	r25
    1368:	af 93       	push	r26
    136a:	bf 93       	push	r27
    136c:	ef 93       	push	r30
    136e:	ff 93       	push	r31
    1370:	df 93       	push	r29
    1372:	cf 93       	push	r28
    1374:	cd b7       	in	r28, 0x3d	; 61
    1376:	de b7       	in	r29, 0x3e	; 62

	if (  EXTI_ApfunINTFunc[EXTI0] != NULL )
    1378:	80 91 74 01 	lds	r24, 0x0174
    137c:	90 91 75 01 	lds	r25, 0x0175
    1380:	00 97       	sbiw	r24, 0x00	; 0
    1382:	49 f0       	breq	.+18     	; 0x1396 <__vector_1+0x48>
	{
		(*EXTI_ApfunINTFunc[EXTI0])(EXTI_ApvidGenericParameter[EXTI0]);
    1384:	e0 91 74 01 	lds	r30, 0x0174
    1388:	f0 91 75 01 	lds	r31, 0x0175
    138c:	80 91 7a 01 	lds	r24, 0x017A
    1390:	90 91 7b 01 	lds	r25, 0x017B
    1394:	09 95       	icall
	else
	{
		//Do nothing.
	}

}
    1396:	cf 91       	pop	r28
    1398:	df 91       	pop	r29
    139a:	ff 91       	pop	r31
    139c:	ef 91       	pop	r30
    139e:	bf 91       	pop	r27
    13a0:	af 91       	pop	r26
    13a2:	9f 91       	pop	r25
    13a4:	8f 91       	pop	r24
    13a6:	7f 91       	pop	r23
    13a8:	6f 91       	pop	r22
    13aa:	5f 91       	pop	r21
    13ac:	4f 91       	pop	r20
    13ae:	3f 91       	pop	r19
    13b0:	2f 91       	pop	r18
    13b2:	0f 90       	pop	r0
    13b4:	0f be       	out	0x3f, r0	; 63
    13b6:	0f 90       	pop	r0
    13b8:	1f 90       	pop	r1
    13ba:	18 95       	reti

000013bc <__vector_2>:

/**********************************************************************/
/************* Interrupt service routine for interrupt1 ***************/
ISR(VECT_INT1)
{
    13bc:	1f 92       	push	r1
    13be:	0f 92       	push	r0
    13c0:	0f b6       	in	r0, 0x3f	; 63
    13c2:	0f 92       	push	r0
    13c4:	11 24       	eor	r1, r1
    13c6:	2f 93       	push	r18
    13c8:	3f 93       	push	r19
    13ca:	4f 93       	push	r20
    13cc:	5f 93       	push	r21
    13ce:	6f 93       	push	r22
    13d0:	7f 93       	push	r23
    13d2:	8f 93       	push	r24
    13d4:	9f 93       	push	r25
    13d6:	af 93       	push	r26
    13d8:	bf 93       	push	r27
    13da:	ef 93       	push	r30
    13dc:	ff 93       	push	r31
    13de:	df 93       	push	r29
    13e0:	cf 93       	push	r28
    13e2:	cd b7       	in	r28, 0x3d	; 61
    13e4:	de b7       	in	r29, 0x3e	; 62
	if (  EXTI_ApfunINTFunc[EXTI1] != NULL )
    13e6:	80 91 76 01 	lds	r24, 0x0176
    13ea:	90 91 77 01 	lds	r25, 0x0177
    13ee:	00 97       	sbiw	r24, 0x00	; 0
    13f0:	49 f0       	breq	.+18     	; 0x1404 <__vector_2+0x48>
	{
		(*EXTI_ApfunINTFunc[EXTI1])(EXTI_ApvidGenericParameter[EXTI1]);
    13f2:	e0 91 76 01 	lds	r30, 0x0176
    13f6:	f0 91 77 01 	lds	r31, 0x0177
    13fa:	80 91 7c 01 	lds	r24, 0x017C
    13fe:	90 91 7d 01 	lds	r25, 0x017D
    1402:	09 95       	icall
	else
	{
		//Do nothing.
	}

}
    1404:	cf 91       	pop	r28
    1406:	df 91       	pop	r29
    1408:	ff 91       	pop	r31
    140a:	ef 91       	pop	r30
    140c:	bf 91       	pop	r27
    140e:	af 91       	pop	r26
    1410:	9f 91       	pop	r25
    1412:	8f 91       	pop	r24
    1414:	7f 91       	pop	r23
    1416:	6f 91       	pop	r22
    1418:	5f 91       	pop	r21
    141a:	4f 91       	pop	r20
    141c:	3f 91       	pop	r19
    141e:	2f 91       	pop	r18
    1420:	0f 90       	pop	r0
    1422:	0f be       	out	0x3f, r0	; 63
    1424:	0f 90       	pop	r0
    1426:	1f 90       	pop	r1
    1428:	18 95       	reti

0000142a <__vector_3>:


/**********************************************************************/
/************* Interrupt service routine for interrupt2 ***************/
ISR(VECT_INT2)
{
    142a:	1f 92       	push	r1
    142c:	0f 92       	push	r0
    142e:	0f b6       	in	r0, 0x3f	; 63
    1430:	0f 92       	push	r0
    1432:	11 24       	eor	r1, r1
    1434:	2f 93       	push	r18
    1436:	3f 93       	push	r19
    1438:	4f 93       	push	r20
    143a:	5f 93       	push	r21
    143c:	6f 93       	push	r22
    143e:	7f 93       	push	r23
    1440:	8f 93       	push	r24
    1442:	9f 93       	push	r25
    1444:	af 93       	push	r26
    1446:	bf 93       	push	r27
    1448:	ef 93       	push	r30
    144a:	ff 93       	push	r31
    144c:	df 93       	push	r29
    144e:	cf 93       	push	r28
    1450:	cd b7       	in	r28, 0x3d	; 61
    1452:	de b7       	in	r29, 0x3e	; 62

	if (  EXTI_ApfunINTFunc[EXTI2] != NULL )
    1454:	80 91 78 01 	lds	r24, 0x0178
    1458:	90 91 79 01 	lds	r25, 0x0179
    145c:	00 97       	sbiw	r24, 0x00	; 0
    145e:	49 f0       	breq	.+18     	; 0x1472 <__vector_3+0x48>
	{
		(*EXTI_ApfunINTFunc[EXTI2])(EXTI_ApvidGenericParameter[EXTI2]);
    1460:	e0 91 78 01 	lds	r30, 0x0178
    1464:	f0 91 79 01 	lds	r31, 0x0179
    1468:	80 91 7e 01 	lds	r24, 0x017E
    146c:	90 91 7f 01 	lds	r25, 0x017F
    1470:	09 95       	icall
	else
	{
		//Do nothing.
	}

}
    1472:	cf 91       	pop	r28
    1474:	df 91       	pop	r29
    1476:	ff 91       	pop	r31
    1478:	ef 91       	pop	r30
    147a:	bf 91       	pop	r27
    147c:	af 91       	pop	r26
    147e:	9f 91       	pop	r25
    1480:	8f 91       	pop	r24
    1482:	7f 91       	pop	r23
    1484:	6f 91       	pop	r22
    1486:	5f 91       	pop	r21
    1488:	4f 91       	pop	r20
    148a:	3f 91       	pop	r19
    148c:	2f 91       	pop	r18
    148e:	0f 90       	pop	r0
    1490:	0f be       	out	0x3f, r0	; 63
    1492:	0f 90       	pop	r0
    1494:	1f 90       	pop	r1
    1496:	18 95       	reti

00001498 <DIO_enuSetPortDirection>:
/*                 : Arg.2: Copy_u8Dir:                                     */
/*                                        DIO_INPTU_PIN  ,   DIO_OUTPUT_PIN */
/* Return          : ERROR_STATE eum.                                       */
/****************************************************************************/
ES_t DIO_enuSetPortDirection(u8 Copy_u8PortID, u8 Copy_u8Dir)
{
    1498:	df 93       	push	r29
    149a:	cf 93       	push	r28
    149c:	00 d0       	rcall	.+0      	; 0x149e <DIO_enuSetPortDirection+0x6>
    149e:	00 d0       	rcall	.+0      	; 0x14a0 <DIO_enuSetPortDirection+0x8>
    14a0:	0f 92       	push	r0
    14a2:	cd b7       	in	r28, 0x3d	; 61
    14a4:	de b7       	in	r29, 0x3e	; 62
    14a6:	8a 83       	std	Y+2, r24	; 0x02
    14a8:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuerrorState = ES_NOK ;
    14aa:	19 82       	std	Y+1, r1	; 0x01

	if( (Copy_u8PortID <= DIO_PORTD )&& (Copy_u8Dir <= OUTPUT_PORT)  )
    14ac:	8a 81       	ldd	r24, Y+2	; 0x02
    14ae:	84 30       	cpi	r24, 0x04	; 4
    14b0:	a8 f5       	brcc	.+106    	; 0x151c <DIO_enuSetPortDirection+0x84>
	{
		switch( Copy_u8PortID )
    14b2:	8a 81       	ldd	r24, Y+2	; 0x02
    14b4:	28 2f       	mov	r18, r24
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	3d 83       	std	Y+5, r19	; 0x05
    14ba:	2c 83       	std	Y+4, r18	; 0x04
    14bc:	8c 81       	ldd	r24, Y+4	; 0x04
    14be:	9d 81       	ldd	r25, Y+5	; 0x05
    14c0:	81 30       	cpi	r24, 0x01	; 1
    14c2:	91 05       	cpc	r25, r1
    14c4:	d1 f0       	breq	.+52     	; 0x14fa <DIO_enuSetPortDirection+0x62>
    14c6:	2c 81       	ldd	r18, Y+4	; 0x04
    14c8:	3d 81       	ldd	r19, Y+5	; 0x05
    14ca:	22 30       	cpi	r18, 0x02	; 2
    14cc:	31 05       	cpc	r19, r1
    14ce:	2c f4       	brge	.+10     	; 0x14da <DIO_enuSetPortDirection+0x42>
    14d0:	8c 81       	ldd	r24, Y+4	; 0x04
    14d2:	9d 81       	ldd	r25, Y+5	; 0x05
    14d4:	00 97       	sbiw	r24, 0x00	; 0
    14d6:	61 f0       	breq	.+24     	; 0x14f0 <DIO_enuSetPortDirection+0x58>
    14d8:	1e c0       	rjmp	.+60     	; 0x1516 <DIO_enuSetPortDirection+0x7e>
    14da:	2c 81       	ldd	r18, Y+4	; 0x04
    14dc:	3d 81       	ldd	r19, Y+5	; 0x05
    14de:	22 30       	cpi	r18, 0x02	; 2
    14e0:	31 05       	cpc	r19, r1
    14e2:	81 f0       	breq	.+32     	; 0x1504 <DIO_enuSetPortDirection+0x6c>
    14e4:	8c 81       	ldd	r24, Y+4	; 0x04
    14e6:	9d 81       	ldd	r25, Y+5	; 0x05
    14e8:	83 30       	cpi	r24, 0x03	; 3
    14ea:	91 05       	cpc	r25, r1
    14ec:	81 f0       	breq	.+32     	; 0x150e <DIO_enuSetPortDirection+0x76>
    14ee:	13 c0       	rjmp	.+38     	; 0x1516 <DIO_enuSetPortDirection+0x7e>
		{
		case DIO_PORTA :
			DDRA = Copy_u8Dir;
    14f0:	ea e3       	ldi	r30, 0x3A	; 58
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	8b 81       	ldd	r24, Y+3	; 0x03
    14f6:	80 83       	st	Z, r24
    14f8:	0e c0       	rjmp	.+28     	; 0x1516 <DIO_enuSetPortDirection+0x7e>
			break;

		case DIO_PORTB :
			DDRB = Copy_u8Dir;
    14fa:	e7 e3       	ldi	r30, 0x37	; 55
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1500:	80 83       	st	Z, r24
    1502:	09 c0       	rjmp	.+18     	; 0x1516 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTC :
			DDRC = Copy_u8Dir;
    1504:	e4 e3       	ldi	r30, 0x34	; 52
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	8b 81       	ldd	r24, Y+3	; 0x03
    150a:	80 83       	st	Z, r24
    150c:	04 c0       	rjmp	.+8      	; 0x1516 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTD :
			DDRD = Copy_u8Dir;
    150e:	e1 e3       	ldi	r30, 0x31	; 49
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	8b 81       	ldd	r24, Y+3	; 0x03
    1514:	80 83       	st	Z, r24
			break;
		}
		Local_enuerrorState = ES_OK;
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	89 83       	std	Y+1, r24	; 0x01
    151a:	02 c0       	rjmp	.+4      	; 0x1520 <DIO_enuSetPortDirection+0x88>

	}
	else
	{
		Local_enuerrorState = ES_OUT_OF_RANGE;
    151c:	83 e0       	ldi	r24, 0x03	; 3
    151e:	89 83       	std	Y+1, r24	; 0x01

	}


	return Local_enuerrorState  ;
    1520:	89 81       	ldd	r24, Y+1	; 0x01

}//End of DIO_enuSetPortDirection().
    1522:	0f 90       	pop	r0
    1524:	0f 90       	pop	r0
    1526:	0f 90       	pop	r0
    1528:	0f 90       	pop	r0
    152a:	0f 90       	pop	r0
    152c:	cf 91       	pop	r28
    152e:	df 91       	pop	r29
    1530:	08 95       	ret

00001532 <DIO_enuSetPortValue>:
/*                 : Arg.2: Copy_u8Val:                                     */
/*                                        DIO_INPTU_PIN  ,  DIO_OUTPUT_PIN  */
/* Return          : ERROR_STATE eum.                                       */
/****************************************************************************/
ES_t DIO_enuSetPortValue(u8 Copy_u8PortID, u8 Copy_u8Val)
{
    1532:	df 93       	push	r29
    1534:	cf 93       	push	r28
    1536:	00 d0       	rcall	.+0      	; 0x1538 <DIO_enuSetPortValue+0x6>
    1538:	00 d0       	rcall	.+0      	; 0x153a <DIO_enuSetPortValue+0x8>
    153a:	0f 92       	push	r0
    153c:	cd b7       	in	r28, 0x3d	; 61
    153e:	de b7       	in	r29, 0x3e	; 62
    1540:	8a 83       	std	Y+2, r24	; 0x02
    1542:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuerrorState = ES_NOK ;
    1544:	19 82       	std	Y+1, r1	; 0x01

	if( Copy_u8PortID <= DIO_PORTD )
    1546:	8a 81       	ldd	r24, Y+2	; 0x02
    1548:	84 30       	cpi	r24, 0x04	; 4
    154a:	a8 f5       	brcc	.+106    	; 0x15b6 <DIO_enuSetPortValue+0x84>
	{
		switch( Copy_u8PortID )
    154c:	8a 81       	ldd	r24, Y+2	; 0x02
    154e:	28 2f       	mov	r18, r24
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	3d 83       	std	Y+5, r19	; 0x05
    1554:	2c 83       	std	Y+4, r18	; 0x04
    1556:	8c 81       	ldd	r24, Y+4	; 0x04
    1558:	9d 81       	ldd	r25, Y+5	; 0x05
    155a:	81 30       	cpi	r24, 0x01	; 1
    155c:	91 05       	cpc	r25, r1
    155e:	d1 f0       	breq	.+52     	; 0x1594 <DIO_enuSetPortValue+0x62>
    1560:	2c 81       	ldd	r18, Y+4	; 0x04
    1562:	3d 81       	ldd	r19, Y+5	; 0x05
    1564:	22 30       	cpi	r18, 0x02	; 2
    1566:	31 05       	cpc	r19, r1
    1568:	2c f4       	brge	.+10     	; 0x1574 <DIO_enuSetPortValue+0x42>
    156a:	8c 81       	ldd	r24, Y+4	; 0x04
    156c:	9d 81       	ldd	r25, Y+5	; 0x05
    156e:	00 97       	sbiw	r24, 0x00	; 0
    1570:	61 f0       	breq	.+24     	; 0x158a <DIO_enuSetPortValue+0x58>
    1572:	1e c0       	rjmp	.+60     	; 0x15b0 <DIO_enuSetPortValue+0x7e>
    1574:	2c 81       	ldd	r18, Y+4	; 0x04
    1576:	3d 81       	ldd	r19, Y+5	; 0x05
    1578:	22 30       	cpi	r18, 0x02	; 2
    157a:	31 05       	cpc	r19, r1
    157c:	81 f0       	breq	.+32     	; 0x159e <DIO_enuSetPortValue+0x6c>
    157e:	8c 81       	ldd	r24, Y+4	; 0x04
    1580:	9d 81       	ldd	r25, Y+5	; 0x05
    1582:	83 30       	cpi	r24, 0x03	; 3
    1584:	91 05       	cpc	r25, r1
    1586:	81 f0       	breq	.+32     	; 0x15a8 <DIO_enuSetPortValue+0x76>
    1588:	13 c0       	rjmp	.+38     	; 0x15b0 <DIO_enuSetPortValue+0x7e>
		{
		case DIO_PORTA :
			PORTA = Copy_u8Val;
    158a:	eb e3       	ldi	r30, 0x3B	; 59
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	8b 81       	ldd	r24, Y+3	; 0x03
    1590:	80 83       	st	Z, r24
    1592:	0e c0       	rjmp	.+28     	; 0x15b0 <DIO_enuSetPortValue+0x7e>
			break;

		case DIO_PORTB :
			PORTB = Copy_u8Val;
    1594:	e8 e3       	ldi	r30, 0x38	; 56
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	8b 81       	ldd	r24, Y+3	; 0x03
    159a:	80 83       	st	Z, r24
    159c:	09 c0       	rjmp	.+18     	; 0x15b0 <DIO_enuSetPortValue+0x7e>
			break;

		case DIO_PORTC :
			PORTC = Copy_u8Val;
    159e:	e5 e3       	ldi	r30, 0x35	; 53
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	8b 81       	ldd	r24, Y+3	; 0x03
    15a4:	80 83       	st	Z, r24
    15a6:	04 c0       	rjmp	.+8      	; 0x15b0 <DIO_enuSetPortValue+0x7e>
			break;

		case DIO_PORTD :
			PORTD = Copy_u8Val;
    15a8:	e2 e3       	ldi	r30, 0x32	; 50
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	8b 81       	ldd	r24, Y+3	; 0x03
    15ae:	80 83       	st	Z, r24
			break;
		}

		Local_enuerrorState = ES_OK;
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	89 83       	std	Y+1, r24	; 0x01
    15b4:	02 c0       	rjmp	.+4      	; 0x15ba <DIO_enuSetPortValue+0x88>

	}
	else
	{
		Local_enuerrorState = ES_OUT_OF_RANGE;
    15b6:	83 e0       	ldi	r24, 0x03	; 3
    15b8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuerrorState  ;
    15ba:	89 81       	ldd	r24, Y+1	; 0x01
}//End of DIO_enuSetPortValue().
    15bc:	0f 90       	pop	r0
    15be:	0f 90       	pop	r0
    15c0:	0f 90       	pop	r0
    15c2:	0f 90       	pop	r0
    15c4:	0f 90       	pop	r0
    15c6:	cf 91       	pop	r28
    15c8:	df 91       	pop	r29
    15ca:	08 95       	ret

000015cc <DIO_enuToggelPort>:
/*                                        DIO_PORTA      ,   DIO_PORTA      */
/*                                        DIO_PORTA      ,   DIO_PORTA      */
/* Return          : ERROR_STATE eum.                                       */
/****************************************************************************/
ES_t DIO_enuToggelPort(u8  Copy_u8PortID )
{
    15cc:	df 93       	push	r29
    15ce:	cf 93       	push	r28
    15d0:	00 d0       	rcall	.+0      	; 0x15d2 <DIO_enuToggelPort+0x6>
    15d2:	00 d0       	rcall	.+0      	; 0x15d4 <DIO_enuToggelPort+0x8>
    15d4:	cd b7       	in	r28, 0x3d	; 61
    15d6:	de b7       	in	r29, 0x3e	; 62
    15d8:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuerrorState = ES_NOK ;
    15da:	19 82       	std	Y+1, r1	; 0x01

	if( Copy_u8PortID <= DIO_PORTD )
    15dc:	8a 81       	ldd	r24, Y+2	; 0x02
    15de:	84 30       	cpi	r24, 0x04	; 4
    15e0:	08 f0       	brcs	.+2      	; 0x15e4 <DIO_enuToggelPort+0x18>
    15e2:	41 c0       	rjmp	.+130    	; 0x1666 <DIO_enuToggelPort+0x9a>
	{
		switch( Copy_u8PortID )
    15e4:	8a 81       	ldd	r24, Y+2	; 0x02
    15e6:	28 2f       	mov	r18, r24
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	3c 83       	std	Y+4, r19	; 0x04
    15ec:	2b 83       	std	Y+3, r18	; 0x03
    15ee:	8b 81       	ldd	r24, Y+3	; 0x03
    15f0:	9c 81       	ldd	r25, Y+4	; 0x04
    15f2:	81 30       	cpi	r24, 0x01	; 1
    15f4:	91 05       	cpc	r25, r1
    15f6:	e9 f0       	breq	.+58     	; 0x1632 <DIO_enuToggelPort+0x66>
    15f8:	2b 81       	ldd	r18, Y+3	; 0x03
    15fa:	3c 81       	ldd	r19, Y+4	; 0x04
    15fc:	22 30       	cpi	r18, 0x02	; 2
    15fe:	31 05       	cpc	r19, r1
    1600:	2c f4       	brge	.+10     	; 0x160c <DIO_enuToggelPort+0x40>
    1602:	8b 81       	ldd	r24, Y+3	; 0x03
    1604:	9c 81       	ldd	r25, Y+4	; 0x04
    1606:	00 97       	sbiw	r24, 0x00	; 0
    1608:	61 f0       	breq	.+24     	; 0x1622 <DIO_enuToggelPort+0x56>
    160a:	2a c0       	rjmp	.+84     	; 0x1660 <DIO_enuToggelPort+0x94>
    160c:	2b 81       	ldd	r18, Y+3	; 0x03
    160e:	3c 81       	ldd	r19, Y+4	; 0x04
    1610:	22 30       	cpi	r18, 0x02	; 2
    1612:	31 05       	cpc	r19, r1
    1614:	b1 f0       	breq	.+44     	; 0x1642 <DIO_enuToggelPort+0x76>
    1616:	8b 81       	ldd	r24, Y+3	; 0x03
    1618:	9c 81       	ldd	r25, Y+4	; 0x04
    161a:	83 30       	cpi	r24, 0x03	; 3
    161c:	91 05       	cpc	r25, r1
    161e:	c9 f0       	breq	.+50     	; 0x1652 <DIO_enuToggelPort+0x86>
    1620:	1f c0       	rjmp	.+62     	; 0x1660 <DIO_enuToggelPort+0x94>
		{
		case DIO_PORTA :
			PORTA = ~PORTA;
    1622:	ab e3       	ldi	r26, 0x3B	; 59
    1624:	b0 e0       	ldi	r27, 0x00	; 0
    1626:	eb e3       	ldi	r30, 0x3B	; 59
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	80 81       	ld	r24, Z
    162c:	80 95       	com	r24
    162e:	8c 93       	st	X, r24
    1630:	17 c0       	rjmp	.+46     	; 0x1660 <DIO_enuToggelPort+0x94>
			break;

		case DIO_PORTB :
			PORTB = ~PORTB;
    1632:	a8 e3       	ldi	r26, 0x38	; 56
    1634:	b0 e0       	ldi	r27, 0x00	; 0
    1636:	e8 e3       	ldi	r30, 0x38	; 56
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	80 81       	ld	r24, Z
    163c:	80 95       	com	r24
    163e:	8c 93       	st	X, r24
    1640:	0f c0       	rjmp	.+30     	; 0x1660 <DIO_enuToggelPort+0x94>
			break;

		case DIO_PORTC :
			PORTC = ~PORTC;
    1642:	a5 e3       	ldi	r26, 0x35	; 53
    1644:	b0 e0       	ldi	r27, 0x00	; 0
    1646:	e5 e3       	ldi	r30, 0x35	; 53
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	80 95       	com	r24
    164e:	8c 93       	st	X, r24
    1650:	07 c0       	rjmp	.+14     	; 0x1660 <DIO_enuToggelPort+0x94>
			break;

		case DIO_PORTD :
			PORTD = ~PORTD ;
    1652:	a2 e3       	ldi	r26, 0x32	; 50
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	e2 e3       	ldi	r30, 0x32	; 50
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	80 95       	com	r24
    165e:	8c 93       	st	X, r24
			break;
		}

		Local_enuerrorState = ES_OK;
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	89 83       	std	Y+1, r24	; 0x01
    1664:	02 c0       	rjmp	.+4      	; 0x166a <DIO_enuToggelPort+0x9e>

	}
	else
	{
		Local_enuerrorState = ES_OUT_OF_RANGE;
    1666:	83 e0       	ldi	r24, 0x03	; 3
    1668:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuerrorState  ;
    166a:	89 81       	ldd	r24, Y+1	; 0x01
}//End of DIO_enuToggelPort().
    166c:	0f 90       	pop	r0
    166e:	0f 90       	pop	r0
    1670:	0f 90       	pop	r0
    1672:	0f 90       	pop	r0
    1674:	cf 91       	pop	r28
    1676:	df 91       	pop	r29
    1678:	08 95       	ret

0000167a <DIO_enuGetPortVlaue>:
/*                                                                          */
/*                 : Arg.2: Address of u8 variable.                         */
/* Return          : ERROR_STATE eum.                                       */
/****************************************************************************/
ES_t DIO_enuGetPortVlaue(u8 Copy_u8PortID, u8* Copy_pu8PortVal)
{
    167a:	df 93       	push	r29
    167c:	cf 93       	push	r28
    167e:	00 d0       	rcall	.+0      	; 0x1680 <DIO_enuGetPortVlaue+0x6>
    1680:	00 d0       	rcall	.+0      	; 0x1682 <DIO_enuGetPortVlaue+0x8>
    1682:	00 d0       	rcall	.+0      	; 0x1684 <DIO_enuGetPortVlaue+0xa>
    1684:	cd b7       	in	r28, 0x3d	; 61
    1686:	de b7       	in	r29, 0x3e	; 62
    1688:	8a 83       	std	Y+2, r24	; 0x02
    168a:	7c 83       	std	Y+4, r23	; 0x04
    168c:	6b 83       	std	Y+3, r22	; 0x03
	//Local Variable to
	ES_t Local_enuerrorState = ES_NOK ;
    168e:	19 82       	std	Y+1, r1	; 0x01

	// Check to ensure that the passed address is not equal Null.
	if( Copy_pu8PortVal != NULL )
    1690:	8b 81       	ldd	r24, Y+3	; 0x03
    1692:	9c 81       	ldd	r25, Y+4	; 0x04
    1694:	00 97       	sbiw	r24, 0x00	; 0
    1696:	09 f4       	brne	.+2      	; 0x169a <DIO_enuGetPortVlaue+0x20>
    1698:	43 c0       	rjmp	.+134    	; 0x1720 <DIO_enuGetPortVlaue+0xa6>
	{
		// Check to ensure that the passed PortID is in range.
		if( Copy_u8PortID <= DIO_PORTD )
    169a:	8a 81       	ldd	r24, Y+2	; 0x02
    169c:	84 30       	cpi	r24, 0x04	; 4
    169e:	e8 f5       	brcc	.+122    	; 0x171a <DIO_enuGetPortVlaue+0xa0>
		{

			/**********************************************************
			 * Switching for the suitable case .
			 **********************************************************/
			switch( Copy_u8PortID )
    16a0:	8a 81       	ldd	r24, Y+2	; 0x02
    16a2:	28 2f       	mov	r18, r24
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	3e 83       	std	Y+6, r19	; 0x06
    16a8:	2d 83       	std	Y+5, r18	; 0x05
    16aa:	8d 81       	ldd	r24, Y+5	; 0x05
    16ac:	9e 81       	ldd	r25, Y+6	; 0x06
    16ae:	81 30       	cpi	r24, 0x01	; 1
    16b0:	91 05       	cpc	r25, r1
    16b2:	e1 f0       	breq	.+56     	; 0x16ec <DIO_enuGetPortVlaue+0x72>
    16b4:	2d 81       	ldd	r18, Y+5	; 0x05
    16b6:	3e 81       	ldd	r19, Y+6	; 0x06
    16b8:	22 30       	cpi	r18, 0x02	; 2
    16ba:	31 05       	cpc	r19, r1
    16bc:	2c f4       	brge	.+10     	; 0x16c8 <DIO_enuGetPortVlaue+0x4e>
    16be:	8d 81       	ldd	r24, Y+5	; 0x05
    16c0:	9e 81       	ldd	r25, Y+6	; 0x06
    16c2:	00 97       	sbiw	r24, 0x00	; 0
    16c4:	61 f0       	breq	.+24     	; 0x16de <DIO_enuGetPortVlaue+0x64>
    16c6:	26 c0       	rjmp	.+76     	; 0x1714 <DIO_enuGetPortVlaue+0x9a>
    16c8:	2d 81       	ldd	r18, Y+5	; 0x05
    16ca:	3e 81       	ldd	r19, Y+6	; 0x06
    16cc:	22 30       	cpi	r18, 0x02	; 2
    16ce:	31 05       	cpc	r19, r1
    16d0:	a1 f0       	breq	.+40     	; 0x16fa <DIO_enuGetPortVlaue+0x80>
    16d2:	8d 81       	ldd	r24, Y+5	; 0x05
    16d4:	9e 81       	ldd	r25, Y+6	; 0x06
    16d6:	83 30       	cpi	r24, 0x03	; 3
    16d8:	91 05       	cpc	r25, r1
    16da:	b1 f0       	breq	.+44     	; 0x1708 <DIO_enuGetPortVlaue+0x8e>
    16dc:	1b c0       	rjmp	.+54     	; 0x1714 <DIO_enuGetPortVlaue+0x9a>
			{
			case DIO_PORTA :
				*Copy_pu8PortVal = PINA;
    16de:	e9 e3       	ldi	r30, 0x39	; 57
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	80 81       	ld	r24, Z
    16e4:	eb 81       	ldd	r30, Y+3	; 0x03
    16e6:	fc 81       	ldd	r31, Y+4	; 0x04
    16e8:	80 83       	st	Z, r24
    16ea:	14 c0       	rjmp	.+40     	; 0x1714 <DIO_enuGetPortVlaue+0x9a>
				break;

			case DIO_PORTB :
				*Copy_pu8PortVal = PINB;
    16ec:	e6 e3       	ldi	r30, 0x36	; 54
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	80 81       	ld	r24, Z
    16f2:	eb 81       	ldd	r30, Y+3	; 0x03
    16f4:	fc 81       	ldd	r31, Y+4	; 0x04
    16f6:	80 83       	st	Z, r24
    16f8:	0d c0       	rjmp	.+26     	; 0x1714 <DIO_enuGetPortVlaue+0x9a>
				break;

			case DIO_PORTC :
				*Copy_pu8PortVal = PINC;
    16fa:	e3 e3       	ldi	r30, 0x33	; 51
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	80 81       	ld	r24, Z
    1700:	eb 81       	ldd	r30, Y+3	; 0x03
    1702:	fc 81       	ldd	r31, Y+4	; 0x04
    1704:	80 83       	st	Z, r24
    1706:	06 c0       	rjmp	.+12     	; 0x1714 <DIO_enuGetPortVlaue+0x9a>
				break;

			case DIO_PORTD :
				*Copy_pu8PortVal = PIND ;
    1708:	e0 e3       	ldi	r30, 0x30	; 48
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	eb 81       	ldd	r30, Y+3	; 0x03
    1710:	fc 81       	ldd	r31, Y+4	; 0x04
    1712:	80 83       	st	Z, r24
				break;
			}

			Local_enuerrorState = ES_OK;
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	89 83       	std	Y+1, r24	; 0x01
    1718:	05 c0       	rjmp	.+10     	; 0x1724 <DIO_enuGetPortVlaue+0xaa>
		else
		{
			/**********************************************************
			 * Handle Out Of Range case.
			 **********************************************************/
			Local_enuerrorState = ES_OUT_OF_RANGE;
    171a:	83 e0       	ldi	r24, 0x03	; 3
    171c:	89 83       	std	Y+1, r24	; 0x01
    171e:	02 c0       	rjmp	.+4      	; 0x1724 <DIO_enuGetPortVlaue+0xaa>
	else
	{
		/**********************************************************
		 * Handle null pointer case.
		 **********************************************************/
		Local_enuerrorState = ES_NULL_POINTER;
    1720:	82 e0       	ldi	r24, 0x02	; 2
    1722:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuerrorState  ;
    1724:	89 81       	ldd	r24, Y+1	; 0x01

}//End of DIO_enuGetPortVlaue().
    1726:	26 96       	adiw	r28, 0x06	; 6
    1728:	0f b6       	in	r0, 0x3f	; 63
    172a:	f8 94       	cli
    172c:	de bf       	out	0x3e, r29	; 62
    172e:	0f be       	out	0x3f, r0	; 63
    1730:	cd bf       	out	0x3d, r28	; 61
    1732:	cf 91       	pop	r28
    1734:	df 91       	pop	r29
    1736:	08 95       	ret

00001738 <DIO_enuSetPinDirection>:
/*                 : Arg.3: Copy_u8Dir.                                     */
/*                                       DIO_INPTU_PIN   ,   DIO_OUTPUT_PIN */
/* Return          : ERROR_STATE eum.                                       */
/****************************************************************************/
ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID, u8 Copy_u8PinID , u8 Copy_u8Dir)
{
    1738:	df 93       	push	r29
    173a:	cf 93       	push	r28
    173c:	00 d0       	rcall	.+0      	; 0x173e <DIO_enuSetPinDirection+0x6>
    173e:	00 d0       	rcall	.+0      	; 0x1740 <DIO_enuSetPinDirection+0x8>
    1740:	00 d0       	rcall	.+0      	; 0x1742 <DIO_enuSetPinDirection+0xa>
    1742:	cd b7       	in	r28, 0x3d	; 61
    1744:	de b7       	in	r29, 0x3e	; 62
    1746:	8a 83       	std	Y+2, r24	; 0x02
    1748:	6b 83       	std	Y+3, r22	; 0x03
    174a:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuerrorState = ES_NOK ;
    174c:	19 82       	std	Y+1, r1	; 0x01

	if( (Copy_u8PortID <= DIO_PORTD) && (Copy_u8PinID <= DIO_PIN7) &&( Copy_u8Dir<= OUTPUT_PIN))
    174e:	8a 81       	ldd	r24, Y+2	; 0x02
    1750:	84 30       	cpi	r24, 0x04	; 4
    1752:	08 f0       	brcs	.+2      	; 0x1756 <DIO_enuSetPinDirection+0x1e>
    1754:	dc c0       	rjmp	.+440    	; 0x190e <DIO_enuSetPinDirection+0x1d6>
    1756:	8b 81       	ldd	r24, Y+3	; 0x03
    1758:	88 30       	cpi	r24, 0x08	; 8
    175a:	08 f0       	brcs	.+2      	; 0x175e <DIO_enuSetPinDirection+0x26>
    175c:	d8 c0       	rjmp	.+432    	; 0x190e <DIO_enuSetPinDirection+0x1d6>
    175e:	8c 81       	ldd	r24, Y+4	; 0x04
    1760:	82 30       	cpi	r24, 0x02	; 2
    1762:	08 f0       	brcs	.+2      	; 0x1766 <DIO_enuSetPinDirection+0x2e>
    1764:	d4 c0       	rjmp	.+424    	; 0x190e <DIO_enuSetPinDirection+0x1d6>
	{

		/**********************************************************
		 * Switching for the suitable case .
		 **********************************************************/
		switch( Copy_u8PortID )
    1766:	8a 81       	ldd	r24, Y+2	; 0x02
    1768:	28 2f       	mov	r18, r24
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	3e 83       	std	Y+6, r19	; 0x06
    176e:	2d 83       	std	Y+5, r18	; 0x05
    1770:	8d 81       	ldd	r24, Y+5	; 0x05
    1772:	9e 81       	ldd	r25, Y+6	; 0x06
    1774:	81 30       	cpi	r24, 0x01	; 1
    1776:	91 05       	cpc	r25, r1
    1778:	09 f4       	brne	.+2      	; 0x177c <DIO_enuSetPinDirection+0x44>
    177a:	43 c0       	rjmp	.+134    	; 0x1802 <DIO_enuSetPinDirection+0xca>
    177c:	2d 81       	ldd	r18, Y+5	; 0x05
    177e:	3e 81       	ldd	r19, Y+6	; 0x06
    1780:	22 30       	cpi	r18, 0x02	; 2
    1782:	31 05       	cpc	r19, r1
    1784:	2c f4       	brge	.+10     	; 0x1790 <DIO_enuSetPinDirection+0x58>
    1786:	8d 81       	ldd	r24, Y+5	; 0x05
    1788:	9e 81       	ldd	r25, Y+6	; 0x06
    178a:	00 97       	sbiw	r24, 0x00	; 0
    178c:	71 f0       	breq	.+28     	; 0x17aa <DIO_enuSetPinDirection+0x72>
    178e:	bc c0       	rjmp	.+376    	; 0x1908 <DIO_enuSetPinDirection+0x1d0>
    1790:	2d 81       	ldd	r18, Y+5	; 0x05
    1792:	3e 81       	ldd	r19, Y+6	; 0x06
    1794:	22 30       	cpi	r18, 0x02	; 2
    1796:	31 05       	cpc	r19, r1
    1798:	09 f4       	brne	.+2      	; 0x179c <DIO_enuSetPinDirection+0x64>
    179a:	5f c0       	rjmp	.+190    	; 0x185a <DIO_enuSetPinDirection+0x122>
    179c:	8d 81       	ldd	r24, Y+5	; 0x05
    179e:	9e 81       	ldd	r25, Y+6	; 0x06
    17a0:	83 30       	cpi	r24, 0x03	; 3
    17a2:	91 05       	cpc	r25, r1
    17a4:	09 f4       	brne	.+2      	; 0x17a8 <DIO_enuSetPinDirection+0x70>
    17a6:	85 c0       	rjmp	.+266    	; 0x18b2 <DIO_enuSetPinDirection+0x17a>
    17a8:	af c0       	rjmp	.+350    	; 0x1908 <DIO_enuSetPinDirection+0x1d0>
		{
		case DIO_PORTA :
			if( Copy_u8Dir == INPTU_PIN)
    17aa:	8c 81       	ldd	r24, Y+4	; 0x04
    17ac:	88 23       	and	r24, r24
    17ae:	a9 f4       	brne	.+42     	; 0x17da <DIO_enuSetPinDirection+0xa2>
			{
				DDRA &=~(DIO_MASK_BIT<<Copy_u8PinID);
    17b0:	aa e3       	ldi	r26, 0x3A	; 58
    17b2:	b0 e0       	ldi	r27, 0x00	; 0
    17b4:	ea e3       	ldi	r30, 0x3A	; 58
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	80 81       	ld	r24, Z
    17ba:	48 2f       	mov	r20, r24
    17bc:	8b 81       	ldd	r24, Y+3	; 0x03
    17be:	28 2f       	mov	r18, r24
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	02 2e       	mov	r0, r18
    17c8:	02 c0       	rjmp	.+4      	; 0x17ce <DIO_enuSetPinDirection+0x96>
    17ca:	88 0f       	add	r24, r24
    17cc:	99 1f       	adc	r25, r25
    17ce:	0a 94       	dec	r0
    17d0:	e2 f7       	brpl	.-8      	; 0x17ca <DIO_enuSetPinDirection+0x92>
    17d2:	80 95       	com	r24
    17d4:	84 23       	and	r24, r20
    17d6:	8c 93       	st	X, r24
    17d8:	97 c0       	rjmp	.+302    	; 0x1908 <DIO_enuSetPinDirection+0x1d0>
			}
			else
			{
				DDRA |=(DIO_MASK_BIT<<Copy_u8PinID);
    17da:	aa e3       	ldi	r26, 0x3A	; 58
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	ea e3       	ldi	r30, 0x3A	; 58
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	80 81       	ld	r24, Z
    17e4:	48 2f       	mov	r20, r24
    17e6:	8b 81       	ldd	r24, Y+3	; 0x03
    17e8:	28 2f       	mov	r18, r24
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	02 2e       	mov	r0, r18
    17f2:	02 c0       	rjmp	.+4      	; 0x17f8 <DIO_enuSetPinDirection+0xc0>
    17f4:	88 0f       	add	r24, r24
    17f6:	99 1f       	adc	r25, r25
    17f8:	0a 94       	dec	r0
    17fa:	e2 f7       	brpl	.-8      	; 0x17f4 <DIO_enuSetPinDirection+0xbc>
    17fc:	84 2b       	or	r24, r20
    17fe:	8c 93       	st	X, r24
    1800:	83 c0       	rjmp	.+262    	; 0x1908 <DIO_enuSetPinDirection+0x1d0>
			}

			break;

		case DIO_PORTB :
			if( Copy_u8Dir == INPTU_PIN)
    1802:	8c 81       	ldd	r24, Y+4	; 0x04
    1804:	88 23       	and	r24, r24
    1806:	a9 f4       	brne	.+42     	; 0x1832 <DIO_enuSetPinDirection+0xfa>
			{
				DDRB &=~(DIO_MASK_BIT<<Copy_u8PinID);
    1808:	a7 e3       	ldi	r26, 0x37	; 55
    180a:	b0 e0       	ldi	r27, 0x00	; 0
    180c:	e7 e3       	ldi	r30, 0x37	; 55
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	80 81       	ld	r24, Z
    1812:	48 2f       	mov	r20, r24
    1814:	8b 81       	ldd	r24, Y+3	; 0x03
    1816:	28 2f       	mov	r18, r24
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	81 e0       	ldi	r24, 0x01	; 1
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	02 2e       	mov	r0, r18
    1820:	02 c0       	rjmp	.+4      	; 0x1826 <DIO_enuSetPinDirection+0xee>
    1822:	88 0f       	add	r24, r24
    1824:	99 1f       	adc	r25, r25
    1826:	0a 94       	dec	r0
    1828:	e2 f7       	brpl	.-8      	; 0x1822 <DIO_enuSetPinDirection+0xea>
    182a:	80 95       	com	r24
    182c:	84 23       	and	r24, r20
    182e:	8c 93       	st	X, r24
    1830:	6b c0       	rjmp	.+214    	; 0x1908 <DIO_enuSetPinDirection+0x1d0>
			}
			else
			{
				DDRB |=(DIO_MASK_BIT<<Copy_u8PinID);
    1832:	a7 e3       	ldi	r26, 0x37	; 55
    1834:	b0 e0       	ldi	r27, 0x00	; 0
    1836:	e7 e3       	ldi	r30, 0x37	; 55
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	80 81       	ld	r24, Z
    183c:	48 2f       	mov	r20, r24
    183e:	8b 81       	ldd	r24, Y+3	; 0x03
    1840:	28 2f       	mov	r18, r24
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	81 e0       	ldi	r24, 0x01	; 1
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	02 2e       	mov	r0, r18
    184a:	02 c0       	rjmp	.+4      	; 0x1850 <DIO_enuSetPinDirection+0x118>
    184c:	88 0f       	add	r24, r24
    184e:	99 1f       	adc	r25, r25
    1850:	0a 94       	dec	r0
    1852:	e2 f7       	brpl	.-8      	; 0x184c <DIO_enuSetPinDirection+0x114>
    1854:	84 2b       	or	r24, r20
    1856:	8c 93       	st	X, r24
    1858:	57 c0       	rjmp	.+174    	; 0x1908 <DIO_enuSetPinDirection+0x1d0>
			}
			break;

		case DIO_PORTC :

			if( Copy_u8Dir == INPTU_PIN)
    185a:	8c 81       	ldd	r24, Y+4	; 0x04
    185c:	88 23       	and	r24, r24
    185e:	a9 f4       	brne	.+42     	; 0x188a <DIO_enuSetPinDirection+0x152>
			{
				DDRC &=~(DIO_MASK_BIT<<Copy_u8PinID);
    1860:	a4 e3       	ldi	r26, 0x34	; 52
    1862:	b0 e0       	ldi	r27, 0x00	; 0
    1864:	e4 e3       	ldi	r30, 0x34	; 52
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	80 81       	ld	r24, Z
    186a:	48 2f       	mov	r20, r24
    186c:	8b 81       	ldd	r24, Y+3	; 0x03
    186e:	28 2f       	mov	r18, r24
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	02 2e       	mov	r0, r18
    1878:	02 c0       	rjmp	.+4      	; 0x187e <DIO_enuSetPinDirection+0x146>
    187a:	88 0f       	add	r24, r24
    187c:	99 1f       	adc	r25, r25
    187e:	0a 94       	dec	r0
    1880:	e2 f7       	brpl	.-8      	; 0x187a <DIO_enuSetPinDirection+0x142>
    1882:	80 95       	com	r24
    1884:	84 23       	and	r24, r20
    1886:	8c 93       	st	X, r24
    1888:	3f c0       	rjmp	.+126    	; 0x1908 <DIO_enuSetPinDirection+0x1d0>
			}
			else
			{
				DDRC |=(DIO_MASK_BIT<<Copy_u8PinID);
    188a:	a4 e3       	ldi	r26, 0x34	; 52
    188c:	b0 e0       	ldi	r27, 0x00	; 0
    188e:	e4 e3       	ldi	r30, 0x34	; 52
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	80 81       	ld	r24, Z
    1894:	48 2f       	mov	r20, r24
    1896:	8b 81       	ldd	r24, Y+3	; 0x03
    1898:	28 2f       	mov	r18, r24
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	81 e0       	ldi	r24, 0x01	; 1
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	02 2e       	mov	r0, r18
    18a2:	02 c0       	rjmp	.+4      	; 0x18a8 <DIO_enuSetPinDirection+0x170>
    18a4:	88 0f       	add	r24, r24
    18a6:	99 1f       	adc	r25, r25
    18a8:	0a 94       	dec	r0
    18aa:	e2 f7       	brpl	.-8      	; 0x18a4 <DIO_enuSetPinDirection+0x16c>
    18ac:	84 2b       	or	r24, r20
    18ae:	8c 93       	st	X, r24
    18b0:	2b c0       	rjmp	.+86     	; 0x1908 <DIO_enuSetPinDirection+0x1d0>
			}
			break;

		case DIO_PORTD :
			if( Copy_u8Dir == INPTU_PIN)
    18b2:	8c 81       	ldd	r24, Y+4	; 0x04
    18b4:	88 23       	and	r24, r24
    18b6:	a9 f4       	brne	.+42     	; 0x18e2 <DIO_enuSetPinDirection+0x1aa>
			{
				DDRD &=~(DIO_MASK_BIT<<Copy_u8PinID);
    18b8:	a1 e3       	ldi	r26, 0x31	; 49
    18ba:	b0 e0       	ldi	r27, 0x00	; 0
    18bc:	e1 e3       	ldi	r30, 0x31	; 49
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	80 81       	ld	r24, Z
    18c2:	48 2f       	mov	r20, r24
    18c4:	8b 81       	ldd	r24, Y+3	; 0x03
    18c6:	28 2f       	mov	r18, r24
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	81 e0       	ldi	r24, 0x01	; 1
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	02 2e       	mov	r0, r18
    18d0:	02 c0       	rjmp	.+4      	; 0x18d6 <DIO_enuSetPinDirection+0x19e>
    18d2:	88 0f       	add	r24, r24
    18d4:	99 1f       	adc	r25, r25
    18d6:	0a 94       	dec	r0
    18d8:	e2 f7       	brpl	.-8      	; 0x18d2 <DIO_enuSetPinDirection+0x19a>
    18da:	80 95       	com	r24
    18dc:	84 23       	and	r24, r20
    18de:	8c 93       	st	X, r24
    18e0:	13 c0       	rjmp	.+38     	; 0x1908 <DIO_enuSetPinDirection+0x1d0>
			}
			else
			{
				DDRD |=(DIO_MASK_BIT<<Copy_u8PinID);
    18e2:	a1 e3       	ldi	r26, 0x31	; 49
    18e4:	b0 e0       	ldi	r27, 0x00	; 0
    18e6:	e1 e3       	ldi	r30, 0x31	; 49
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	80 81       	ld	r24, Z
    18ec:	48 2f       	mov	r20, r24
    18ee:	8b 81       	ldd	r24, Y+3	; 0x03
    18f0:	28 2f       	mov	r18, r24
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	81 e0       	ldi	r24, 0x01	; 1
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	02 2e       	mov	r0, r18
    18fa:	02 c0       	rjmp	.+4      	; 0x1900 <DIO_enuSetPinDirection+0x1c8>
    18fc:	88 0f       	add	r24, r24
    18fe:	99 1f       	adc	r25, r25
    1900:	0a 94       	dec	r0
    1902:	e2 f7       	brpl	.-8      	; 0x18fc <DIO_enuSetPinDirection+0x1c4>
    1904:	84 2b       	or	r24, r20
    1906:	8c 93       	st	X, r24
			}
			break;

		}
		Local_enuerrorState = ES_OK;
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	89 83       	std	Y+1, r24	; 0x01
    190c:	02 c0       	rjmp	.+4      	; 0x1912 <DIO_enuSetPinDirection+0x1da>
	}
	else
	{
		Local_enuerrorState = ES_OUT_OF_RANGE;
    190e:	83 e0       	ldi	r24, 0x03	; 3
    1910:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuerrorState  ;
    1912:	89 81       	ldd	r24, Y+1	; 0x01

}//End of DIO_enuSetPinDirection().
    1914:	26 96       	adiw	r28, 0x06	; 6
    1916:	0f b6       	in	r0, 0x3f	; 63
    1918:	f8 94       	cli
    191a:	de bf       	out	0x3e, r29	; 62
    191c:	0f be       	out	0x3f, r0	; 63
    191e:	cd bf       	out	0x3d, r28	; 61
    1920:	cf 91       	pop	r28
    1922:	df 91       	pop	r29
    1924:	08 95       	ret

00001926 <DIO_enuSetPinValue>:
/*                 : Arg.3: Copy_u8Val.                                     */
/*                                        DIO_LOW        ,   DIO_HIGH       */
/* Return          : ERROR_STATE eum.                                       */
/****************************************************************************/
ES_t DIO_enuSetPinValue(u8 Copy_u8PortID, u8 Copy_u8PinID ,u8 Copy_u8Val)
{
    1926:	df 93       	push	r29
    1928:	cf 93       	push	r28
    192a:	00 d0       	rcall	.+0      	; 0x192c <DIO_enuSetPinValue+0x6>
    192c:	00 d0       	rcall	.+0      	; 0x192e <DIO_enuSetPinValue+0x8>
    192e:	00 d0       	rcall	.+0      	; 0x1930 <DIO_enuSetPinValue+0xa>
    1930:	cd b7       	in	r28, 0x3d	; 61
    1932:	de b7       	in	r29, 0x3e	; 62
    1934:	8a 83       	std	Y+2, r24	; 0x02
    1936:	6b 83       	std	Y+3, r22	; 0x03
    1938:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuerrorState = ES_NOK ;
    193a:	19 82       	std	Y+1, r1	; 0x01

	if( (Copy_u8PortID <= DIO_PORTD) && (Copy_u8PinID <= DIO_PIN7) &&( Copy_u8Val<=DIO_HIGH))
    193c:	8a 81       	ldd	r24, Y+2	; 0x02
    193e:	84 30       	cpi	r24, 0x04	; 4
    1940:	08 f0       	brcs	.+2      	; 0x1944 <DIO_enuSetPinValue+0x1e>
    1942:	dc c0       	rjmp	.+440    	; 0x1afc <DIO_enuSetPinValue+0x1d6>
    1944:	8b 81       	ldd	r24, Y+3	; 0x03
    1946:	88 30       	cpi	r24, 0x08	; 8
    1948:	08 f0       	brcs	.+2      	; 0x194c <DIO_enuSetPinValue+0x26>
    194a:	d8 c0       	rjmp	.+432    	; 0x1afc <DIO_enuSetPinValue+0x1d6>
    194c:	8c 81       	ldd	r24, Y+4	; 0x04
    194e:	82 30       	cpi	r24, 0x02	; 2
    1950:	08 f0       	brcs	.+2      	; 0x1954 <DIO_enuSetPinValue+0x2e>
    1952:	d4 c0       	rjmp	.+424    	; 0x1afc <DIO_enuSetPinValue+0x1d6>
	{

		/**********************************************************
		 * Switching for the suitable case .
		 **********************************************************/
		switch( Copy_u8PortID )
    1954:	8a 81       	ldd	r24, Y+2	; 0x02
    1956:	28 2f       	mov	r18, r24
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	3e 83       	std	Y+6, r19	; 0x06
    195c:	2d 83       	std	Y+5, r18	; 0x05
    195e:	8d 81       	ldd	r24, Y+5	; 0x05
    1960:	9e 81       	ldd	r25, Y+6	; 0x06
    1962:	81 30       	cpi	r24, 0x01	; 1
    1964:	91 05       	cpc	r25, r1
    1966:	09 f4       	brne	.+2      	; 0x196a <DIO_enuSetPinValue+0x44>
    1968:	43 c0       	rjmp	.+134    	; 0x19f0 <DIO_enuSetPinValue+0xca>
    196a:	2d 81       	ldd	r18, Y+5	; 0x05
    196c:	3e 81       	ldd	r19, Y+6	; 0x06
    196e:	22 30       	cpi	r18, 0x02	; 2
    1970:	31 05       	cpc	r19, r1
    1972:	2c f4       	brge	.+10     	; 0x197e <DIO_enuSetPinValue+0x58>
    1974:	8d 81       	ldd	r24, Y+5	; 0x05
    1976:	9e 81       	ldd	r25, Y+6	; 0x06
    1978:	00 97       	sbiw	r24, 0x00	; 0
    197a:	71 f0       	breq	.+28     	; 0x1998 <DIO_enuSetPinValue+0x72>
    197c:	bc c0       	rjmp	.+376    	; 0x1af6 <DIO_enuSetPinValue+0x1d0>
    197e:	2d 81       	ldd	r18, Y+5	; 0x05
    1980:	3e 81       	ldd	r19, Y+6	; 0x06
    1982:	22 30       	cpi	r18, 0x02	; 2
    1984:	31 05       	cpc	r19, r1
    1986:	09 f4       	brne	.+2      	; 0x198a <DIO_enuSetPinValue+0x64>
    1988:	5f c0       	rjmp	.+190    	; 0x1a48 <DIO_enuSetPinValue+0x122>
    198a:	8d 81       	ldd	r24, Y+5	; 0x05
    198c:	9e 81       	ldd	r25, Y+6	; 0x06
    198e:	83 30       	cpi	r24, 0x03	; 3
    1990:	91 05       	cpc	r25, r1
    1992:	09 f4       	brne	.+2      	; 0x1996 <DIO_enuSetPinValue+0x70>
    1994:	85 c0       	rjmp	.+266    	; 0x1aa0 <DIO_enuSetPinValue+0x17a>
    1996:	af c0       	rjmp	.+350    	; 0x1af6 <DIO_enuSetPinValue+0x1d0>
		{
		case DIO_PORTA :
			if( Copy_u8Val == DIO_LOW)
    1998:	8c 81       	ldd	r24, Y+4	; 0x04
    199a:	88 23       	and	r24, r24
    199c:	a9 f4       	brne	.+42     	; 0x19c8 <DIO_enuSetPinValue+0xa2>
			{
				PORTA &=~(DIO_MASK_BIT<<Copy_u8PinID);
    199e:	ab e3       	ldi	r26, 0x3B	; 59
    19a0:	b0 e0       	ldi	r27, 0x00	; 0
    19a2:	eb e3       	ldi	r30, 0x3B	; 59
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	80 81       	ld	r24, Z
    19a8:	48 2f       	mov	r20, r24
    19aa:	8b 81       	ldd	r24, Y+3	; 0x03
    19ac:	28 2f       	mov	r18, r24
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	81 e0       	ldi	r24, 0x01	; 1
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	02 2e       	mov	r0, r18
    19b6:	02 c0       	rjmp	.+4      	; 0x19bc <DIO_enuSetPinValue+0x96>
    19b8:	88 0f       	add	r24, r24
    19ba:	99 1f       	adc	r25, r25
    19bc:	0a 94       	dec	r0
    19be:	e2 f7       	brpl	.-8      	; 0x19b8 <DIO_enuSetPinValue+0x92>
    19c0:	80 95       	com	r24
    19c2:	84 23       	and	r24, r20
    19c4:	8c 93       	st	X, r24
    19c6:	97 c0       	rjmp	.+302    	; 0x1af6 <DIO_enuSetPinValue+0x1d0>
			}
			else
			{
				PORTA |=(DIO_MASK_BIT<<Copy_u8PinID);
    19c8:	ab e3       	ldi	r26, 0x3B	; 59
    19ca:	b0 e0       	ldi	r27, 0x00	; 0
    19cc:	eb e3       	ldi	r30, 0x3B	; 59
    19ce:	f0 e0       	ldi	r31, 0x00	; 0
    19d0:	80 81       	ld	r24, Z
    19d2:	48 2f       	mov	r20, r24
    19d4:	8b 81       	ldd	r24, Y+3	; 0x03
    19d6:	28 2f       	mov	r18, r24
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	02 2e       	mov	r0, r18
    19e0:	02 c0       	rjmp	.+4      	; 0x19e6 <DIO_enuSetPinValue+0xc0>
    19e2:	88 0f       	add	r24, r24
    19e4:	99 1f       	adc	r25, r25
    19e6:	0a 94       	dec	r0
    19e8:	e2 f7       	brpl	.-8      	; 0x19e2 <DIO_enuSetPinValue+0xbc>
    19ea:	84 2b       	or	r24, r20
    19ec:	8c 93       	st	X, r24
    19ee:	83 c0       	rjmp	.+262    	; 0x1af6 <DIO_enuSetPinValue+0x1d0>
			}

			break;

		case DIO_PORTB :
			if( Copy_u8Val == DIO_LOW)
    19f0:	8c 81       	ldd	r24, Y+4	; 0x04
    19f2:	88 23       	and	r24, r24
    19f4:	a9 f4       	brne	.+42     	; 0x1a20 <DIO_enuSetPinValue+0xfa>
			{
				PORTB &=~(DIO_MASK_BIT<<Copy_u8PinID);
    19f6:	a8 e3       	ldi	r26, 0x38	; 56
    19f8:	b0 e0       	ldi	r27, 0x00	; 0
    19fa:	e8 e3       	ldi	r30, 0x38	; 56
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	80 81       	ld	r24, Z
    1a00:	48 2f       	mov	r20, r24
    1a02:	8b 81       	ldd	r24, Y+3	; 0x03
    1a04:	28 2f       	mov	r18, r24
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	81 e0       	ldi	r24, 0x01	; 1
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	02 2e       	mov	r0, r18
    1a0e:	02 c0       	rjmp	.+4      	; 0x1a14 <DIO_enuSetPinValue+0xee>
    1a10:	88 0f       	add	r24, r24
    1a12:	99 1f       	adc	r25, r25
    1a14:	0a 94       	dec	r0
    1a16:	e2 f7       	brpl	.-8      	; 0x1a10 <DIO_enuSetPinValue+0xea>
    1a18:	80 95       	com	r24
    1a1a:	84 23       	and	r24, r20
    1a1c:	8c 93       	st	X, r24
    1a1e:	6b c0       	rjmp	.+214    	; 0x1af6 <DIO_enuSetPinValue+0x1d0>
			}
			else
			{
				PORTB |=(DIO_MASK_BIT<<Copy_u8PinID);
    1a20:	a8 e3       	ldi	r26, 0x38	; 56
    1a22:	b0 e0       	ldi	r27, 0x00	; 0
    1a24:	e8 e3       	ldi	r30, 0x38	; 56
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	80 81       	ld	r24, Z
    1a2a:	48 2f       	mov	r20, r24
    1a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2e:	28 2f       	mov	r18, r24
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	02 2e       	mov	r0, r18
    1a38:	02 c0       	rjmp	.+4      	; 0x1a3e <DIO_enuSetPinValue+0x118>
    1a3a:	88 0f       	add	r24, r24
    1a3c:	99 1f       	adc	r25, r25
    1a3e:	0a 94       	dec	r0
    1a40:	e2 f7       	brpl	.-8      	; 0x1a3a <DIO_enuSetPinValue+0x114>
    1a42:	84 2b       	or	r24, r20
    1a44:	8c 93       	st	X, r24
    1a46:	57 c0       	rjmp	.+174    	; 0x1af6 <DIO_enuSetPinValue+0x1d0>

			break;

		case DIO_PORTC :

			if( Copy_u8Val == DIO_LOW)
    1a48:	8c 81       	ldd	r24, Y+4	; 0x04
    1a4a:	88 23       	and	r24, r24
    1a4c:	a9 f4       	brne	.+42     	; 0x1a78 <DIO_enuSetPinValue+0x152>
			{
				PORTC &=~(DIO_MASK_BIT<<Copy_u8PinID);
    1a4e:	a5 e3       	ldi	r26, 0x35	; 53
    1a50:	b0 e0       	ldi	r27, 0x00	; 0
    1a52:	e5 e3       	ldi	r30, 0x35	; 53
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	80 81       	ld	r24, Z
    1a58:	48 2f       	mov	r20, r24
    1a5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5c:	28 2f       	mov	r18, r24
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	81 e0       	ldi	r24, 0x01	; 1
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	02 2e       	mov	r0, r18
    1a66:	02 c0       	rjmp	.+4      	; 0x1a6c <DIO_enuSetPinValue+0x146>
    1a68:	88 0f       	add	r24, r24
    1a6a:	99 1f       	adc	r25, r25
    1a6c:	0a 94       	dec	r0
    1a6e:	e2 f7       	brpl	.-8      	; 0x1a68 <DIO_enuSetPinValue+0x142>
    1a70:	80 95       	com	r24
    1a72:	84 23       	and	r24, r20
    1a74:	8c 93       	st	X, r24
    1a76:	3f c0       	rjmp	.+126    	; 0x1af6 <DIO_enuSetPinValue+0x1d0>
			}
			else
			{
				PORTC |=(DIO_MASK_BIT<<Copy_u8PinID);
    1a78:	a5 e3       	ldi	r26, 0x35	; 53
    1a7a:	b0 e0       	ldi	r27, 0x00	; 0
    1a7c:	e5 e3       	ldi	r30, 0x35	; 53
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	80 81       	ld	r24, Z
    1a82:	48 2f       	mov	r20, r24
    1a84:	8b 81       	ldd	r24, Y+3	; 0x03
    1a86:	28 2f       	mov	r18, r24
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	02 2e       	mov	r0, r18
    1a90:	02 c0       	rjmp	.+4      	; 0x1a96 <DIO_enuSetPinValue+0x170>
    1a92:	88 0f       	add	r24, r24
    1a94:	99 1f       	adc	r25, r25
    1a96:	0a 94       	dec	r0
    1a98:	e2 f7       	brpl	.-8      	; 0x1a92 <DIO_enuSetPinValue+0x16c>
    1a9a:	84 2b       	or	r24, r20
    1a9c:	8c 93       	st	X, r24
    1a9e:	2b c0       	rjmp	.+86     	; 0x1af6 <DIO_enuSetPinValue+0x1d0>
			}

			break;

		case DIO_PORTD :
			if( Copy_u8Val == DIO_LOW)
    1aa0:	8c 81       	ldd	r24, Y+4	; 0x04
    1aa2:	88 23       	and	r24, r24
    1aa4:	a9 f4       	brne	.+42     	; 0x1ad0 <DIO_enuSetPinValue+0x1aa>
			{
				PORTD &=~(DIO_MASK_BIT<<Copy_u8PinID);
    1aa6:	a2 e3       	ldi	r26, 0x32	; 50
    1aa8:	b0 e0       	ldi	r27, 0x00	; 0
    1aaa:	e2 e3       	ldi	r30, 0x32	; 50
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	80 81       	ld	r24, Z
    1ab0:	48 2f       	mov	r20, r24
    1ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab4:	28 2f       	mov	r18, r24
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	81 e0       	ldi	r24, 0x01	; 1
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	02 2e       	mov	r0, r18
    1abe:	02 c0       	rjmp	.+4      	; 0x1ac4 <DIO_enuSetPinValue+0x19e>
    1ac0:	88 0f       	add	r24, r24
    1ac2:	99 1f       	adc	r25, r25
    1ac4:	0a 94       	dec	r0
    1ac6:	e2 f7       	brpl	.-8      	; 0x1ac0 <DIO_enuSetPinValue+0x19a>
    1ac8:	80 95       	com	r24
    1aca:	84 23       	and	r24, r20
    1acc:	8c 93       	st	X, r24
    1ace:	13 c0       	rjmp	.+38     	; 0x1af6 <DIO_enuSetPinValue+0x1d0>
			}
			else
			{
				PORTD |=(DIO_MASK_BIT<<Copy_u8PinID);
    1ad0:	a2 e3       	ldi	r26, 0x32	; 50
    1ad2:	b0 e0       	ldi	r27, 0x00	; 0
    1ad4:	e2 e3       	ldi	r30, 0x32	; 50
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	80 81       	ld	r24, Z
    1ada:	48 2f       	mov	r20, r24
    1adc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ade:	28 2f       	mov	r18, r24
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	81 e0       	ldi	r24, 0x01	; 1
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	02 2e       	mov	r0, r18
    1ae8:	02 c0       	rjmp	.+4      	; 0x1aee <DIO_enuSetPinValue+0x1c8>
    1aea:	88 0f       	add	r24, r24
    1aec:	99 1f       	adc	r25, r25
    1aee:	0a 94       	dec	r0
    1af0:	e2 f7       	brpl	.-8      	; 0x1aea <DIO_enuSetPinValue+0x1c4>
    1af2:	84 2b       	or	r24, r20
    1af4:	8c 93       	st	X, r24
			}

			break;

		}
		Local_enuerrorState = ES_OK;
    1af6:	81 e0       	ldi	r24, 0x01	; 1
    1af8:	89 83       	std	Y+1, r24	; 0x01
    1afa:	02 c0       	rjmp	.+4      	; 0x1b00 <DIO_enuSetPinValue+0x1da>
	}
	else
	{
		Local_enuerrorState = ES_OUT_OF_RANGE;
    1afc:	83 e0       	ldi	r24, 0x03	; 3
    1afe:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuerrorState  ;
    1b00:	89 81       	ldd	r24, Y+1	; 0x01
}//End of DIO_enuSetPinValue().
    1b02:	26 96       	adiw	r28, 0x06	; 6
    1b04:	0f b6       	in	r0, 0x3f	; 63
    1b06:	f8 94       	cli
    1b08:	de bf       	out	0x3e, r29	; 62
    1b0a:	0f be       	out	0x3f, r0	; 63
    1b0c:	cd bf       	out	0x3d, r28	; 61
    1b0e:	cf 91       	pop	r28
    1b10:	df 91       	pop	r29
    1b12:	08 95       	ret

00001b14 <DIO_enuToggelPin>:
/*                                        DIO_PIN2       ,   DIO_PIN6       */
/*                                        DIO_PIN3       ,   DIO_PIN7       */
/* Return          : ERROR_STATE eum.                                       */
/****************************************************************************/
ES_t DIO_enuToggelPin(u8  Copy_u8PortID, u8 Copy_u8PinID  )
{
    1b14:	df 93       	push	r29
    1b16:	cf 93       	push	r28
    1b18:	00 d0       	rcall	.+0      	; 0x1b1a <DIO_enuToggelPin+0x6>
    1b1a:	00 d0       	rcall	.+0      	; 0x1b1c <DIO_enuToggelPin+0x8>
    1b1c:	0f 92       	push	r0
    1b1e:	cd b7       	in	r28, 0x3d	; 61
    1b20:	de b7       	in	r29, 0x3e	; 62
    1b22:	8a 83       	std	Y+2, r24	; 0x02
    1b24:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuerrorState = ES_NOK ;
    1b26:	19 82       	std	Y+1, r1	; 0x01

	if( (Copy_u8PortID <= DIO_PORTD) &&  (Copy_u8PinID <= DIO_PIN7) )
    1b28:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2a:	84 30       	cpi	r24, 0x04	; 4
    1b2c:	08 f0       	brcs	.+2      	; 0x1b30 <DIO_enuToggelPin+0x1c>
    1b2e:	75 c0       	rjmp	.+234    	; 0x1c1a <DIO_enuToggelPin+0x106>
    1b30:	8b 81       	ldd	r24, Y+3	; 0x03
    1b32:	88 30       	cpi	r24, 0x08	; 8
    1b34:	08 f0       	brcs	.+2      	; 0x1b38 <DIO_enuToggelPin+0x24>
    1b36:	71 c0       	rjmp	.+226    	; 0x1c1a <DIO_enuToggelPin+0x106>
	{
		/**********************************************************
		 * Switching for the suitable case .
		 **********************************************************/
		switch( Copy_u8PortID )
    1b38:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3a:	28 2f       	mov	r18, r24
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	3d 83       	std	Y+5, r19	; 0x05
    1b40:	2c 83       	std	Y+4, r18	; 0x04
    1b42:	8c 81       	ldd	r24, Y+4	; 0x04
    1b44:	9d 81       	ldd	r25, Y+5	; 0x05
    1b46:	81 30       	cpi	r24, 0x01	; 1
    1b48:	91 05       	cpc	r25, r1
    1b4a:	49 f1       	breq	.+82     	; 0x1b9e <DIO_enuToggelPin+0x8a>
    1b4c:	2c 81       	ldd	r18, Y+4	; 0x04
    1b4e:	3d 81       	ldd	r19, Y+5	; 0x05
    1b50:	22 30       	cpi	r18, 0x02	; 2
    1b52:	31 05       	cpc	r19, r1
    1b54:	2c f4       	brge	.+10     	; 0x1b60 <DIO_enuToggelPin+0x4c>
    1b56:	8c 81       	ldd	r24, Y+4	; 0x04
    1b58:	9d 81       	ldd	r25, Y+5	; 0x05
    1b5a:	00 97       	sbiw	r24, 0x00	; 0
    1b5c:	61 f0       	breq	.+24     	; 0x1b76 <DIO_enuToggelPin+0x62>
    1b5e:	5a c0       	rjmp	.+180    	; 0x1c14 <DIO_enuToggelPin+0x100>
    1b60:	2c 81       	ldd	r18, Y+4	; 0x04
    1b62:	3d 81       	ldd	r19, Y+5	; 0x05
    1b64:	22 30       	cpi	r18, 0x02	; 2
    1b66:	31 05       	cpc	r19, r1
    1b68:	71 f1       	breq	.+92     	; 0x1bc6 <DIO_enuToggelPin+0xb2>
    1b6a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b6c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b6e:	83 30       	cpi	r24, 0x03	; 3
    1b70:	91 05       	cpc	r25, r1
    1b72:	e9 f1       	breq	.+122    	; 0x1bee <DIO_enuToggelPin+0xda>
    1b74:	4f c0       	rjmp	.+158    	; 0x1c14 <DIO_enuToggelPin+0x100>
		{
		case DIO_PORTA :
			PORTA ^=(DIO_MASK_BIT<<Copy_u8PinID);
    1b76:	ab e3       	ldi	r26, 0x3B	; 59
    1b78:	b0 e0       	ldi	r27, 0x00	; 0
    1b7a:	eb e3       	ldi	r30, 0x3B	; 59
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	80 81       	ld	r24, Z
    1b80:	48 2f       	mov	r20, r24
    1b82:	8b 81       	ldd	r24, Y+3	; 0x03
    1b84:	28 2f       	mov	r18, r24
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	81 e0       	ldi	r24, 0x01	; 1
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	02 2e       	mov	r0, r18
    1b8e:	02 c0       	rjmp	.+4      	; 0x1b94 <DIO_enuToggelPin+0x80>
    1b90:	88 0f       	add	r24, r24
    1b92:	99 1f       	adc	r25, r25
    1b94:	0a 94       	dec	r0
    1b96:	e2 f7       	brpl	.-8      	; 0x1b90 <DIO_enuToggelPin+0x7c>
    1b98:	84 27       	eor	r24, r20
    1b9a:	8c 93       	st	X, r24
    1b9c:	3b c0       	rjmp	.+118    	; 0x1c14 <DIO_enuToggelPin+0x100>
			break;

		case DIO_PORTB :
			PORTB ^=(DIO_MASK_BIT<<Copy_u8PinID);
    1b9e:	a8 e3       	ldi	r26, 0x38	; 56
    1ba0:	b0 e0       	ldi	r27, 0x00	; 0
    1ba2:	e8 e3       	ldi	r30, 0x38	; 56
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	80 81       	ld	r24, Z
    1ba8:	48 2f       	mov	r20, r24
    1baa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bac:	28 2f       	mov	r18, r24
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	81 e0       	ldi	r24, 0x01	; 1
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	02 2e       	mov	r0, r18
    1bb6:	02 c0       	rjmp	.+4      	; 0x1bbc <DIO_enuToggelPin+0xa8>
    1bb8:	88 0f       	add	r24, r24
    1bba:	99 1f       	adc	r25, r25
    1bbc:	0a 94       	dec	r0
    1bbe:	e2 f7       	brpl	.-8      	; 0x1bb8 <DIO_enuToggelPin+0xa4>
    1bc0:	84 27       	eor	r24, r20
    1bc2:	8c 93       	st	X, r24
    1bc4:	27 c0       	rjmp	.+78     	; 0x1c14 <DIO_enuToggelPin+0x100>
			break;

		case DIO_PORTC :
			PORTC ^=(DIO_MASK_BIT<<Copy_u8PinID);
    1bc6:	a5 e3       	ldi	r26, 0x35	; 53
    1bc8:	b0 e0       	ldi	r27, 0x00	; 0
    1bca:	e5 e3       	ldi	r30, 0x35	; 53
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	80 81       	ld	r24, Z
    1bd0:	48 2f       	mov	r20, r24
    1bd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd4:	28 2f       	mov	r18, r24
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	81 e0       	ldi	r24, 0x01	; 1
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	02 2e       	mov	r0, r18
    1bde:	02 c0       	rjmp	.+4      	; 0x1be4 <DIO_enuToggelPin+0xd0>
    1be0:	88 0f       	add	r24, r24
    1be2:	99 1f       	adc	r25, r25
    1be4:	0a 94       	dec	r0
    1be6:	e2 f7       	brpl	.-8      	; 0x1be0 <DIO_enuToggelPin+0xcc>
    1be8:	84 27       	eor	r24, r20
    1bea:	8c 93       	st	X, r24
    1bec:	13 c0       	rjmp	.+38     	; 0x1c14 <DIO_enuToggelPin+0x100>
			break;

		case DIO_PORTD :
			PORTD ^=(DIO_MASK_BIT<<Copy_u8PinID);
    1bee:	a2 e3       	ldi	r26, 0x32	; 50
    1bf0:	b0 e0       	ldi	r27, 0x00	; 0
    1bf2:	e2 e3       	ldi	r30, 0x32	; 50
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	80 81       	ld	r24, Z
    1bf8:	48 2f       	mov	r20, r24
    1bfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfc:	28 2f       	mov	r18, r24
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	02 2e       	mov	r0, r18
    1c06:	02 c0       	rjmp	.+4      	; 0x1c0c <DIO_enuToggelPin+0xf8>
    1c08:	88 0f       	add	r24, r24
    1c0a:	99 1f       	adc	r25, r25
    1c0c:	0a 94       	dec	r0
    1c0e:	e2 f7       	brpl	.-8      	; 0x1c08 <DIO_enuToggelPin+0xf4>
    1c10:	84 27       	eor	r24, r20
    1c12:	8c 93       	st	X, r24
			break;
		}

		Local_enuerrorState = ES_OK;
    1c14:	81 e0       	ldi	r24, 0x01	; 1
    1c16:	89 83       	std	Y+1, r24	; 0x01
    1c18:	02 c0       	rjmp	.+4      	; 0x1c1e <DIO_enuToggelPin+0x10a>

	}
	else
	{
		Local_enuerrorState = ES_OUT_OF_RANGE;
    1c1a:	83 e0       	ldi	r24, 0x03	; 3
    1c1c:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuerrorState  ;
    1c1e:	89 81       	ldd	r24, Y+1	; 0x01
}//End of DIO_enuToggelPin().
    1c20:	0f 90       	pop	r0
    1c22:	0f 90       	pop	r0
    1c24:	0f 90       	pop	r0
    1c26:	0f 90       	pop	r0
    1c28:	0f 90       	pop	r0
    1c2a:	cf 91       	pop	r28
    1c2c:	df 91       	pop	r29
    1c2e:	08 95       	ret

00001c30 <DIO_enuGetPinVlaue>:
/*                 : Arg.3: Address of u8 variable.                              */
/*                                                                               */
/* Return          : ERROR_STATE eum.                                            */
/*********************************************************************************/
ES_t DIO_enuGetPinVlaue(u8 Copy_u8PortID , u8 Copy_u8PinID , u8* Copy_pu8PinVal)
{
    1c30:	df 93       	push	r29
    1c32:	cf 93       	push	r28
    1c34:	cd b7       	in	r28, 0x3d	; 61
    1c36:	de b7       	in	r29, 0x3e	; 62
    1c38:	27 97       	sbiw	r28, 0x07	; 7
    1c3a:	0f b6       	in	r0, 0x3f	; 63
    1c3c:	f8 94       	cli
    1c3e:	de bf       	out	0x3e, r29	; 62
    1c40:	0f be       	out	0x3f, r0	; 63
    1c42:	cd bf       	out	0x3d, r28	; 61
    1c44:	8a 83       	std	Y+2, r24	; 0x02
    1c46:	6b 83       	std	Y+3, r22	; 0x03
    1c48:	5d 83       	std	Y+5, r21	; 0x05
    1c4a:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuerrorState = ES_NOK ;
    1c4c:	19 82       	std	Y+1, r1	; 0x01

	// Check to ensure that the passed address is not equal Null.
	if( Copy_pu8PinVal != NULL )
    1c4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c50:	9d 81       	ldd	r25, Y+5	; 0x05
    1c52:	00 97       	sbiw	r24, 0x00	; 0
    1c54:	09 f4       	brne	.+2      	; 0x1c58 <DIO_enuGetPinVlaue+0x28>
    1c56:	7e c0       	rjmp	.+252    	; 0x1d54 <DIO_enuGetPinVlaue+0x124>
	{
		if( (Copy_u8PortID <= DIO_PORTD) &&  (Copy_u8PinID <= DIO_PIN7) )
    1c58:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5a:	84 30       	cpi	r24, 0x04	; 4
    1c5c:	08 f0       	brcs	.+2      	; 0x1c60 <DIO_enuGetPinVlaue+0x30>
    1c5e:	77 c0       	rjmp	.+238    	; 0x1d4e <DIO_enuGetPinVlaue+0x11e>
    1c60:	8b 81       	ldd	r24, Y+3	; 0x03
    1c62:	88 30       	cpi	r24, 0x08	; 8
    1c64:	08 f0       	brcs	.+2      	; 0x1c68 <DIO_enuGetPinVlaue+0x38>
    1c66:	73 c0       	rjmp	.+230    	; 0x1d4e <DIO_enuGetPinVlaue+0x11e>
		{
			/**********************************************************
			 * Switching for the suitable case .
			 **********************************************************/
			switch( Copy_u8PortID )
    1c68:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6a:	28 2f       	mov	r18, r24
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	3f 83       	std	Y+7, r19	; 0x07
    1c70:	2e 83       	std	Y+6, r18	; 0x06
    1c72:	4e 81       	ldd	r20, Y+6	; 0x06
    1c74:	5f 81       	ldd	r21, Y+7	; 0x07
    1c76:	41 30       	cpi	r20, 0x01	; 1
    1c78:	51 05       	cpc	r21, r1
    1c7a:	59 f1       	breq	.+86     	; 0x1cd2 <DIO_enuGetPinVlaue+0xa2>
    1c7c:	8e 81       	ldd	r24, Y+6	; 0x06
    1c7e:	9f 81       	ldd	r25, Y+7	; 0x07
    1c80:	82 30       	cpi	r24, 0x02	; 2
    1c82:	91 05       	cpc	r25, r1
    1c84:	34 f4       	brge	.+12     	; 0x1c92 <DIO_enuGetPinVlaue+0x62>
    1c86:	2e 81       	ldd	r18, Y+6	; 0x06
    1c88:	3f 81       	ldd	r19, Y+7	; 0x07
    1c8a:	21 15       	cp	r18, r1
    1c8c:	31 05       	cpc	r19, r1
    1c8e:	69 f0       	breq	.+26     	; 0x1caa <DIO_enuGetPinVlaue+0x7a>
    1c90:	5b c0       	rjmp	.+182    	; 0x1d48 <DIO_enuGetPinVlaue+0x118>
    1c92:	4e 81       	ldd	r20, Y+6	; 0x06
    1c94:	5f 81       	ldd	r21, Y+7	; 0x07
    1c96:	42 30       	cpi	r20, 0x02	; 2
    1c98:	51 05       	cpc	r21, r1
    1c9a:	79 f1       	breq	.+94     	; 0x1cfa <DIO_enuGetPinVlaue+0xca>
    1c9c:	8e 81       	ldd	r24, Y+6	; 0x06
    1c9e:	9f 81       	ldd	r25, Y+7	; 0x07
    1ca0:	83 30       	cpi	r24, 0x03	; 3
    1ca2:	91 05       	cpc	r25, r1
    1ca4:	09 f4       	brne	.+2      	; 0x1ca8 <DIO_enuGetPinVlaue+0x78>
    1ca6:	3d c0       	rjmp	.+122    	; 0x1d22 <DIO_enuGetPinVlaue+0xf2>
    1ca8:	4f c0       	rjmp	.+158    	; 0x1d48 <DIO_enuGetPinVlaue+0x118>
			{
			case DIO_PORTA :
				*Copy_pu8PinVal = (PINA>>Copy_u8PinID)&DIO_MASK_BIT;
    1caa:	e9 e3       	ldi	r30, 0x39	; 57
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	80 81       	ld	r24, Z
    1cb0:	28 2f       	mov	r18, r24
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb6:	88 2f       	mov	r24, r24
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	a9 01       	movw	r20, r18
    1cbc:	02 c0       	rjmp	.+4      	; 0x1cc2 <DIO_enuGetPinVlaue+0x92>
    1cbe:	55 95       	asr	r21
    1cc0:	47 95       	ror	r20
    1cc2:	8a 95       	dec	r24
    1cc4:	e2 f7       	brpl	.-8      	; 0x1cbe <DIO_enuGetPinVlaue+0x8e>
    1cc6:	ca 01       	movw	r24, r20
    1cc8:	81 70       	andi	r24, 0x01	; 1
    1cca:	ec 81       	ldd	r30, Y+4	; 0x04
    1ccc:	fd 81       	ldd	r31, Y+5	; 0x05
    1cce:	80 83       	st	Z, r24
    1cd0:	3b c0       	rjmp	.+118    	; 0x1d48 <DIO_enuGetPinVlaue+0x118>
				break;

			case DIO_PORTB :
				*Copy_pu8PinVal = (PINB>>Copy_u8PinID)&DIO_MASK_BIT;
    1cd2:	e6 e3       	ldi	r30, 0x36	; 54
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	80 81       	ld	r24, Z
    1cd8:	28 2f       	mov	r18, r24
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cde:	88 2f       	mov	r24, r24
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	a9 01       	movw	r20, r18
    1ce4:	02 c0       	rjmp	.+4      	; 0x1cea <DIO_enuGetPinVlaue+0xba>
    1ce6:	55 95       	asr	r21
    1ce8:	47 95       	ror	r20
    1cea:	8a 95       	dec	r24
    1cec:	e2 f7       	brpl	.-8      	; 0x1ce6 <DIO_enuGetPinVlaue+0xb6>
    1cee:	ca 01       	movw	r24, r20
    1cf0:	81 70       	andi	r24, 0x01	; 1
    1cf2:	ec 81       	ldd	r30, Y+4	; 0x04
    1cf4:	fd 81       	ldd	r31, Y+5	; 0x05
    1cf6:	80 83       	st	Z, r24
    1cf8:	27 c0       	rjmp	.+78     	; 0x1d48 <DIO_enuGetPinVlaue+0x118>
				break;

			case DIO_PORTC :
				*Copy_pu8PinVal = (PINC>>Copy_u8PinID)&DIO_MASK_BIT;
    1cfa:	e3 e3       	ldi	r30, 0x33	; 51
    1cfc:	f0 e0       	ldi	r31, 0x00	; 0
    1cfe:	80 81       	ld	r24, Z
    1d00:	28 2f       	mov	r18, r24
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	8b 81       	ldd	r24, Y+3	; 0x03
    1d06:	88 2f       	mov	r24, r24
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	a9 01       	movw	r20, r18
    1d0c:	02 c0       	rjmp	.+4      	; 0x1d12 <DIO_enuGetPinVlaue+0xe2>
    1d0e:	55 95       	asr	r21
    1d10:	47 95       	ror	r20
    1d12:	8a 95       	dec	r24
    1d14:	e2 f7       	brpl	.-8      	; 0x1d0e <DIO_enuGetPinVlaue+0xde>
    1d16:	ca 01       	movw	r24, r20
    1d18:	81 70       	andi	r24, 0x01	; 1
    1d1a:	ec 81       	ldd	r30, Y+4	; 0x04
    1d1c:	fd 81       	ldd	r31, Y+5	; 0x05
    1d1e:	80 83       	st	Z, r24
    1d20:	13 c0       	rjmp	.+38     	; 0x1d48 <DIO_enuGetPinVlaue+0x118>
				break;

			case DIO_PORTD :
				*Copy_pu8PinVal = (PIND>>Copy_u8PinID)&DIO_MASK_BIT;
    1d22:	e0 e3       	ldi	r30, 0x30	; 48
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	80 81       	ld	r24, Z
    1d28:	28 2f       	mov	r18, r24
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2e:	88 2f       	mov	r24, r24
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	a9 01       	movw	r20, r18
    1d34:	02 c0       	rjmp	.+4      	; 0x1d3a <DIO_enuGetPinVlaue+0x10a>
    1d36:	55 95       	asr	r21
    1d38:	47 95       	ror	r20
    1d3a:	8a 95       	dec	r24
    1d3c:	e2 f7       	brpl	.-8      	; 0x1d36 <DIO_enuGetPinVlaue+0x106>
    1d3e:	ca 01       	movw	r24, r20
    1d40:	81 70       	andi	r24, 0x01	; 1
    1d42:	ec 81       	ldd	r30, Y+4	; 0x04
    1d44:	fd 81       	ldd	r31, Y+5	; 0x05
    1d46:	80 83       	st	Z, r24
				break;
			}

			Local_enuerrorState = ES_OK;
    1d48:	81 e0       	ldi	r24, 0x01	; 1
    1d4a:	89 83       	std	Y+1, r24	; 0x01
    1d4c:	05 c0       	rjmp	.+10     	; 0x1d58 <DIO_enuGetPinVlaue+0x128>

		}
		else
		{
			Local_enuerrorState = ES_OUT_OF_RANGE;
    1d4e:	83 e0       	ldi	r24, 0x03	; 3
    1d50:	89 83       	std	Y+1, r24	; 0x01
    1d52:	02 c0       	rjmp	.+4      	; 0x1d58 <DIO_enuGetPinVlaue+0x128>
	else
	{
		/**********************************************************
		 * Handle null pointer case.
		 **********************************************************/
		Local_enuerrorState = ES_NULL_POINTER;
    1d54:	82 e0       	ldi	r24, 0x02	; 2
    1d56:	89 83       	std	Y+1, r24	; 0x01
	}



	return Local_enuerrorState  ;
    1d58:	89 81       	ldd	r24, Y+1	; 0x01
}//End of DIO_enuGetPinVlaue().
    1d5a:	27 96       	adiw	r28, 0x07	; 7
    1d5c:	0f b6       	in	r0, 0x3f	; 63
    1d5e:	f8 94       	cli
    1d60:	de bf       	out	0x3e, r29	; 62
    1d62:	0f be       	out	0x3f, r0	; 63
    1d64:	cd bf       	out	0x3d, r28	; 61
    1d66:	cf 91       	pop	r28
    1d68:	df 91       	pop	r29
    1d6a:	08 95       	ret

00001d6c <USART_enuInit>:
#include "USART_Cnfg.h"
#include "USART_Interface.h"


void USART_enuInit(void)
{
    1d6c:	0f 93       	push	r16
    1d6e:	1f 93       	push	r17
    1d70:	df 93       	push	r29
    1d72:	cf 93       	push	r28
    1d74:	cd b7       	in	r28, 0x3d	; 61
    1d76:	de b7       	in	r29, 0x3e	; 62
    1d78:	65 97       	sbiw	r28, 0x15	; 21
    1d7a:	0f b6       	in	r0, 0x3f	; 63
    1d7c:	f8 94       	cli
    1d7e:	de bf       	out	0x3e, r29	; 62
    1d80:	0f be       	out	0x3f, r0	; 63
    1d82:	cd bf       	out	0x3d, r28	; 61
	u8  UCSRA_Temp   = 0 ;
    1d84:	1f 82       	std	Y+7, r1	; 0x07
	u8  UCSRB_Temp   = 0 ;
    1d86:	1e 82       	std	Y+6, r1	; 0x06
	u8  UCSRC_Temp   = 0 ;
    1d88:	1d 82       	std	Y+5, r1	; 0x05
	f32 UBRR_Temp    = 0 ;
    1d8a:	80 e0       	ldi	r24, 0x00	; 0
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	a0 e0       	ldi	r26, 0x00	; 0
    1d90:	b0 e0       	ldi	r27, 0x00	; 0
    1d92:	89 83       	std	Y+1, r24	; 0x01
    1d94:	9a 83       	std	Y+2, r25	; 0x02
    1d96:	ab 83       	std	Y+3, r26	; 0x03
    1d98:	bc 83       	std	Y+4, r27	; 0x04

	switch( USART0.EnableMode )
    1d9a:	80 91 6a 01 	lds	r24, 0x016A
    1d9e:	28 2f       	mov	r18, r24
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	3d 8b       	std	Y+21, r19	; 0x15
    1da4:	2c 8b       	std	Y+20, r18	; 0x14
    1da6:	8c 89       	ldd	r24, Y+20	; 0x14
    1da8:	9d 89       	ldd	r25, Y+21	; 0x15
    1daa:	81 30       	cpi	r24, 0x01	; 1
    1dac:	91 05       	cpc	r25, r1
    1dae:	81 f0       	breq	.+32     	; 0x1dd0 <USART_enuInit+0x64>
    1db0:	ec 89       	ldd	r30, Y+20	; 0x14
    1db2:	fd 89       	ldd	r31, Y+21	; 0x15
    1db4:	e2 30       	cpi	r30, 0x02	; 2
    1db6:	f1 05       	cpc	r31, r1
    1db8:	b4 f0       	brlt	.+44     	; 0x1de6 <USART_enuInit+0x7a>
    1dba:	2c 89       	ldd	r18, Y+20	; 0x14
    1dbc:	3d 89       	ldd	r19, Y+21	; 0x15
    1dbe:	22 30       	cpi	r18, 0x02	; 2
    1dc0:	31 05       	cpc	r19, r1
    1dc2:	51 f0       	breq	.+20     	; 0x1dd8 <USART_enuInit+0x6c>
    1dc4:	8c 89       	ldd	r24, Y+20	; 0x14
    1dc6:	9d 89       	ldd	r25, Y+21	; 0x15
    1dc8:	83 30       	cpi	r24, 0x03	; 3
    1dca:	91 05       	cpc	r25, r1
    1dcc:	49 f0       	breq	.+18     	; 0x1de0 <USART_enuInit+0x74>
    1dce:	0b c0       	rjmp	.+22     	; 0x1de6 <USART_enuInit+0x7a>

	case USART_Disable :
		break;

	case USART_Tx_Only :
		UCSRB_Temp |=(USART_MSK_BIT<<TXEN);
    1dd0:	8e 81       	ldd	r24, Y+6	; 0x06
    1dd2:	88 60       	ori	r24, 0x08	; 8
    1dd4:	8e 83       	std	Y+6, r24	; 0x06
    1dd6:	07 c0       	rjmp	.+14     	; 0x1de6 <USART_enuInit+0x7a>
		break;

	case USART_Rx_Only :
		UCSRB_Temp |=(USART_MSK_BIT<<RXEN);
    1dd8:	8e 81       	ldd	r24, Y+6	; 0x06
    1dda:	80 61       	ori	r24, 0x10	; 16
    1ddc:	8e 83       	std	Y+6, r24	; 0x06
    1dde:	03 c0       	rjmp	.+6      	; 0x1de6 <USART_enuInit+0x7a>
		break;

	case USART_Tx_Rx:
		UCSRB_Temp |=(USART_MSK_BIT<<RXEN)|(USART_MSK_BIT<<TXEN);
    1de0:	8e 81       	ldd	r24, Y+6	; 0x06
    1de2:	88 61       	ori	r24, 0x18	; 24
    1de4:	8e 83       	std	Y+6, r24	; 0x06
		break;

	}//End of switch( USART0.EnableMode ).


	switch( USART0.CommunicationMode )
    1de6:	80 91 6b 01 	lds	r24, 0x016B
    1dea:	e8 2f       	mov	r30, r24
    1dec:	f0 e0       	ldi	r31, 0x00	; 0
    1dee:	fb 8b       	std	Y+19, r31	; 0x13
    1df0:	ea 8b       	std	Y+18, r30	; 0x12
    1df2:	2a 89       	ldd	r18, Y+18	; 0x12
    1df4:	3b 89       	ldd	r19, Y+19	; 0x13
    1df6:	21 30       	cpi	r18, 0x01	; 1
    1df8:	31 05       	cpc	r19, r1
    1dfa:	d9 f1       	breq	.+118    	; 0x1e72 <USART_enuInit+0x106>
    1dfc:	8a 89       	ldd	r24, Y+18	; 0x12
    1dfe:	9b 89       	ldd	r25, Y+19	; 0x13
    1e00:	82 30       	cpi	r24, 0x02	; 2
    1e02:	91 05       	cpc	r25, r1
    1e04:	09 f4       	brne	.+2      	; 0x1e08 <USART_enuInit+0x9c>
    1e06:	68 c0       	rjmp	.+208    	; 0x1ed8 <USART_enuInit+0x16c>
    1e08:	ea 89       	ldd	r30, Y+18	; 0x12
    1e0a:	fb 89       	ldd	r31, Y+19	; 0x13
    1e0c:	30 97       	sbiw	r30, 0x00	; 0
    1e0e:	09 f0       	breq	.+2      	; 0x1e12 <USART_enuInit+0xa6>
    1e10:	a3 c0       	rjmp	.+326    	; 0x1f58 <USART_enuInit+0x1ec>

	case USART_Async_NormalSpeed :
		/*1.Set USART for Async. Mode Normal Speed
		 *U2X = 0. According to DataSheet page:143
		 */
		UBRR_Temp = ((f32)F_CPU/((16.0)*(USART0.BaudRate)))-0.5;
    1e12:	80 91 71 01 	lds	r24, 0x0171
    1e16:	90 91 72 01 	lds	r25, 0x0172
    1e1a:	cc 01       	movw	r24, r24
    1e1c:	a0 e0       	ldi	r26, 0x00	; 0
    1e1e:	b0 e0       	ldi	r27, 0x00	; 0
    1e20:	bc 01       	movw	r22, r24
    1e22:	cd 01       	movw	r24, r26
    1e24:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
    1e28:	dc 01       	movw	r26, r24
    1e2a:	cb 01       	movw	r24, r22
    1e2c:	bc 01       	movw	r22, r24
    1e2e:	cd 01       	movw	r24, r26
    1e30:	20 e0       	ldi	r18, 0x00	; 0
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	40 e8       	ldi	r20, 0x80	; 128
    1e36:	51 e4       	ldi	r21, 0x41	; 65
    1e38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e3c:	dc 01       	movw	r26, r24
    1e3e:	cb 01       	movw	r24, r22
    1e40:	9c 01       	movw	r18, r24
    1e42:	ad 01       	movw	r20, r26
    1e44:	60 e0       	ldi	r22, 0x00	; 0
    1e46:	74 e2       	ldi	r23, 0x24	; 36
    1e48:	84 e7       	ldi	r24, 0x74	; 116
    1e4a:	99 e4       	ldi	r25, 0x49	; 73
    1e4c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1e50:	dc 01       	movw	r26, r24
    1e52:	cb 01       	movw	r24, r22
    1e54:	bc 01       	movw	r22, r24
    1e56:	cd 01       	movw	r24, r26
    1e58:	20 e0       	ldi	r18, 0x00	; 0
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	40 e0       	ldi	r20, 0x00	; 0
    1e5e:	5f e3       	ldi	r21, 0x3F	; 63
    1e60:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1e64:	dc 01       	movw	r26, r24
    1e66:	cb 01       	movw	r24, r22
    1e68:	89 83       	std	Y+1, r24	; 0x01
    1e6a:	9a 83       	std	Y+2, r25	; 0x02
    1e6c:	ab 83       	std	Y+3, r26	; 0x03
    1e6e:	bc 83       	std	Y+4, r27	; 0x04
    1e70:	73 c0       	rjmp	.+230    	; 0x1f58 <USART_enuInit+0x1ec>

	case USART_Async_DoubleSpeed:
		/*1.Set USART for Async. Mode Double Speed
		 *U2X = 1. According to DataSheet page:143
		 */
		UCSRA_Temp |=(USART_MSK_BIT<<U2X);
    1e72:	8f 81       	ldd	r24, Y+7	; 0x07
    1e74:	82 60       	ori	r24, 0x02	; 2
    1e76:	8f 83       	std	Y+7, r24	; 0x07

		//MY_UBRRL    ((F_CPU/(8*USART_SPEED_MODE)/BUAD_VAL-1)&0xFF)
		UBRR_Temp = ((f32)F_CPU/((8.0)*(USART0.BaudRate)))-0.5;
    1e78:	80 91 71 01 	lds	r24, 0x0171
    1e7c:	90 91 72 01 	lds	r25, 0x0172
    1e80:	cc 01       	movw	r24, r24
    1e82:	a0 e0       	ldi	r26, 0x00	; 0
    1e84:	b0 e0       	ldi	r27, 0x00	; 0
    1e86:	bc 01       	movw	r22, r24
    1e88:	cd 01       	movw	r24, r26
    1e8a:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
    1e8e:	dc 01       	movw	r26, r24
    1e90:	cb 01       	movw	r24, r22
    1e92:	bc 01       	movw	r22, r24
    1e94:	cd 01       	movw	r24, r26
    1e96:	20 e0       	ldi	r18, 0x00	; 0
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	40 e0       	ldi	r20, 0x00	; 0
    1e9c:	51 e4       	ldi	r21, 0x41	; 65
    1e9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ea2:	dc 01       	movw	r26, r24
    1ea4:	cb 01       	movw	r24, r22
    1ea6:	9c 01       	movw	r18, r24
    1ea8:	ad 01       	movw	r20, r26
    1eaa:	60 e0       	ldi	r22, 0x00	; 0
    1eac:	74 e2       	ldi	r23, 0x24	; 36
    1eae:	84 e7       	ldi	r24, 0x74	; 116
    1eb0:	99 e4       	ldi	r25, 0x49	; 73
    1eb2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1eb6:	dc 01       	movw	r26, r24
    1eb8:	cb 01       	movw	r24, r22
    1eba:	bc 01       	movw	r22, r24
    1ebc:	cd 01       	movw	r24, r26
    1ebe:	20 e0       	ldi	r18, 0x00	; 0
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	40 e0       	ldi	r20, 0x00	; 0
    1ec4:	5f e3       	ldi	r21, 0x3F	; 63
    1ec6:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1eca:	dc 01       	movw	r26, r24
    1ecc:	cb 01       	movw	r24, r22
    1ece:	89 83       	std	Y+1, r24	; 0x01
    1ed0:	9a 83       	std	Y+2, r25	; 0x02
    1ed2:	ab 83       	std	Y+3, r26	; 0x03
    1ed4:	bc 83       	std	Y+4, r27	; 0x04
    1ed6:	40 c0       	rjmp	.+128    	; 0x1f58 <USART_enuInit+0x1ec>
		break;

	case USART_Sync:
		//_For Synchronous Operation.
		UCSRC_Temp |=(USART_MSK_BIT<<UMSEL);
    1ed8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eda:	80 64       	ori	r24, 0x40	; 64
    1edc:	8d 83       	std	Y+5, r24	; 0x05
		UBRR_Temp = ((f32)F_CPU/((2.0)*(USART0.BaudRate)))-0.5;
    1ede:	80 91 71 01 	lds	r24, 0x0171
    1ee2:	90 91 72 01 	lds	r25, 0x0172
    1ee6:	cc 01       	movw	r24, r24
    1ee8:	a0 e0       	ldi	r26, 0x00	; 0
    1eea:	b0 e0       	ldi	r27, 0x00	; 0
    1eec:	bc 01       	movw	r22, r24
    1eee:	cd 01       	movw	r24, r26
    1ef0:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
    1ef4:	9b 01       	movw	r18, r22
    1ef6:	ac 01       	movw	r20, r24
    1ef8:	ca 01       	movw	r24, r20
    1efa:	b9 01       	movw	r22, r18
    1efc:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1f00:	dc 01       	movw	r26, r24
    1f02:	cb 01       	movw	r24, r22
    1f04:	9c 01       	movw	r18, r24
    1f06:	ad 01       	movw	r20, r26
    1f08:	60 e0       	ldi	r22, 0x00	; 0
    1f0a:	74 e2       	ldi	r23, 0x24	; 36
    1f0c:	84 e7       	ldi	r24, 0x74	; 116
    1f0e:	99 e4       	ldi	r25, 0x49	; 73
    1f10:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f14:	dc 01       	movw	r26, r24
    1f16:	cb 01       	movw	r24, r22
    1f18:	bc 01       	movw	r22, r24
    1f1a:	cd 01       	movw	r24, r26
    1f1c:	20 e0       	ldi	r18, 0x00	; 0
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	40 e0       	ldi	r20, 0x00	; 0
    1f22:	5f e3       	ldi	r21, 0x3F	; 63
    1f24:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1f28:	dc 01       	movw	r26, r24
    1f2a:	cb 01       	movw	r24, r22
    1f2c:	89 83       	std	Y+1, r24	; 0x01
    1f2e:	9a 83       	std	Y+2, r25	; 0x02
    1f30:	ab 83       	std	Y+3, r26	; 0x03
    1f32:	bc 83       	std	Y+4, r27	; 0x04

		 switch(USART0.ClockPolarity)
    1f34:	80 91 70 01 	lds	r24, 0x0170
    1f38:	28 2f       	mov	r18, r24
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	39 8b       	std	Y+17, r19	; 0x11
    1f3e:	28 8b       	std	Y+16, r18	; 0x10
    1f40:	88 89       	ldd	r24, Y+16	; 0x10
    1f42:	99 89       	ldd	r25, Y+17	; 0x11
    1f44:	00 97       	sbiw	r24, 0x00	; 0
    1f46:	41 f0       	breq	.+16     	; 0x1f58 <USART_enuInit+0x1ec>
    1f48:	e8 89       	ldd	r30, Y+16	; 0x10
    1f4a:	f9 89       	ldd	r31, Y+17	; 0x11
    1f4c:	e1 30       	cpi	r30, 0x01	; 1
    1f4e:	f1 05       	cpc	r31, r1
    1f50:	19 f4       	brne	.+6      	; 0x1f58 <USART_enuInit+0x1ec>
		{
		case USART_SmapleOnFalling:
			break;

		case USART_SmapleOnRasing:
			UCSRC_Temp |=(USART_MSK_BIT<<UCPOL);
    1f52:	8d 81       	ldd	r24, Y+5	; 0x05
    1f54:	81 60       	ori	r24, 0x01	; 1
    1f56:	8d 83       	std	Y+5, r24	; 0x05

	default:
		break;
	}//End of switch( USART0.CommunicationMode).

	switch(USART0.CommunicationTerminal)
    1f58:	80 91 6c 01 	lds	r24, 0x016C
    1f5c:	28 2f       	mov	r18, r24
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	3f 87       	std	Y+15, r19	; 0x0f
    1f62:	2e 87       	std	Y+14, r18	; 0x0e
    1f64:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f66:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f68:	00 97       	sbiw	r24, 0x00	; 0
    1f6a:	41 f0       	breq	.+16     	; 0x1f7c <USART_enuInit+0x210>
    1f6c:	ee 85       	ldd	r30, Y+14	; 0x0e
    1f6e:	ff 85       	ldd	r31, Y+15	; 0x0f
    1f70:	e1 30       	cpi	r30, 0x01	; 1
    1f72:	f1 05       	cpc	r31, r1
    1f74:	19 f4       	brne	.+6      	; 0x1f7c <USART_enuInit+0x210>
		//Already Done.
		break;

	case USART_MultiProcessor:
		//_To enable the Multi-processor Communication mode.
		UCSRA_Temp |=(USART_MSK_BIT<<MPCM);
    1f76:	8f 81       	ldd	r24, Y+7	; 0x07
    1f78:	81 60       	ori	r24, 0x01	; 1
    1f7a:	8f 83       	std	Y+7, r24	; 0x07
	default:
		break;

	}//End of switch USART0.CommunicationTerminal.

	switch(USART0.InterruptSources)
    1f7c:	80 91 6d 01 	lds	r24, 0x016D
    1f80:	28 2f       	mov	r18, r24
    1f82:	30 e0       	ldi	r19, 0x00	; 0
    1f84:	3d 87       	std	Y+13, r19	; 0x0d
    1f86:	2c 87       	std	Y+12, r18	; 0x0c
    1f88:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f8a:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f8c:	83 30       	cpi	r24, 0x03	; 3
    1f8e:	91 05       	cpc	r25, r1
    1f90:	69 f1       	breq	.+90     	; 0x1fec <USART_enuInit+0x280>
    1f92:	ec 85       	ldd	r30, Y+12	; 0x0c
    1f94:	fd 85       	ldd	r31, Y+13	; 0x0d
    1f96:	e4 30       	cpi	r30, 0x04	; 4
    1f98:	f1 05       	cpc	r31, r1
    1f9a:	5c f4       	brge	.+22     	; 0x1fb2 <USART_enuInit+0x246>
    1f9c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1f9e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1fa0:	21 30       	cpi	r18, 0x01	; 1
    1fa2:	31 05       	cpc	r19, r1
    1fa4:	d9 f0       	breq	.+54     	; 0x1fdc <USART_enuInit+0x270>
    1fa6:	8c 85       	ldd	r24, Y+12	; 0x0c
    1fa8:	9d 85       	ldd	r25, Y+13	; 0x0d
    1faa:	82 30       	cpi	r24, 0x02	; 2
    1fac:	91 05       	cpc	r25, r1
    1fae:	d4 f4       	brge	.+52     	; 0x1fe4 <USART_enuInit+0x278>
    1fb0:	34 c0       	rjmp	.+104    	; 0x201a <USART_enuInit+0x2ae>
    1fb2:	ec 85       	ldd	r30, Y+12	; 0x0c
    1fb4:	fd 85       	ldd	r31, Y+13	; 0x0d
    1fb6:	e5 30       	cpi	r30, 0x05	; 5
    1fb8:	f1 05       	cpc	r31, r1
    1fba:	21 f1       	breq	.+72     	; 0x2004 <USART_enuInit+0x298>
    1fbc:	2c 85       	ldd	r18, Y+12	; 0x0c
    1fbe:	3d 85       	ldd	r19, Y+13	; 0x0d
    1fc0:	25 30       	cpi	r18, 0x05	; 5
    1fc2:	31 05       	cpc	r19, r1
    1fc4:	dc f0       	brlt	.+54     	; 0x1ffc <USART_enuInit+0x290>
    1fc6:	8c 85       	ldd	r24, Y+12	; 0x0c
    1fc8:	9d 85       	ldd	r25, Y+13	; 0x0d
    1fca:	86 30       	cpi	r24, 0x06	; 6
    1fcc:	91 05       	cpc	r25, r1
    1fce:	f1 f0       	breq	.+60     	; 0x200c <USART_enuInit+0x2a0>
    1fd0:	ec 85       	ldd	r30, Y+12	; 0x0c
    1fd2:	fd 85       	ldd	r31, Y+13	; 0x0d
    1fd4:	e7 30       	cpi	r30, 0x07	; 7
    1fd6:	f1 05       	cpc	r31, r1
    1fd8:	e9 f0       	breq	.+58     	; 0x2014 <USART_enuInit+0x2a8>
    1fda:	1f c0       	rjmp	.+62     	; 0x201a <USART_enuInit+0x2ae>
	{
	case USART_InterruptDisable :
		break;

	case USART_RxCompletEnable:
		UCSRB_Temp |=(USART_MSK_BIT<<RXCIE);
    1fdc:	8e 81       	ldd	r24, Y+6	; 0x06
    1fde:	80 68       	ori	r24, 0x80	; 128
    1fe0:	8e 83       	std	Y+6, r24	; 0x06
    1fe2:	1b c0       	rjmp	.+54     	; 0x201a <USART_enuInit+0x2ae>
		break;

	case USART_TxCompletEnable :
		UCSRB_Temp |=(USART_MSK_BIT<<TXCIE);
    1fe4:	8e 81       	ldd	r24, Y+6	; 0x06
    1fe6:	80 64       	ori	r24, 0x40	; 64
    1fe8:	8e 83       	std	Y+6, r24	; 0x06
    1fea:	17 c0       	rjmp	.+46     	; 0x201a <USART_enuInit+0x2ae>
		break;

	case USART_UDR_EmptyEnable :
		UCSRB |=(USART_MSK_BIT<<UDRIE);
    1fec:	aa e2       	ldi	r26, 0x2A	; 42
    1fee:	b0 e0       	ldi	r27, 0x00	; 0
    1ff0:	ea e2       	ldi	r30, 0x2A	; 42
    1ff2:	f0 e0       	ldi	r31, 0x00	; 0
    1ff4:	80 81       	ld	r24, Z
    1ff6:	80 62       	ori	r24, 0x20	; 32
    1ff8:	8c 93       	st	X, r24
    1ffa:	0f c0       	rjmp	.+30     	; 0x201a <USART_enuInit+0x2ae>
		break;

	case USART_RxComplet_TxComplet_Enable:
		UCSRB_Temp |=(USART_MSK_BIT<<RXCIE) | (USART_MSK_BIT<<TXCIE);
    1ffc:	8e 81       	ldd	r24, Y+6	; 0x06
    1ffe:	80 6c       	ori	r24, 0xC0	; 192
    2000:	8e 83       	std	Y+6, r24	; 0x06
    2002:	0b c0       	rjmp	.+22     	; 0x201a <USART_enuInit+0x2ae>
		break;

	case USART_RxComplet_UDREmpty_Enable:
		UCSRB_Temp |=(USART_MSK_BIT<<RXCIE)|(USART_MSK_BIT<<UDRIE);
    2004:	8e 81       	ldd	r24, Y+6	; 0x06
    2006:	80 6a       	ori	r24, 0xA0	; 160
    2008:	8e 83       	std	Y+6, r24	; 0x06
    200a:	07 c0       	rjmp	.+14     	; 0x201a <USART_enuInit+0x2ae>
		break;

	case USART_TxComplet_UDREmpty_Enable  :
		UCSRB_Temp |=(USART_MSK_BIT<<TXCIE)|(USART_MSK_BIT<<UDRIE);
    200c:	8e 81       	ldd	r24, Y+6	; 0x06
    200e:	80 66       	ori	r24, 0x60	; 96
    2010:	8e 83       	std	Y+6, r24	; 0x06
    2012:	03 c0       	rjmp	.+6      	; 0x201a <USART_enuInit+0x2ae>
		break;

	case USART_TxComplet_RxComplet_UDR_EmptyEnable:
		UCSRB_Temp |=(USART_MSK_BIT<<TXCIE)|(USART_MSK_BIT<<RXCIE)|(USART_MSK_BIT<<UDRIE);
    2014:	8e 81       	ldd	r24, Y+6	; 0x06
    2016:	80 6e       	ori	r24, 0xE0	; 224
    2018:	8e 83       	std	Y+6, r24	; 0x06
	/*******************************************
	 * -Character Size in Frame configuration
	 *  Using bits. UCSZ1 UCSZ0 in UCSRC Regis.
	 *  and UCSZ2 in UCSRB Regis.
	 *******************************************/
	switch(USART0.DataFrame)
    201a:	80 91 6e 01 	lds	r24, 0x016E
    201e:	28 2f       	mov	r18, r24
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	3b 87       	std	Y+11, r19	; 0x0b
    2024:	2a 87       	std	Y+10, r18	; 0x0a
    2026:	8a 85       	ldd	r24, Y+10	; 0x0a
    2028:	9b 85       	ldd	r25, Y+11	; 0x0b
    202a:	82 30       	cpi	r24, 0x02	; 2
    202c:	91 05       	cpc	r25, r1
    202e:	f9 f0       	breq	.+62     	; 0x206e <USART_enuInit+0x302>
    2030:	ea 85       	ldd	r30, Y+10	; 0x0a
    2032:	fb 85       	ldd	r31, Y+11	; 0x0b
    2034:	e3 30       	cpi	r30, 0x03	; 3
    2036:	f1 05       	cpc	r31, r1
    2038:	5c f4       	brge	.+22     	; 0x2050 <USART_enuInit+0x2e4>
    203a:	2a 85       	ldd	r18, Y+10	; 0x0a
    203c:	3b 85       	ldd	r19, Y+11	; 0x0b
    203e:	21 15       	cp	r18, r1
    2040:	31 05       	cpc	r19, r1
    2042:	19 f1       	breq	.+70     	; 0x208a <USART_enuInit+0x31e>
    2044:	8a 85       	ldd	r24, Y+10	; 0x0a
    2046:	9b 85       	ldd	r25, Y+11	; 0x0b
    2048:	81 30       	cpi	r24, 0x01	; 1
    204a:	91 05       	cpc	r25, r1
    204c:	61 f0       	breq	.+24     	; 0x2066 <USART_enuInit+0x2fa>
    204e:	1d c0       	rjmp	.+58     	; 0x208a <USART_enuInit+0x31e>
    2050:	ea 85       	ldd	r30, Y+10	; 0x0a
    2052:	fb 85       	ldd	r31, Y+11	; 0x0b
    2054:	e3 30       	cpi	r30, 0x03	; 3
    2056:	f1 05       	cpc	r31, r1
    2058:	71 f0       	breq	.+28     	; 0x2076 <USART_enuInit+0x30a>
    205a:	2a 85       	ldd	r18, Y+10	; 0x0a
    205c:	3b 85       	ldd	r19, Y+11	; 0x0b
    205e:	24 30       	cpi	r18, 0x04	; 4
    2060:	31 05       	cpc	r19, r1
    2062:	69 f0       	breq	.+26     	; 0x207e <USART_enuInit+0x312>
    2064:	12 c0       	rjmp	.+36     	; 0x208a <USART_enuInit+0x31e>
	{
	case USART_5bitData :
		break;
	case USART_6bitData :
		UCSRC_Temp |=(USART_MSK_BIT<<UCSZ0);
    2066:	8d 81       	ldd	r24, Y+5	; 0x05
    2068:	82 60       	ori	r24, 0x02	; 2
    206a:	8d 83       	std	Y+5, r24	; 0x05
    206c:	0e c0       	rjmp	.+28     	; 0x208a <USART_enuInit+0x31e>
		break;
	case USART_7bitData :
		UCSRC_Temp |=(USART_MSK_BIT<<UCSZ1);
    206e:	8d 81       	ldd	r24, Y+5	; 0x05
    2070:	84 60       	ori	r24, 0x04	; 4
    2072:	8d 83       	std	Y+5, r24	; 0x05
    2074:	0a c0       	rjmp	.+20     	; 0x208a <USART_enuInit+0x31e>
		break;
	case USART_8bitData :
		UCSRC_Temp |=(USART_MSK_BIT<<UCSZ0)|(USART_MSK_BIT<<UCSZ1);
    2076:	8d 81       	ldd	r24, Y+5	; 0x05
    2078:	86 60       	ori	r24, 0x06	; 6
    207a:	8d 83       	std	Y+5, r24	; 0x05
    207c:	06 c0       	rjmp	.+12     	; 0x208a <USART_enuInit+0x31e>
		break;
	case USART_9bitData :
		UCSRC_Temp |=(USART_MSK_BIT<<UCSZ0)|(USART_MSK_BIT<<UCSZ1);
    207e:	8d 81       	ldd	r24, Y+5	; 0x05
    2080:	86 60       	ori	r24, 0x06	; 6
    2082:	8d 83       	std	Y+5, r24	; 0x05
		UCSRB_Temp |=(USART_MSK_BIT<<UCSZ2);
    2084:	8e 81       	ldd	r24, Y+6	; 0x06
    2086:	84 60       	ori	r24, 0x04	; 4
    2088:	8e 83       	std	Y+6, r24	; 0x06


	/*******************************************
	 *_Parity and  Stop Bit Handling.
	 *******************************************/
	switch(USART0.FrameControl)
    208a:	80 91 6f 01 	lds	r24, 0x016F
    208e:	e8 2f       	mov	r30, r24
    2090:	f0 e0       	ldi	r31, 0x00	; 0
    2092:	f9 87       	std	Y+9, r31	; 0x09
    2094:	e8 87       	std	Y+8, r30	; 0x08
    2096:	28 85       	ldd	r18, Y+8	; 0x08
    2098:	39 85       	ldd	r19, Y+9	; 0x09
    209a:	22 30       	cpi	r18, 0x02	; 2
    209c:	31 05       	cpc	r19, r1
    209e:	19 f1       	breq	.+70     	; 0x20e6 <USART_enuInit+0x37a>
    20a0:	88 85       	ldd	r24, Y+8	; 0x08
    20a2:	99 85       	ldd	r25, Y+9	; 0x09
    20a4:	83 30       	cpi	r24, 0x03	; 3
    20a6:	91 05       	cpc	r25, r1
    20a8:	54 f4       	brge	.+20     	; 0x20be <USART_enuInit+0x352>
    20aa:	e8 85       	ldd	r30, Y+8	; 0x08
    20ac:	f9 85       	ldd	r31, Y+9	; 0x09
    20ae:	30 97       	sbiw	r30, 0x00	; 0
    20b0:	79 f1       	breq	.+94     	; 0x2110 <USART_enuInit+0x3a4>
    20b2:	28 85       	ldd	r18, Y+8	; 0x08
    20b4:	39 85       	ldd	r19, Y+9	; 0x09
    20b6:	21 30       	cpi	r18, 0x01	; 1
    20b8:	31 05       	cpc	r19, r1
    20ba:	89 f0       	breq	.+34     	; 0x20de <USART_enuInit+0x372>
    20bc:	29 c0       	rjmp	.+82     	; 0x2110 <USART_enuInit+0x3a4>
    20be:	88 85       	ldd	r24, Y+8	; 0x08
    20c0:	99 85       	ldd	r25, Y+9	; 0x09
    20c2:	84 30       	cpi	r24, 0x04	; 4
    20c4:	91 05       	cpc	r25, r1
    20c6:	d1 f0       	breq	.+52     	; 0x20fc <USART_enuInit+0x390>
    20c8:	e8 85       	ldd	r30, Y+8	; 0x08
    20ca:	f9 85       	ldd	r31, Y+9	; 0x09
    20cc:	e4 30       	cpi	r30, 0x04	; 4
    20ce:	f1 05       	cpc	r31, r1
    20d0:	74 f0       	brlt	.+28     	; 0x20ee <USART_enuInit+0x382>
    20d2:	28 85       	ldd	r18, Y+8	; 0x08
    20d4:	39 85       	ldd	r19, Y+9	; 0x09
    20d6:	25 30       	cpi	r18, 0x05	; 5
    20d8:	31 05       	cpc	r19, r1
    20da:	a1 f0       	breq	.+40     	; 0x2104 <USART_enuInit+0x398>
    20dc:	19 c0       	rjmp	.+50     	; 0x2110 <USART_enuInit+0x3a4>
	{
	case USART_ParityDisable_1stopBit:
		break;

	case USART_ParityDisable_2stopBit:
		UCSRC_Temp |=(USART_MSK_BIT<<USBS);
    20de:	8d 81       	ldd	r24, Y+5	; 0x05
    20e0:	88 60       	ori	r24, 0x08	; 8
    20e2:	8d 83       	std	Y+5, r24	; 0x05
    20e4:	15 c0       	rjmp	.+42     	; 0x2110 <USART_enuInit+0x3a4>
		break;
	case USART_ParityEven_1stopBit:
		UCSRC_Temp |=(USART_MSK_BIT<<UPM1);
    20e6:	8d 81       	ldd	r24, Y+5	; 0x05
    20e8:	80 62       	ori	r24, 0x20	; 32
    20ea:	8d 83       	std	Y+5, r24	; 0x05
    20ec:	11 c0       	rjmp	.+34     	; 0x2110 <USART_enuInit+0x3a4>
		break;
	case USART_ParityEven_2stopBit:
		UCSRC_Temp |=(USART_MSK_BIT<<UPM1);
    20ee:	8d 81       	ldd	r24, Y+5	; 0x05
    20f0:	80 62       	ori	r24, 0x20	; 32
    20f2:	8d 83       	std	Y+5, r24	; 0x05
		UCSRC_Temp |=(USART_MSK_BIT<<USBS);
    20f4:	8d 81       	ldd	r24, Y+5	; 0x05
    20f6:	88 60       	ori	r24, 0x08	; 8
    20f8:	8d 83       	std	Y+5, r24	; 0x05
    20fa:	0a c0       	rjmp	.+20     	; 0x2110 <USART_enuInit+0x3a4>
		break;
	case USART_ParityOdd_1stopBit:
		UCSRC_Temp |=(USART_MSK_BIT<<UPM0)|(USART_MSK_BIT<<UPM1);
    20fc:	8d 81       	ldd	r24, Y+5	; 0x05
    20fe:	80 63       	ori	r24, 0x30	; 48
    2100:	8d 83       	std	Y+5, r24	; 0x05
    2102:	06 c0       	rjmp	.+12     	; 0x2110 <USART_enuInit+0x3a4>
		break;
	case USART_ParityOdd_2stopBit:
		UCSRC_Temp |=(USART_MSK_BIT<<UPM0)|(USART_MSK_BIT<<UPM1);
    2104:	8d 81       	ldd	r24, Y+5	; 0x05
    2106:	80 63       	ori	r24, 0x30	; 48
    2108:	8d 83       	std	Y+5, r24	; 0x05
		UCSRC_Temp |=(USART_MSK_BIT<<USBS);
    210a:	8d 81       	ldd	r24, Y+5	; 0x05
    210c:	88 60       	ori	r24, 0x08	; 8
    210e:	8d 83       	std	Y+5, r24	; 0x05


	}


	UCSRC_Temp |=(USART_MSK_BIT<<URSEL);
    2110:	8d 81       	ldd	r24, Y+5	; 0x05
    2112:	80 68       	ori	r24, 0x80	; 128
    2114:	8d 83       	std	Y+5, r24	; 0x05


	UBRRL = (u8)UBRR_Temp;
    2116:	09 e2       	ldi	r16, 0x29	; 41
    2118:	10 e0       	ldi	r17, 0x00	; 0
    211a:	69 81       	ldd	r22, Y+1	; 0x01
    211c:	7a 81       	ldd	r23, Y+2	; 0x02
    211e:	8b 81       	ldd	r24, Y+3	; 0x03
    2120:	9c 81       	ldd	r25, Y+4	; 0x04
    2122:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2126:	dc 01       	movw	r26, r24
    2128:	cb 01       	movw	r24, r22
    212a:	f8 01       	movw	r30, r16
    212c:	80 83       	st	Z, r24

	//((((u16)UBRR_Temp)>>8)|0X0F)
    UBRRH = 0x00;
    212e:	e0 e4       	ldi	r30, 0x40	; 64
    2130:	f0 e0       	ldi	r31, 0x00	; 0
    2132:	10 82       	st	Z, r1
	UCSRA= UCSRA_Temp;
    2134:	eb e2       	ldi	r30, 0x2B	; 43
    2136:	f0 e0       	ldi	r31, 0x00	; 0
    2138:	8f 81       	ldd	r24, Y+7	; 0x07
    213a:	80 83       	st	Z, r24


	UCSRC= UCSRC_Temp;
    213c:	e0 e4       	ldi	r30, 0x40	; 64
    213e:	f0 e0       	ldi	r31, 0x00	; 0
    2140:	8d 81       	ldd	r24, Y+5	; 0x05
    2142:	80 83       	st	Z, r24
	UCSRB= UCSRB_Temp;
    2144:	ea e2       	ldi	r30, 0x2A	; 42
    2146:	f0 e0       	ldi	r31, 0x00	; 0
    2148:	8e 81       	ldd	r24, Y+6	; 0x06
    214a:	80 83       	st	Z, r24


}//End of UART_enuInit().
    214c:	65 96       	adiw	r28, 0x15	; 21
    214e:	0f b6       	in	r0, 0x3f	; 63
    2150:	f8 94       	cli
    2152:	de bf       	out	0x3e, r29	; 62
    2154:	0f be       	out	0x3f, r0	; 63
    2156:	cd bf       	out	0x3d, r28	; 61
    2158:	cf 91       	pop	r28
    215a:	df 91       	pop	r29
    215c:	1f 91       	pop	r17
    215e:	0f 91       	pop	r16
    2160:	08 95       	ret

00002162 <UART_enuSendByte>:

ES_t UART_enuSendByte(u8 Copy_u8Data)
{
    2162:	df 93       	push	r29
    2164:	cf 93       	push	r28
    2166:	00 d0       	rcall	.+0      	; 0x2168 <UART_enuSendByte+0x6>
    2168:	cd b7       	in	r28, 0x3d	; 61
    216a:	de b7       	in	r29, 0x3e	; 62
    216c:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState  = ES_NOK ;
    216e:	19 82       	std	Y+1, r1	; 0x01

	// Poll the for the UDRE
	while( !((UCSRA>>UDRE)&1) );
    2170:	eb e2       	ldi	r30, 0x2B	; 43
    2172:	f0 e0       	ldi	r31, 0x00	; 0
    2174:	80 81       	ld	r24, Z
    2176:	82 95       	swap	r24
    2178:	86 95       	lsr	r24
    217a:	87 70       	andi	r24, 0x07	; 7
    217c:	88 2f       	mov	r24, r24
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	81 70       	andi	r24, 0x01	; 1
    2182:	90 70       	andi	r25, 0x00	; 0
    2184:	00 97       	sbiw	r24, 0x00	; 0
    2186:	a1 f3       	breq	.-24     	; 0x2170 <UART_enuSendByte+0xe>

	UDR = Copy_u8Data  ;
    2188:	ec e2       	ldi	r30, 0x2C	; 44
    218a:	f0 e0       	ldi	r31, 0x00	; 0
    218c:	8a 81       	ldd	r24, Y+2	; 0x02
    218e:	80 83       	st	Z, r24

	//Check for the Completion of Transmittioin.
	if( (UCSRA>>TXC)&1 )
    2190:	eb e2       	ldi	r30, 0x2B	; 43
    2192:	f0 e0       	ldi	r31, 0x00	; 0
    2194:	80 81       	ld	r24, Z
    2196:	82 95       	swap	r24
    2198:	86 95       	lsr	r24
    219a:	86 95       	lsr	r24
    219c:	83 70       	andi	r24, 0x03	; 3
    219e:	88 2f       	mov	r24, r24
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	81 70       	andi	r24, 0x01	; 1
    21a4:	90 70       	andi	r25, 0x00	; 0
    21a6:	88 23       	and	r24, r24
    21a8:	49 f0       	breq	.+18     	; 0x21bc <UART_enuSendByte+0x5a>
	{
		//Clear the flag.
		UCSRA |=(USART_MSK_BIT<<TXC);
    21aa:	ab e2       	ldi	r26, 0x2B	; 43
    21ac:	b0 e0       	ldi	r27, 0x00	; 0
    21ae:	eb e2       	ldi	r30, 0x2B	; 43
    21b0:	f0 e0       	ldi	r31, 0x00	; 0
    21b2:	80 81       	ld	r24, Z
    21b4:	80 64       	ori	r24, 0x40	; 64
    21b6:	8c 93       	st	X, r24

		Local_enuErrorState = ES_OK ;
    21b8:	81 e0       	ldi	r24, 0x01	; 1
    21ba:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		//Do nothing.
	}

	return Local_enuErrorState  ;
    21bc:	89 81       	ldd	r24, Y+1	; 0x01
}//End of UART_enuSendByte().
    21be:	0f 90       	pop	r0
    21c0:	0f 90       	pop	r0
    21c2:	cf 91       	pop	r28
    21c4:	df 91       	pop	r29
    21c6:	08 95       	ret

000021c8 <UART_enuRecieveByte>:


ES_t UART_enuRecieveByte( u8* Copy_u8Data )
{
    21c8:	df 93       	push	r29
    21ca:	cf 93       	push	r28
    21cc:	00 d0       	rcall	.+0      	; 0x21ce <UART_enuRecieveByte+0x6>
    21ce:	0f 92       	push	r0
    21d0:	cd b7       	in	r28, 0x3d	; 61
    21d2:	de b7       	in	r29, 0x3e	; 62
    21d4:	9b 83       	std	Y+3, r25	; 0x03
    21d6:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState  = ES_NOK ;
    21d8:	19 82       	std	Y+1, r1	; 0x01

	if(  Copy_u8Data != NULL  )
    21da:	8a 81       	ldd	r24, Y+2	; 0x02
    21dc:	9b 81       	ldd	r25, Y+3	; 0x03
    21de:	00 97       	sbiw	r24, 0x00	; 0
    21e0:	71 f0       	breq	.+28     	; 0x21fe <UART_enuRecieveByte+0x36>
	{
		//There is NO Data to Read.
		while( !(( UCSRA>>RXC)&1) );
    21e2:	eb e2       	ldi	r30, 0x2B	; 43
    21e4:	f0 e0       	ldi	r31, 0x00	; 0
    21e6:	80 81       	ld	r24, Z
    21e8:	88 23       	and	r24, r24
    21ea:	dc f7       	brge	.-10     	; 0x21e2 <UART_enuRecieveByte+0x1a>

		*Copy_u8Data = UDR ;
    21ec:	ec e2       	ldi	r30, 0x2C	; 44
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	80 81       	ld	r24, Z
    21f2:	ea 81       	ldd	r30, Y+2	; 0x02
    21f4:	fb 81       	ldd	r31, Y+3	; 0x03
    21f6:	80 83       	st	Z, r24

		Local_enuErrorState  = ES_OK ;
    21f8:	81 e0       	ldi	r24, 0x01	; 1
    21fa:	89 83       	std	Y+1, r24	; 0x01
    21fc:	02 c0       	rjmp	.+4      	; 0x2202 <UART_enuRecieveByte+0x3a>
	}
	else
	{
		Local_enuErrorState  = ES_NULL_POINTER;
    21fe:	82 e0       	ldi	r24, 0x02	; 2
    2200:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState  ;
    2202:	89 81       	ldd	r24, Y+1	; 0x01
}//End of UART_enuRecieveByte().
    2204:	0f 90       	pop	r0
    2206:	0f 90       	pop	r0
    2208:	0f 90       	pop	r0
    220a:	cf 91       	pop	r28
    220c:	df 91       	pop	r29
    220e:	08 95       	ret

00002210 <UART_enuSendString>:

//          UART_enuSendString( arr );

ES_t UART_enuSendString( const u8* Copy_pcData)
{
    2210:	df 93       	push	r29
    2212:	cf 93       	push	r28
    2214:	00 d0       	rcall	.+0      	; 0x2216 <UART_enuSendString+0x6>
    2216:	0f 92       	push	r0
    2218:	cd b7       	in	r28, 0x3d	; 61
    221a:	de b7       	in	r29, 0x3e	; 62
    221c:	9b 83       	std	Y+3, r25	; 0x03
    221e:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState  = ES_NOK ;
    2220:	19 82       	std	Y+1, r1	; 0x01

	if( Copy_pcData != NULL )
    2222:	8a 81       	ldd	r24, Y+2	; 0x02
    2224:	9b 81       	ldd	r25, Y+3	; 0x03
    2226:	00 97       	sbiw	r24, 0x00	; 0
    2228:	01 f1       	breq	.+64     	; 0x226a <UART_enuSendString+0x5a>
    222a:	17 c0       	rjmp	.+46     	; 0x225a <UART_enuSendString+0x4a>
	{

		while( *Copy_pcData != '\0')
		{

			while( !((UCSRA>>UDRE)&1) );
    222c:	eb e2       	ldi	r30, 0x2B	; 43
    222e:	f0 e0       	ldi	r31, 0x00	; 0
    2230:	80 81       	ld	r24, Z
    2232:	82 95       	swap	r24
    2234:	86 95       	lsr	r24
    2236:	87 70       	andi	r24, 0x07	; 7
    2238:	88 2f       	mov	r24, r24
    223a:	90 e0       	ldi	r25, 0x00	; 0
    223c:	81 70       	andi	r24, 0x01	; 1
    223e:	90 70       	andi	r25, 0x00	; 0
    2240:	00 97       	sbiw	r24, 0x00	; 0
    2242:	a1 f3       	breq	.-24     	; 0x222c <UART_enuSendString+0x1c>

			UDR = *Copy_pcData ;
    2244:	ac e2       	ldi	r26, 0x2C	; 44
    2246:	b0 e0       	ldi	r27, 0x00	; 0
    2248:	ea 81       	ldd	r30, Y+2	; 0x02
    224a:	fb 81       	ldd	r31, Y+3	; 0x03
    224c:	80 81       	ld	r24, Z
    224e:	8c 93       	st	X, r24

			Copy_pcData++ ;
    2250:	8a 81       	ldd	r24, Y+2	; 0x02
    2252:	9b 81       	ldd	r25, Y+3	; 0x03
    2254:	01 96       	adiw	r24, 0x01	; 1
    2256:	9b 83       	std	Y+3, r25	; 0x03
    2258:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState  = ES_NOK ;

	if( Copy_pcData != NULL )
	{

		while( *Copy_pcData != '\0')
    225a:	ea 81       	ldd	r30, Y+2	; 0x02
    225c:	fb 81       	ldd	r31, Y+3	; 0x03
    225e:	80 81       	ld	r24, Z
    2260:	88 23       	and	r24, r24
    2262:	21 f7       	brne	.-56     	; 0x222c <UART_enuSendString+0x1c>

			Copy_pcData++ ;

		}

		Local_enuErrorState  = ES_OK ;
    2264:	81 e0       	ldi	r24, 0x01	; 1
    2266:	89 83       	std	Y+1, r24	; 0x01
    2268:	02 c0       	rjmp	.+4      	; 0x226e <UART_enuSendString+0x5e>
	}
	else
	{
		Local_enuErrorState  = ES_NULL_POINTER ;
    226a:	82 e0       	ldi	r24, 0x02	; 2
    226c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState  ;
    226e:	89 81       	ldd	r24, Y+1	; 0x01
}//End of UART_enuRecieveByte().
    2270:	0f 90       	pop	r0
    2272:	0f 90       	pop	r0
    2274:	0f 90       	pop	r0
    2276:	cf 91       	pop	r28
    2278:	df 91       	pop	r29
    227a:	08 95       	ret

0000227c <UART_enuReceiveString>:



ES_t UART_enuReceiveString(u8*  Copy_pcData)
{
    227c:	df 93       	push	r29
    227e:	cf 93       	push	r28
    2280:	00 d0       	rcall	.+0      	; 0x2282 <UART_enuReceiveString+0x6>
    2282:	00 d0       	rcall	.+0      	; 0x2284 <UART_enuReceiveString+0x8>
    2284:	00 d0       	rcall	.+0      	; 0x2286 <UART_enuReceiveString+0xa>
    2286:	cd b7       	in	r28, 0x3d	; 61
    2288:	de b7       	in	r29, 0x3e	; 62
    228a:	9e 83       	std	Y+6, r25	; 0x06
    228c:	8d 83       	std	Y+5, r24	; 0x05
	ES_t Local_enuErrorState  = ES_NOK ;
    228e:	1c 82       	std	Y+4, r1	; 0x04

	if( Copy_pcData != 	NULL )
    2290:	8d 81       	ldd	r24, Y+5	; 0x05
    2292:	9e 81       	ldd	r25, Y+6	; 0x06
    2294:	00 97       	sbiw	r24, 0x00	; 0
    2296:	91 f1       	breq	.+100    	; 0x22fc <UART_enuReceiveString+0x80>
	{
		u8 Local_u8Data  = 0  ;
    2298:	1b 82       	std	Y+3, r1	; 0x03

		u8 Local_u8Index = 0  ;
    229a:	1a 82       	std	Y+2, r1	; 0x02

		while( !((UCSRA>>RXC)&1) );
    229c:	eb e2       	ldi	r30, 0x2B	; 43
    229e:	f0 e0       	ldi	r31, 0x00	; 0
    22a0:	80 81       	ld	r24, Z
    22a2:	88 23       	and	r24, r24
    22a4:	dc f7       	brge	.-10     	; 0x229c <UART_enuReceiveString+0x20>

		u8 Local_u8Terminator = UDR ;
    22a6:	ec e2       	ldi	r30, 0x2C	; 44
    22a8:	f0 e0       	ldi	r31, 0x00	; 0
    22aa:	80 81       	ld	r24, Z
    22ac:	89 83       	std	Y+1, r24	; 0x01

		while(1)
		{
			while( !((UCSRA>>RXC)&1) );
    22ae:	eb e2       	ldi	r30, 0x2B	; 43
    22b0:	f0 e0       	ldi	r31, 0x00	; 0
    22b2:	80 81       	ld	r24, Z
    22b4:	88 23       	and	r24, r24
    22b6:	dc f7       	brge	.-10     	; 0x22ae <UART_enuReceiveString+0x32>

			Local_u8Data = UDR ;
    22b8:	ec e2       	ldi	r30, 0x2C	; 44
    22ba:	f0 e0       	ldi	r31, 0x00	; 0
    22bc:	80 81       	ld	r24, Z
    22be:	8b 83       	std	Y+3, r24	; 0x03

			if(Local_u8Data == Local_u8Terminator )
    22c0:	9b 81       	ldd	r25, Y+3	; 0x03
    22c2:	89 81       	ldd	r24, Y+1	; 0x01
    22c4:	98 17       	cp	r25, r24
    22c6:	61 f4       	brne	.+24     	; 0x22e0 <UART_enuReceiveString+0x64>
			{
				Copy_pcData[Local_u8Index] = '\0' ;
    22c8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ca:	28 2f       	mov	r18, r24
    22cc:	30 e0       	ldi	r19, 0x00	; 0
    22ce:	8d 81       	ldd	r24, Y+5	; 0x05
    22d0:	9e 81       	ldd	r25, Y+6	; 0x06
    22d2:	fc 01       	movw	r30, r24
    22d4:	e2 0f       	add	r30, r18
    22d6:	f3 1f       	adc	r31, r19
    22d8:	10 82       	st	Z, r1
				Local_u8Index++ ;
			}

		}

		Local_enuErrorState = ES_OK ;
    22da:	81 e0       	ldi	r24, 0x01	; 1
    22dc:	8c 83       	std	Y+4, r24	; 0x04
    22de:	10 c0       	rjmp	.+32     	; 0x2300 <UART_enuReceiveString+0x84>

				break;
			}
			else
			{
				Copy_pcData[Local_u8Index] = Local_u8Data ;
    22e0:	8a 81       	ldd	r24, Y+2	; 0x02
    22e2:	28 2f       	mov	r18, r24
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	8d 81       	ldd	r24, Y+5	; 0x05
    22e8:	9e 81       	ldd	r25, Y+6	; 0x06
    22ea:	fc 01       	movw	r30, r24
    22ec:	e2 0f       	add	r30, r18
    22ee:	f3 1f       	adc	r31, r19
    22f0:	8b 81       	ldd	r24, Y+3	; 0x03
    22f2:	80 83       	st	Z, r24

				Local_u8Index++ ;
    22f4:	8a 81       	ldd	r24, Y+2	; 0x02
    22f6:	8f 5f       	subi	r24, 0xFF	; 255
    22f8:	8a 83       	std	Y+2, r24	; 0x02
    22fa:	d9 cf       	rjmp	.-78     	; 0x22ae <UART_enuReceiveString+0x32>

		Local_enuErrorState = ES_OK ;
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER ;
    22fc:	82 e0       	ldi	r24, 0x02	; 2
    22fe:	8c 83       	std	Y+4, r24	; 0x04
	}

	return Local_enuErrorState  ;
    2300:	8c 81       	ldd	r24, Y+4	; 0x04
}//End of UART_enuRecieveByte().
    2302:	26 96       	adiw	r28, 0x06	; 6
    2304:	0f b6       	in	r0, 0x3f	; 63
    2306:	f8 94       	cli
    2308:	de bf       	out	0x3e, r29	; 62
    230a:	0f be       	out	0x3f, r0	; 63
    230c:	cd bf       	out	0x3d, r28	; 61
    230e:	cf 91       	pop	r28
    2310:	df 91       	pop	r29
    2312:	08 95       	ret

00002314 <main>:
#define F_CPU    (1000000UL)
#endif


int main(void)
{
    2314:	df 93       	push	r29
    2316:	cf 93       	push	r28
    2318:	0f 92       	push	r0
    231a:	cd b7       	in	r28, 0x3d	; 61
    231c:	de b7       	in	r29, 0x3e	; 62


	u8 Local_u8Data ='S';
    231e:	83 e5       	ldi	r24, 0x53	; 83
    2320:	89 83       	std	Y+1, r24	; 0x01
	//Configure the TXD(PD1) pin as output pin
	DIO_enuSetPinDirection(DIO_PORTD , DIO_PIN1 , DIO_OUTPUT_PIN);
    2322:	83 e0       	ldi	r24, 0x03	; 3
    2324:	61 e0       	ldi	r22, 0x01	; 1
    2326:	41 e0       	ldi	r20, 0x01	; 1
    2328:	0e 94 9c 0b 	call	0x1738	; 0x1738 <DIO_enuSetPinDirection>

	//Configure the RXD(PD0) pin as INPUT pin
	DIO_enuSetPinDirection(DIO_PORTD , DIO_PIN0 , DIO_INPTU_PIN);
    232c:	83 e0       	ldi	r24, 0x03	; 3
    232e:	60 e0       	ldi	r22, 0x00	; 0
    2330:	40 e0       	ldi	r20, 0x00	; 0
    2332:	0e 94 9c 0b 	call	0x1738	; 0x1738 <DIO_enuSetPinDirection>

	 USART_enuInit();
    2336:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <USART_enuInit>

	while(1)
	{

				UART_enuSendByte(Local_u8Data);
    233a:	89 81       	ldd	r24, Y+1	; 0x01
    233c:	88 2f       	mov	r24, r24
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	0e 94 b1 10 	call	0x2162	; 0x2162 <UART_enuSendByte>

				 UART_enuRecieveByte( &Local_u8Data);
    2344:	ce 01       	movw	r24, r28
    2346:	01 96       	adiw	r24, 0x01	; 1
    2348:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <UART_enuRecieveByte>
    234c:	f6 cf       	rjmp	.-20     	; 0x233a <main+0x26>

0000234e <__prologue_saves__>:
    234e:	2f 92       	push	r2
    2350:	3f 92       	push	r3
    2352:	4f 92       	push	r4
    2354:	5f 92       	push	r5
    2356:	6f 92       	push	r6
    2358:	7f 92       	push	r7
    235a:	8f 92       	push	r8
    235c:	9f 92       	push	r9
    235e:	af 92       	push	r10
    2360:	bf 92       	push	r11
    2362:	cf 92       	push	r12
    2364:	df 92       	push	r13
    2366:	ef 92       	push	r14
    2368:	ff 92       	push	r15
    236a:	0f 93       	push	r16
    236c:	1f 93       	push	r17
    236e:	cf 93       	push	r28
    2370:	df 93       	push	r29
    2372:	cd b7       	in	r28, 0x3d	; 61
    2374:	de b7       	in	r29, 0x3e	; 62
    2376:	ca 1b       	sub	r28, r26
    2378:	db 0b       	sbc	r29, r27
    237a:	0f b6       	in	r0, 0x3f	; 63
    237c:	f8 94       	cli
    237e:	de bf       	out	0x3e, r29	; 62
    2380:	0f be       	out	0x3f, r0	; 63
    2382:	cd bf       	out	0x3d, r28	; 61
    2384:	09 94       	ijmp

00002386 <__epilogue_restores__>:
    2386:	2a 88       	ldd	r2, Y+18	; 0x12
    2388:	39 88       	ldd	r3, Y+17	; 0x11
    238a:	48 88       	ldd	r4, Y+16	; 0x10
    238c:	5f 84       	ldd	r5, Y+15	; 0x0f
    238e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2390:	7d 84       	ldd	r7, Y+13	; 0x0d
    2392:	8c 84       	ldd	r8, Y+12	; 0x0c
    2394:	9b 84       	ldd	r9, Y+11	; 0x0b
    2396:	aa 84       	ldd	r10, Y+10	; 0x0a
    2398:	b9 84       	ldd	r11, Y+9	; 0x09
    239a:	c8 84       	ldd	r12, Y+8	; 0x08
    239c:	df 80       	ldd	r13, Y+7	; 0x07
    239e:	ee 80       	ldd	r14, Y+6	; 0x06
    23a0:	fd 80       	ldd	r15, Y+5	; 0x05
    23a2:	0c 81       	ldd	r16, Y+4	; 0x04
    23a4:	1b 81       	ldd	r17, Y+3	; 0x03
    23a6:	aa 81       	ldd	r26, Y+2	; 0x02
    23a8:	b9 81       	ldd	r27, Y+1	; 0x01
    23aa:	ce 0f       	add	r28, r30
    23ac:	d1 1d       	adc	r29, r1
    23ae:	0f b6       	in	r0, 0x3f	; 63
    23b0:	f8 94       	cli
    23b2:	de bf       	out	0x3e, r29	; 62
    23b4:	0f be       	out	0x3f, r0	; 63
    23b6:	cd bf       	out	0x3d, r28	; 61
    23b8:	ed 01       	movw	r28, r26
    23ba:	08 95       	ret

000023bc <_exit>:
    23bc:	f8 94       	cli

000023be <__stop_program>:
    23be:	ff cf       	rjmp	.-2      	; 0x23be <__stop_program>
