
USART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000262c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000114  00800060  0000262c  000026c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00800174  00800174  000027d4  2**0
                  ALLOC
  3 .stab         000024c0  00000000  00000000  000027d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000126e  00000000  00000000  00004c94  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00005f02  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001b6  00000000  00000000  00006062  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001f0d  00000000  00000000  00006218  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000010d2  00000000  00000000  00008125  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001030  00000000  00000000  000091f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000a228  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002e6  00000000  00000000  0000a3a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008f6  00000000  00000000  0000a68e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000af84  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 98 0d 	jmp	0x1b30	; 0x1b30 <__vector_1>
       8:	0c 94 cf 0d 	jmp	0x1b9e	; 0x1b9e <__vector_2>
       c:	0c 94 06 0e 	jmp	0x1c0c	; 0x1c0c <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 4f 0a 	jmp	0x149e	; 0x149e <__vector_13>
      38:	0c 94 98 0a 	jmp	0x1530	; 0x1530 <__vector_14>
      3c:	0c 94 88 0a 	jmp	0x1510	; 0x1510 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e2       	ldi	r30, 0x2C	; 44
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 38       	cpi	r26, 0x86	; 134
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 bc 12 	call	0x2578	; 0x2578 <main>
      8a:	0c 94 14 13 	jmp	0x2628	; 0x2628 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 dd 12 	jmp	0x25ba	; 0x25ba <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e9 12 	jmp	0x25d2	; 0x25d2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 05 13 	jmp	0x260a	; 0x260a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e9 12 	jmp	0x25d2	; 0x25d2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 05 13 	jmp	0x260a	; 0x260a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 dd 12 	jmp	0x25ba	; 0x25ba <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e5 12 	jmp	0x25ca	; 0x25ca <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 01 13 	jmp	0x2602	; 0x2602 <__epilogue_restores__+0x10>

0000078a <__gesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 e9 12 	jmp	0x25d2	; 0x25d2 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gesf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 05 13 	jmp	0x260a	; 0x260a <__epilogue_restores__+0x18>

000007ea <__fixsfsi>:
     7ea:	ac e0       	ldi	r26, 0x0C	; 12
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 ed 12 	jmp	0x25da	; 0x25da <__prologue_saves__+0x20>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	be 01       	movw	r22, r28
     804:	6b 5f       	subi	r22, 0xFB	; 251
     806:	7f 4f       	sbci	r23, 0xFF	; 255
     808:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     80c:	8d 81       	ldd	r24, Y+5	; 0x05
     80e:	82 30       	cpi	r24, 0x02	; 2
     810:	61 f1       	breq	.+88     	; 0x86a <__stack+0xb>
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	50 f1       	brcs	.+84     	; 0x86a <__stack+0xb>
     816:	84 30       	cpi	r24, 0x04	; 4
     818:	21 f4       	brne	.+8      	; 0x822 <__fixsfsi+0x38>
     81a:	8e 81       	ldd	r24, Y+6	; 0x06
     81c:	88 23       	and	r24, r24
     81e:	51 f1       	breq	.+84     	; 0x874 <__stack+0x15>
     820:	2e c0       	rjmp	.+92     	; 0x87e <__stack+0x1f>
     822:	2f 81       	ldd	r18, Y+7	; 0x07
     824:	38 85       	ldd	r19, Y+8	; 0x08
     826:	37 fd       	sbrc	r19, 7
     828:	20 c0       	rjmp	.+64     	; 0x86a <__stack+0xb>
     82a:	6e 81       	ldd	r22, Y+6	; 0x06
     82c:	2f 31       	cpi	r18, 0x1F	; 31
     82e:	31 05       	cpc	r19, r1
     830:	1c f0       	brlt	.+6      	; 0x838 <__fixsfsi+0x4e>
     832:	66 23       	and	r22, r22
     834:	f9 f0       	breq	.+62     	; 0x874 <__stack+0x15>
     836:	23 c0       	rjmp	.+70     	; 0x87e <__stack+0x1f>
     838:	8e e1       	ldi	r24, 0x1E	; 30
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	82 1b       	sub	r24, r18
     83e:	93 0b       	sbc	r25, r19
     840:	29 85       	ldd	r18, Y+9	; 0x09
     842:	3a 85       	ldd	r19, Y+10	; 0x0a
     844:	4b 85       	ldd	r20, Y+11	; 0x0b
     846:	5c 85       	ldd	r21, Y+12	; 0x0c
     848:	04 c0       	rjmp	.+8      	; 0x852 <__fixsfsi+0x68>
     84a:	56 95       	lsr	r21
     84c:	47 95       	ror	r20
     84e:	37 95       	ror	r19
     850:	27 95       	ror	r18
     852:	8a 95       	dec	r24
     854:	d2 f7       	brpl	.-12     	; 0x84a <__fixsfsi+0x60>
     856:	66 23       	and	r22, r22
     858:	b1 f0       	breq	.+44     	; 0x886 <__stack+0x27>
     85a:	50 95       	com	r21
     85c:	40 95       	com	r20
     85e:	30 95       	com	r19
     860:	21 95       	neg	r18
     862:	3f 4f       	sbci	r19, 0xFF	; 255
     864:	4f 4f       	sbci	r20, 0xFF	; 255
     866:	5f 4f       	sbci	r21, 0xFF	; 255
     868:	0e c0       	rjmp	.+28     	; 0x886 <__stack+0x27>
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	40 e0       	ldi	r20, 0x00	; 0
     870:	50 e0       	ldi	r21, 0x00	; 0
     872:	09 c0       	rjmp	.+18     	; 0x886 <__stack+0x27>
     874:	2f ef       	ldi	r18, 0xFF	; 255
     876:	3f ef       	ldi	r19, 0xFF	; 255
     878:	4f ef       	ldi	r20, 0xFF	; 255
     87a:	5f e7       	ldi	r21, 0x7F	; 127
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	40 e0       	ldi	r20, 0x00	; 0
     884:	50 e8       	ldi	r21, 0x80	; 128
     886:	b9 01       	movw	r22, r18
     888:	ca 01       	movw	r24, r20
     88a:	2c 96       	adiw	r28, 0x0c	; 12
     88c:	e2 e0       	ldi	r30, 0x02	; 2
     88e:	0c 94 09 13 	jmp	0x2612	; 0x2612 <__epilogue_restores__+0x20>

00000892 <__floatunsisf>:
     892:	a8 e0       	ldi	r26, 0x08	; 8
     894:	b0 e0       	ldi	r27, 0x00	; 0
     896:	ef e4       	ldi	r30, 0x4F	; 79
     898:	f4 e0       	ldi	r31, 0x04	; 4
     89a:	0c 94 e5 12 	jmp	0x25ca	; 0x25ca <__prologue_saves__+0x10>
     89e:	7b 01       	movw	r14, r22
     8a0:	8c 01       	movw	r16, r24
     8a2:	61 15       	cp	r22, r1
     8a4:	71 05       	cpc	r23, r1
     8a6:	81 05       	cpc	r24, r1
     8a8:	91 05       	cpc	r25, r1
     8aa:	19 f4       	brne	.+6      	; 0x8b2 <__floatunsisf+0x20>
     8ac:	82 e0       	ldi	r24, 0x02	; 2
     8ae:	89 83       	std	Y+1, r24	; 0x01
     8b0:	60 c0       	rjmp	.+192    	; 0x972 <__floatunsisf+0xe0>
     8b2:	83 e0       	ldi	r24, 0x03	; 3
     8b4:	89 83       	std	Y+1, r24	; 0x01
     8b6:	8e e1       	ldi	r24, 0x1E	; 30
     8b8:	c8 2e       	mov	r12, r24
     8ba:	d1 2c       	mov	r13, r1
     8bc:	dc 82       	std	Y+4, r13	; 0x04
     8be:	cb 82       	std	Y+3, r12	; 0x03
     8c0:	ed 82       	std	Y+5, r14	; 0x05
     8c2:	fe 82       	std	Y+6, r15	; 0x06
     8c4:	0f 83       	std	Y+7, r16	; 0x07
     8c6:	18 87       	std	Y+8, r17	; 0x08
     8c8:	c8 01       	movw	r24, r16
     8ca:	b7 01       	movw	r22, r14
     8cc:	0e 94 c2 04 	call	0x984	; 0x984 <__clzsi2>
     8d0:	fc 01       	movw	r30, r24
     8d2:	31 97       	sbiw	r30, 0x01	; 1
     8d4:	f7 ff       	sbrs	r31, 7
     8d6:	3b c0       	rjmp	.+118    	; 0x94e <__floatunsisf+0xbc>
     8d8:	22 27       	eor	r18, r18
     8da:	33 27       	eor	r19, r19
     8dc:	2e 1b       	sub	r18, r30
     8de:	3f 0b       	sbc	r19, r31
     8e0:	57 01       	movw	r10, r14
     8e2:	68 01       	movw	r12, r16
     8e4:	02 2e       	mov	r0, r18
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__floatunsisf+0x5e>
     8e8:	d6 94       	lsr	r13
     8ea:	c7 94       	ror	r12
     8ec:	b7 94       	ror	r11
     8ee:	a7 94       	ror	r10
     8f0:	0a 94       	dec	r0
     8f2:	d2 f7       	brpl	.-12     	; 0x8e8 <__floatunsisf+0x56>
     8f4:	40 e0       	ldi	r20, 0x00	; 0
     8f6:	50 e0       	ldi	r21, 0x00	; 0
     8f8:	60 e0       	ldi	r22, 0x00	; 0
     8fa:	70 e0       	ldi	r23, 0x00	; 0
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	a0 e0       	ldi	r26, 0x00	; 0
     902:	b0 e0       	ldi	r27, 0x00	; 0
     904:	04 c0       	rjmp	.+8      	; 0x90e <__floatunsisf+0x7c>
     906:	88 0f       	add	r24, r24
     908:	99 1f       	adc	r25, r25
     90a:	aa 1f       	adc	r26, r26
     90c:	bb 1f       	adc	r27, r27
     90e:	2a 95       	dec	r18
     910:	d2 f7       	brpl	.-12     	; 0x906 <__floatunsisf+0x74>
     912:	01 97       	sbiw	r24, 0x01	; 1
     914:	a1 09       	sbc	r26, r1
     916:	b1 09       	sbc	r27, r1
     918:	8e 21       	and	r24, r14
     91a:	9f 21       	and	r25, r15
     91c:	a0 23       	and	r26, r16
     91e:	b1 23       	and	r27, r17
     920:	00 97       	sbiw	r24, 0x00	; 0
     922:	a1 05       	cpc	r26, r1
     924:	b1 05       	cpc	r27, r1
     926:	21 f0       	breq	.+8      	; 0x930 <__floatunsisf+0x9e>
     928:	41 e0       	ldi	r20, 0x01	; 1
     92a:	50 e0       	ldi	r21, 0x00	; 0
     92c:	60 e0       	ldi	r22, 0x00	; 0
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	4a 29       	or	r20, r10
     932:	5b 29       	or	r21, r11
     934:	6c 29       	or	r22, r12
     936:	7d 29       	or	r23, r13
     938:	4d 83       	std	Y+5, r20	; 0x05
     93a:	5e 83       	std	Y+6, r21	; 0x06
     93c:	6f 83       	std	Y+7, r22	; 0x07
     93e:	78 87       	std	Y+8, r23	; 0x08
     940:	8e e1       	ldi	r24, 0x1E	; 30
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	8e 1b       	sub	r24, r30
     946:	9f 0b       	sbc	r25, r31
     948:	9c 83       	std	Y+4, r25	; 0x04
     94a:	8b 83       	std	Y+3, r24	; 0x03
     94c:	12 c0       	rjmp	.+36     	; 0x972 <__floatunsisf+0xe0>
     94e:	30 97       	sbiw	r30, 0x00	; 0
     950:	81 f0       	breq	.+32     	; 0x972 <__floatunsisf+0xe0>
     952:	0e 2e       	mov	r0, r30
     954:	04 c0       	rjmp	.+8      	; 0x95e <__floatunsisf+0xcc>
     956:	ee 0c       	add	r14, r14
     958:	ff 1c       	adc	r15, r15
     95a:	00 1f       	adc	r16, r16
     95c:	11 1f       	adc	r17, r17
     95e:	0a 94       	dec	r0
     960:	d2 f7       	brpl	.-12     	; 0x956 <__floatunsisf+0xc4>
     962:	ed 82       	std	Y+5, r14	; 0x05
     964:	fe 82       	std	Y+6, r15	; 0x06
     966:	0f 83       	std	Y+7, r16	; 0x07
     968:	18 87       	std	Y+8, r17	; 0x08
     96a:	ce 1a       	sub	r12, r30
     96c:	df 0a       	sbc	r13, r31
     96e:	dc 82       	std	Y+4, r13	; 0x04
     970:	cb 82       	std	Y+3, r12	; 0x03
     972:	1a 82       	std	Y+2, r1	; 0x02
     974:	ce 01       	movw	r24, r28
     976:	01 96       	adiw	r24, 0x01	; 1
     978:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     97c:	28 96       	adiw	r28, 0x08	; 8
     97e:	ea e0       	ldi	r30, 0x0A	; 10
     980:	0c 94 01 13 	jmp	0x2602	; 0x2602 <__epilogue_restores__+0x10>

00000984 <__clzsi2>:
     984:	ef 92       	push	r14
     986:	ff 92       	push	r15
     988:	0f 93       	push	r16
     98a:	1f 93       	push	r17
     98c:	7b 01       	movw	r14, r22
     98e:	8c 01       	movw	r16, r24
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	e8 16       	cp	r14, r24
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	f8 06       	cpc	r15, r24
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	08 07       	cpc	r16, r24
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	18 07       	cpc	r17, r24
     9a0:	88 f4       	brcc	.+34     	; 0x9c4 <__clzsi2+0x40>
     9a2:	8f ef       	ldi	r24, 0xFF	; 255
     9a4:	e8 16       	cp	r14, r24
     9a6:	f1 04       	cpc	r15, r1
     9a8:	01 05       	cpc	r16, r1
     9aa:	11 05       	cpc	r17, r1
     9ac:	31 f0       	breq	.+12     	; 0x9ba <__clzsi2+0x36>
     9ae:	28 f0       	brcs	.+10     	; 0x9ba <__clzsi2+0x36>
     9b0:	88 e0       	ldi	r24, 0x08	; 8
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	a0 e0       	ldi	r26, 0x00	; 0
     9b6:	b0 e0       	ldi	r27, 0x00	; 0
     9b8:	17 c0       	rjmp	.+46     	; 0x9e8 <__clzsi2+0x64>
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	a0 e0       	ldi	r26, 0x00	; 0
     9c0:	b0 e0       	ldi	r27, 0x00	; 0
     9c2:	12 c0       	rjmp	.+36     	; 0x9e8 <__clzsi2+0x64>
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	e8 16       	cp	r14, r24
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	f8 06       	cpc	r15, r24
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	08 07       	cpc	r16, r24
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	18 07       	cpc	r17, r24
     9d4:	28 f0       	brcs	.+10     	; 0x9e0 <__clzsi2+0x5c>
     9d6:	88 e1       	ldi	r24, 0x18	; 24
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	a0 e0       	ldi	r26, 0x00	; 0
     9dc:	b0 e0       	ldi	r27, 0x00	; 0
     9de:	04 c0       	rjmp	.+8      	; 0x9e8 <__clzsi2+0x64>
     9e0:	80 e1       	ldi	r24, 0x10	; 16
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	a0 e0       	ldi	r26, 0x00	; 0
     9e6:	b0 e0       	ldi	r27, 0x00	; 0
     9e8:	20 e2       	ldi	r18, 0x20	; 32
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	40 e0       	ldi	r20, 0x00	; 0
     9ee:	50 e0       	ldi	r21, 0x00	; 0
     9f0:	28 1b       	sub	r18, r24
     9f2:	39 0b       	sbc	r19, r25
     9f4:	4a 0b       	sbc	r20, r26
     9f6:	5b 0b       	sbc	r21, r27
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__clzsi2+0x7e>
     9fa:	16 95       	lsr	r17
     9fc:	07 95       	ror	r16
     9fe:	f7 94       	ror	r15
     a00:	e7 94       	ror	r14
     a02:	8a 95       	dec	r24
     a04:	d2 f7       	brpl	.-12     	; 0x9fa <__clzsi2+0x76>
     a06:	f7 01       	movw	r30, r14
     a08:	e8 59       	subi	r30, 0x98	; 152
     a0a:	ff 4f       	sbci	r31, 0xFF	; 255
     a0c:	80 81       	ld	r24, Z
     a0e:	28 1b       	sub	r18, r24
     a10:	31 09       	sbc	r19, r1
     a12:	41 09       	sbc	r20, r1
     a14:	51 09       	sbc	r21, r1
     a16:	c9 01       	movw	r24, r18
     a18:	1f 91       	pop	r17
     a1a:	0f 91       	pop	r16
     a1c:	ff 90       	pop	r15
     a1e:	ef 90       	pop	r14
     a20:	08 95       	ret

00000a22 <__pack_f>:
     a22:	df 92       	push	r13
     a24:	ef 92       	push	r14
     a26:	ff 92       	push	r15
     a28:	0f 93       	push	r16
     a2a:	1f 93       	push	r17
     a2c:	fc 01       	movw	r30, r24
     a2e:	e4 80       	ldd	r14, Z+4	; 0x04
     a30:	f5 80       	ldd	r15, Z+5	; 0x05
     a32:	06 81       	ldd	r16, Z+6	; 0x06
     a34:	17 81       	ldd	r17, Z+7	; 0x07
     a36:	d1 80       	ldd	r13, Z+1	; 0x01
     a38:	80 81       	ld	r24, Z
     a3a:	82 30       	cpi	r24, 0x02	; 2
     a3c:	48 f4       	brcc	.+18     	; 0xa50 <__pack_f+0x2e>
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	a0 e1       	ldi	r26, 0x10	; 16
     a44:	b0 e0       	ldi	r27, 0x00	; 0
     a46:	e8 2a       	or	r14, r24
     a48:	f9 2a       	or	r15, r25
     a4a:	0a 2b       	or	r16, r26
     a4c:	1b 2b       	or	r17, r27
     a4e:	a5 c0       	rjmp	.+330    	; 0xb9a <__pack_f+0x178>
     a50:	84 30       	cpi	r24, 0x04	; 4
     a52:	09 f4       	brne	.+2      	; 0xa56 <__pack_f+0x34>
     a54:	9f c0       	rjmp	.+318    	; 0xb94 <__pack_f+0x172>
     a56:	82 30       	cpi	r24, 0x02	; 2
     a58:	21 f4       	brne	.+8      	; 0xa62 <__pack_f+0x40>
     a5a:	ee 24       	eor	r14, r14
     a5c:	ff 24       	eor	r15, r15
     a5e:	87 01       	movw	r16, r14
     a60:	05 c0       	rjmp	.+10     	; 0xa6c <__pack_f+0x4a>
     a62:	e1 14       	cp	r14, r1
     a64:	f1 04       	cpc	r15, r1
     a66:	01 05       	cpc	r16, r1
     a68:	11 05       	cpc	r17, r1
     a6a:	19 f4       	brne	.+6      	; 0xa72 <__pack_f+0x50>
     a6c:	e0 e0       	ldi	r30, 0x00	; 0
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	96 c0       	rjmp	.+300    	; 0xb9e <__pack_f+0x17c>
     a72:	62 81       	ldd	r22, Z+2	; 0x02
     a74:	73 81       	ldd	r23, Z+3	; 0x03
     a76:	9f ef       	ldi	r25, 0xFF	; 255
     a78:	62 38       	cpi	r22, 0x82	; 130
     a7a:	79 07       	cpc	r23, r25
     a7c:	0c f0       	brlt	.+2      	; 0xa80 <__pack_f+0x5e>
     a7e:	5b c0       	rjmp	.+182    	; 0xb36 <__pack_f+0x114>
     a80:	22 e8       	ldi	r18, 0x82	; 130
     a82:	3f ef       	ldi	r19, 0xFF	; 255
     a84:	26 1b       	sub	r18, r22
     a86:	37 0b       	sbc	r19, r23
     a88:	2a 31       	cpi	r18, 0x1A	; 26
     a8a:	31 05       	cpc	r19, r1
     a8c:	2c f0       	brlt	.+10     	; 0xa98 <__pack_f+0x76>
     a8e:	20 e0       	ldi	r18, 0x00	; 0
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	40 e0       	ldi	r20, 0x00	; 0
     a94:	50 e0       	ldi	r21, 0x00	; 0
     a96:	2a c0       	rjmp	.+84     	; 0xaec <__pack_f+0xca>
     a98:	b8 01       	movw	r22, r16
     a9a:	a7 01       	movw	r20, r14
     a9c:	02 2e       	mov	r0, r18
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__pack_f+0x86>
     aa0:	76 95       	lsr	r23
     aa2:	67 95       	ror	r22
     aa4:	57 95       	ror	r21
     aa6:	47 95       	ror	r20
     aa8:	0a 94       	dec	r0
     aaa:	d2 f7       	brpl	.-12     	; 0xaa0 <__pack_f+0x7e>
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	a0 e0       	ldi	r26, 0x00	; 0
     ab2:	b0 e0       	ldi	r27, 0x00	; 0
     ab4:	04 c0       	rjmp	.+8      	; 0xabe <__pack_f+0x9c>
     ab6:	88 0f       	add	r24, r24
     ab8:	99 1f       	adc	r25, r25
     aba:	aa 1f       	adc	r26, r26
     abc:	bb 1f       	adc	r27, r27
     abe:	2a 95       	dec	r18
     ac0:	d2 f7       	brpl	.-12     	; 0xab6 <__pack_f+0x94>
     ac2:	01 97       	sbiw	r24, 0x01	; 1
     ac4:	a1 09       	sbc	r26, r1
     ac6:	b1 09       	sbc	r27, r1
     ac8:	8e 21       	and	r24, r14
     aca:	9f 21       	and	r25, r15
     acc:	a0 23       	and	r26, r16
     ace:	b1 23       	and	r27, r17
     ad0:	00 97       	sbiw	r24, 0x00	; 0
     ad2:	a1 05       	cpc	r26, r1
     ad4:	b1 05       	cpc	r27, r1
     ad6:	21 f0       	breq	.+8      	; 0xae0 <__pack_f+0xbe>
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	9a 01       	movw	r18, r20
     ae2:	ab 01       	movw	r20, r22
     ae4:	28 2b       	or	r18, r24
     ae6:	39 2b       	or	r19, r25
     ae8:	4a 2b       	or	r20, r26
     aea:	5b 2b       	or	r21, r27
     aec:	da 01       	movw	r26, r20
     aee:	c9 01       	movw	r24, r18
     af0:	8f 77       	andi	r24, 0x7F	; 127
     af2:	90 70       	andi	r25, 0x00	; 0
     af4:	a0 70       	andi	r26, 0x00	; 0
     af6:	b0 70       	andi	r27, 0x00	; 0
     af8:	80 34       	cpi	r24, 0x40	; 64
     afa:	91 05       	cpc	r25, r1
     afc:	a1 05       	cpc	r26, r1
     afe:	b1 05       	cpc	r27, r1
     b00:	39 f4       	brne	.+14     	; 0xb10 <__pack_f+0xee>
     b02:	27 ff       	sbrs	r18, 7
     b04:	09 c0       	rjmp	.+18     	; 0xb18 <__pack_f+0xf6>
     b06:	20 5c       	subi	r18, 0xC0	; 192
     b08:	3f 4f       	sbci	r19, 0xFF	; 255
     b0a:	4f 4f       	sbci	r20, 0xFF	; 255
     b0c:	5f 4f       	sbci	r21, 0xFF	; 255
     b0e:	04 c0       	rjmp	.+8      	; 0xb18 <__pack_f+0xf6>
     b10:	21 5c       	subi	r18, 0xC1	; 193
     b12:	3f 4f       	sbci	r19, 0xFF	; 255
     b14:	4f 4f       	sbci	r20, 0xFF	; 255
     b16:	5f 4f       	sbci	r21, 0xFF	; 255
     b18:	e0 e0       	ldi	r30, 0x00	; 0
     b1a:	f0 e0       	ldi	r31, 0x00	; 0
     b1c:	20 30       	cpi	r18, 0x00	; 0
     b1e:	a0 e0       	ldi	r26, 0x00	; 0
     b20:	3a 07       	cpc	r19, r26
     b22:	a0 e0       	ldi	r26, 0x00	; 0
     b24:	4a 07       	cpc	r20, r26
     b26:	a0 e4       	ldi	r26, 0x40	; 64
     b28:	5a 07       	cpc	r21, r26
     b2a:	10 f0       	brcs	.+4      	; 0xb30 <__pack_f+0x10e>
     b2c:	e1 e0       	ldi	r30, 0x01	; 1
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	79 01       	movw	r14, r18
     b32:	8a 01       	movw	r16, r20
     b34:	27 c0       	rjmp	.+78     	; 0xb84 <__pack_f+0x162>
     b36:	60 38       	cpi	r22, 0x80	; 128
     b38:	71 05       	cpc	r23, r1
     b3a:	64 f5       	brge	.+88     	; 0xb94 <__pack_f+0x172>
     b3c:	fb 01       	movw	r30, r22
     b3e:	e1 58       	subi	r30, 0x81	; 129
     b40:	ff 4f       	sbci	r31, 0xFF	; 255
     b42:	d8 01       	movw	r26, r16
     b44:	c7 01       	movw	r24, r14
     b46:	8f 77       	andi	r24, 0x7F	; 127
     b48:	90 70       	andi	r25, 0x00	; 0
     b4a:	a0 70       	andi	r26, 0x00	; 0
     b4c:	b0 70       	andi	r27, 0x00	; 0
     b4e:	80 34       	cpi	r24, 0x40	; 64
     b50:	91 05       	cpc	r25, r1
     b52:	a1 05       	cpc	r26, r1
     b54:	b1 05       	cpc	r27, r1
     b56:	39 f4       	brne	.+14     	; 0xb66 <__pack_f+0x144>
     b58:	e7 fe       	sbrs	r14, 7
     b5a:	0d c0       	rjmp	.+26     	; 0xb76 <__pack_f+0x154>
     b5c:	80 e4       	ldi	r24, 0x40	; 64
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x14c>
     b66:	8f e3       	ldi	r24, 0x3F	; 63
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	a0 e0       	ldi	r26, 0x00	; 0
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e8 0e       	add	r14, r24
     b70:	f9 1e       	adc	r15, r25
     b72:	0a 1f       	adc	r16, r26
     b74:	1b 1f       	adc	r17, r27
     b76:	17 ff       	sbrs	r17, 7
     b78:	05 c0       	rjmp	.+10     	; 0xb84 <__pack_f+0x162>
     b7a:	16 95       	lsr	r17
     b7c:	07 95       	ror	r16
     b7e:	f7 94       	ror	r15
     b80:	e7 94       	ror	r14
     b82:	31 96       	adiw	r30, 0x01	; 1
     b84:	87 e0       	ldi	r24, 0x07	; 7
     b86:	16 95       	lsr	r17
     b88:	07 95       	ror	r16
     b8a:	f7 94       	ror	r15
     b8c:	e7 94       	ror	r14
     b8e:	8a 95       	dec	r24
     b90:	d1 f7       	brne	.-12     	; 0xb86 <__pack_f+0x164>
     b92:	05 c0       	rjmp	.+10     	; 0xb9e <__pack_f+0x17c>
     b94:	ee 24       	eor	r14, r14
     b96:	ff 24       	eor	r15, r15
     b98:	87 01       	movw	r16, r14
     b9a:	ef ef       	ldi	r30, 0xFF	; 255
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	6e 2f       	mov	r22, r30
     ba0:	67 95       	ror	r22
     ba2:	66 27       	eor	r22, r22
     ba4:	67 95       	ror	r22
     ba6:	90 2f       	mov	r25, r16
     ba8:	9f 77       	andi	r25, 0x7F	; 127
     baa:	d7 94       	ror	r13
     bac:	dd 24       	eor	r13, r13
     bae:	d7 94       	ror	r13
     bb0:	8e 2f       	mov	r24, r30
     bb2:	86 95       	lsr	r24
     bb4:	49 2f       	mov	r20, r25
     bb6:	46 2b       	or	r20, r22
     bb8:	58 2f       	mov	r21, r24
     bba:	5d 29       	or	r21, r13
     bbc:	b7 01       	movw	r22, r14
     bbe:	ca 01       	movw	r24, r20
     bc0:	1f 91       	pop	r17
     bc2:	0f 91       	pop	r16
     bc4:	ff 90       	pop	r15
     bc6:	ef 90       	pop	r14
     bc8:	df 90       	pop	r13
     bca:	08 95       	ret

00000bcc <__unpack_f>:
     bcc:	fc 01       	movw	r30, r24
     bce:	db 01       	movw	r26, r22
     bd0:	40 81       	ld	r20, Z
     bd2:	51 81       	ldd	r21, Z+1	; 0x01
     bd4:	22 81       	ldd	r18, Z+2	; 0x02
     bd6:	62 2f       	mov	r22, r18
     bd8:	6f 77       	andi	r22, 0x7F	; 127
     bda:	70 e0       	ldi	r23, 0x00	; 0
     bdc:	22 1f       	adc	r18, r18
     bde:	22 27       	eor	r18, r18
     be0:	22 1f       	adc	r18, r18
     be2:	93 81       	ldd	r25, Z+3	; 0x03
     be4:	89 2f       	mov	r24, r25
     be6:	88 0f       	add	r24, r24
     be8:	82 2b       	or	r24, r18
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	99 1f       	adc	r25, r25
     bf0:	99 27       	eor	r25, r25
     bf2:	99 1f       	adc	r25, r25
     bf4:	11 96       	adiw	r26, 0x01	; 1
     bf6:	9c 93       	st	X, r25
     bf8:	11 97       	sbiw	r26, 0x01	; 1
     bfa:	21 15       	cp	r18, r1
     bfc:	31 05       	cpc	r19, r1
     bfe:	a9 f5       	brne	.+106    	; 0xc6a <__unpack_f+0x9e>
     c00:	41 15       	cp	r20, r1
     c02:	51 05       	cpc	r21, r1
     c04:	61 05       	cpc	r22, r1
     c06:	71 05       	cpc	r23, r1
     c08:	11 f4       	brne	.+4      	; 0xc0e <__unpack_f+0x42>
     c0a:	82 e0       	ldi	r24, 0x02	; 2
     c0c:	37 c0       	rjmp	.+110    	; 0xc7c <__unpack_f+0xb0>
     c0e:	82 e8       	ldi	r24, 0x82	; 130
     c10:	9f ef       	ldi	r25, 0xFF	; 255
     c12:	13 96       	adiw	r26, 0x03	; 3
     c14:	9c 93       	st	X, r25
     c16:	8e 93       	st	-X, r24
     c18:	12 97       	sbiw	r26, 0x02	; 2
     c1a:	9a 01       	movw	r18, r20
     c1c:	ab 01       	movw	r20, r22
     c1e:	67 e0       	ldi	r22, 0x07	; 7
     c20:	22 0f       	add	r18, r18
     c22:	33 1f       	adc	r19, r19
     c24:	44 1f       	adc	r20, r20
     c26:	55 1f       	adc	r21, r21
     c28:	6a 95       	dec	r22
     c2a:	d1 f7       	brne	.-12     	; 0xc20 <__unpack_f+0x54>
     c2c:	83 e0       	ldi	r24, 0x03	; 3
     c2e:	8c 93       	st	X, r24
     c30:	0d c0       	rjmp	.+26     	; 0xc4c <__unpack_f+0x80>
     c32:	22 0f       	add	r18, r18
     c34:	33 1f       	adc	r19, r19
     c36:	44 1f       	adc	r20, r20
     c38:	55 1f       	adc	r21, r21
     c3a:	12 96       	adiw	r26, 0x02	; 2
     c3c:	8d 91       	ld	r24, X+
     c3e:	9c 91       	ld	r25, X
     c40:	13 97       	sbiw	r26, 0x03	; 3
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	13 96       	adiw	r26, 0x03	; 3
     c46:	9c 93       	st	X, r25
     c48:	8e 93       	st	-X, r24
     c4a:	12 97       	sbiw	r26, 0x02	; 2
     c4c:	20 30       	cpi	r18, 0x00	; 0
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	38 07       	cpc	r19, r24
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	48 07       	cpc	r20, r24
     c56:	80 e4       	ldi	r24, 0x40	; 64
     c58:	58 07       	cpc	r21, r24
     c5a:	58 f3       	brcs	.-42     	; 0xc32 <__unpack_f+0x66>
     c5c:	14 96       	adiw	r26, 0x04	; 4
     c5e:	2d 93       	st	X+, r18
     c60:	3d 93       	st	X+, r19
     c62:	4d 93       	st	X+, r20
     c64:	5c 93       	st	X, r21
     c66:	17 97       	sbiw	r26, 0x07	; 7
     c68:	08 95       	ret
     c6a:	2f 3f       	cpi	r18, 0xFF	; 255
     c6c:	31 05       	cpc	r19, r1
     c6e:	79 f4       	brne	.+30     	; 0xc8e <__unpack_f+0xc2>
     c70:	41 15       	cp	r20, r1
     c72:	51 05       	cpc	r21, r1
     c74:	61 05       	cpc	r22, r1
     c76:	71 05       	cpc	r23, r1
     c78:	19 f4       	brne	.+6      	; 0xc80 <__unpack_f+0xb4>
     c7a:	84 e0       	ldi	r24, 0x04	; 4
     c7c:	8c 93       	st	X, r24
     c7e:	08 95       	ret
     c80:	64 ff       	sbrs	r22, 4
     c82:	03 c0       	rjmp	.+6      	; 0xc8a <__unpack_f+0xbe>
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	8c 93       	st	X, r24
     c88:	12 c0       	rjmp	.+36     	; 0xcae <__unpack_f+0xe2>
     c8a:	1c 92       	st	X, r1
     c8c:	10 c0       	rjmp	.+32     	; 0xcae <__unpack_f+0xe2>
     c8e:	2f 57       	subi	r18, 0x7F	; 127
     c90:	30 40       	sbci	r19, 0x00	; 0
     c92:	13 96       	adiw	r26, 0x03	; 3
     c94:	3c 93       	st	X, r19
     c96:	2e 93       	st	-X, r18
     c98:	12 97       	sbiw	r26, 0x02	; 2
     c9a:	83 e0       	ldi	r24, 0x03	; 3
     c9c:	8c 93       	st	X, r24
     c9e:	87 e0       	ldi	r24, 0x07	; 7
     ca0:	44 0f       	add	r20, r20
     ca2:	55 1f       	adc	r21, r21
     ca4:	66 1f       	adc	r22, r22
     ca6:	77 1f       	adc	r23, r23
     ca8:	8a 95       	dec	r24
     caa:	d1 f7       	brne	.-12     	; 0xca0 <__unpack_f+0xd4>
     cac:	70 64       	ori	r23, 0x40	; 64
     cae:	14 96       	adiw	r26, 0x04	; 4
     cb0:	4d 93       	st	X+, r20
     cb2:	5d 93       	st	X+, r21
     cb4:	6d 93       	st	X+, r22
     cb6:	7c 93       	st	X, r23
     cb8:	17 97       	sbiw	r26, 0x07	; 7
     cba:	08 95       	ret

00000cbc <__fpcmp_parts_f>:
     cbc:	1f 93       	push	r17
     cbe:	dc 01       	movw	r26, r24
     cc0:	fb 01       	movw	r30, r22
     cc2:	9c 91       	ld	r25, X
     cc4:	92 30       	cpi	r25, 0x02	; 2
     cc6:	08 f4       	brcc	.+2      	; 0xcca <__fpcmp_parts_f+0xe>
     cc8:	47 c0       	rjmp	.+142    	; 0xd58 <__fpcmp_parts_f+0x9c>
     cca:	80 81       	ld	r24, Z
     ccc:	82 30       	cpi	r24, 0x02	; 2
     cce:	08 f4       	brcc	.+2      	; 0xcd2 <__fpcmp_parts_f+0x16>
     cd0:	43 c0       	rjmp	.+134    	; 0xd58 <__fpcmp_parts_f+0x9c>
     cd2:	94 30       	cpi	r25, 0x04	; 4
     cd4:	51 f4       	brne	.+20     	; 0xcea <__fpcmp_parts_f+0x2e>
     cd6:	11 96       	adiw	r26, 0x01	; 1
     cd8:	1c 91       	ld	r17, X
     cda:	84 30       	cpi	r24, 0x04	; 4
     cdc:	99 f5       	brne	.+102    	; 0xd44 <__fpcmp_parts_f+0x88>
     cde:	81 81       	ldd	r24, Z+1	; 0x01
     ce0:	68 2f       	mov	r22, r24
     ce2:	70 e0       	ldi	r23, 0x00	; 0
     ce4:	61 1b       	sub	r22, r17
     ce6:	71 09       	sbc	r23, r1
     ce8:	3f c0       	rjmp	.+126    	; 0xd68 <__fpcmp_parts_f+0xac>
     cea:	84 30       	cpi	r24, 0x04	; 4
     cec:	21 f0       	breq	.+8      	; 0xcf6 <__fpcmp_parts_f+0x3a>
     cee:	92 30       	cpi	r25, 0x02	; 2
     cf0:	31 f4       	brne	.+12     	; 0xcfe <__fpcmp_parts_f+0x42>
     cf2:	82 30       	cpi	r24, 0x02	; 2
     cf4:	b9 f1       	breq	.+110    	; 0xd64 <__fpcmp_parts_f+0xa8>
     cf6:	81 81       	ldd	r24, Z+1	; 0x01
     cf8:	88 23       	and	r24, r24
     cfa:	89 f1       	breq	.+98     	; 0xd5e <__fpcmp_parts_f+0xa2>
     cfc:	2d c0       	rjmp	.+90     	; 0xd58 <__fpcmp_parts_f+0x9c>
     cfe:	11 96       	adiw	r26, 0x01	; 1
     d00:	1c 91       	ld	r17, X
     d02:	11 97       	sbiw	r26, 0x01	; 1
     d04:	82 30       	cpi	r24, 0x02	; 2
     d06:	f1 f0       	breq	.+60     	; 0xd44 <__fpcmp_parts_f+0x88>
     d08:	81 81       	ldd	r24, Z+1	; 0x01
     d0a:	18 17       	cp	r17, r24
     d0c:	d9 f4       	brne	.+54     	; 0xd44 <__fpcmp_parts_f+0x88>
     d0e:	12 96       	adiw	r26, 0x02	; 2
     d10:	2d 91       	ld	r18, X+
     d12:	3c 91       	ld	r19, X
     d14:	13 97       	sbiw	r26, 0x03	; 3
     d16:	82 81       	ldd	r24, Z+2	; 0x02
     d18:	93 81       	ldd	r25, Z+3	; 0x03
     d1a:	82 17       	cp	r24, r18
     d1c:	93 07       	cpc	r25, r19
     d1e:	94 f0       	brlt	.+36     	; 0xd44 <__fpcmp_parts_f+0x88>
     d20:	28 17       	cp	r18, r24
     d22:	39 07       	cpc	r19, r25
     d24:	bc f0       	brlt	.+46     	; 0xd54 <__fpcmp_parts_f+0x98>
     d26:	14 96       	adiw	r26, 0x04	; 4
     d28:	8d 91       	ld	r24, X+
     d2a:	9d 91       	ld	r25, X+
     d2c:	0d 90       	ld	r0, X+
     d2e:	bc 91       	ld	r27, X
     d30:	a0 2d       	mov	r26, r0
     d32:	24 81       	ldd	r18, Z+4	; 0x04
     d34:	35 81       	ldd	r19, Z+5	; 0x05
     d36:	46 81       	ldd	r20, Z+6	; 0x06
     d38:	57 81       	ldd	r21, Z+7	; 0x07
     d3a:	28 17       	cp	r18, r24
     d3c:	39 07       	cpc	r19, r25
     d3e:	4a 07       	cpc	r20, r26
     d40:	5b 07       	cpc	r21, r27
     d42:	18 f4       	brcc	.+6      	; 0xd4a <__fpcmp_parts_f+0x8e>
     d44:	11 23       	and	r17, r17
     d46:	41 f0       	breq	.+16     	; 0xd58 <__fpcmp_parts_f+0x9c>
     d48:	0a c0       	rjmp	.+20     	; 0xd5e <__fpcmp_parts_f+0xa2>
     d4a:	82 17       	cp	r24, r18
     d4c:	93 07       	cpc	r25, r19
     d4e:	a4 07       	cpc	r26, r20
     d50:	b5 07       	cpc	r27, r21
     d52:	40 f4       	brcc	.+16     	; 0xd64 <__fpcmp_parts_f+0xa8>
     d54:	11 23       	and	r17, r17
     d56:	19 f0       	breq	.+6      	; 0xd5e <__fpcmp_parts_f+0xa2>
     d58:	61 e0       	ldi	r22, 0x01	; 1
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	05 c0       	rjmp	.+10     	; 0xd68 <__fpcmp_parts_f+0xac>
     d5e:	6f ef       	ldi	r22, 0xFF	; 255
     d60:	7f ef       	ldi	r23, 0xFF	; 255
     d62:	02 c0       	rjmp	.+4      	; 0xd68 <__fpcmp_parts_f+0xac>
     d64:	60 e0       	ldi	r22, 0x00	; 0
     d66:	70 e0       	ldi	r23, 0x00	; 0
     d68:	cb 01       	movw	r24, r22
     d6a:	1f 91       	pop	r17
     d6c:	08 95       	ret

00000d6e <USART_enuInit>:
/*                   according to the configuration structure.              */
/* Argument        : None.                                                  */
/* Return          : Error state of type ES_t.                              */
/**.....................*****************************************************/
void USART_enuInit(void)
{
     d6e:	0f 93       	push	r16
     d70:	1f 93       	push	r17
     d72:	df 93       	push	r29
     d74:	cf 93       	push	r28
     d76:	cd b7       	in	r28, 0x3d	; 61
     d78:	de b7       	in	r29, 0x3e	; 62
     d7a:	65 97       	sbiw	r28, 0x15	; 21
     d7c:	0f b6       	in	r0, 0x3f	; 63
     d7e:	f8 94       	cli
     d80:	de bf       	out	0x3e, r29	; 62
     d82:	0f be       	out	0x3f, r0	; 63
     d84:	cd bf       	out	0x3d, r28	; 61
	u8   UCSRA_u8Temp    =  0  ;
     d86:	1f 82       	std	Y+7, r1	; 0x07
	u8   UCSRB_u8Temp    =  0  ;
     d88:	1e 82       	std	Y+6, r1	; 0x06
	u8   UCSRC_u8Temp    =  0  ;
     d8a:	1d 82       	std	Y+5, r1	; 0x05
	f32  UBRR_f32Temp    =  0  ;
     d8c:	80 e0       	ldi	r24, 0x00	; 0
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	a0 e0       	ldi	r26, 0x00	; 0
     d92:	b0 e0       	ldi	r27, 0x00	; 0
     d94:	89 83       	std	Y+1, r24	; 0x01
     d96:	9a 83       	std	Y+2, r25	; 0x02
     d98:	ab 83       	std	Y+3, r26	; 0x03
     d9a:	bc 83       	std	Y+4, r27	; 0x04

	switch( USART0.EnableMode )
     d9c:	80 91 68 01 	lds	r24, 0x0168
     da0:	28 2f       	mov	r18, r24
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	3d 8b       	std	Y+21, r19	; 0x15
     da6:	2c 8b       	std	Y+20, r18	; 0x14
     da8:	8c 89       	ldd	r24, Y+20	; 0x14
     daa:	9d 89       	ldd	r25, Y+21	; 0x15
     dac:	81 30       	cpi	r24, 0x01	; 1
     dae:	91 05       	cpc	r25, r1
     db0:	81 f0       	breq	.+32     	; 0xdd2 <USART_enuInit+0x64>
     db2:	ec 89       	ldd	r30, Y+20	; 0x14
     db4:	fd 89       	ldd	r31, Y+21	; 0x15
     db6:	e2 30       	cpi	r30, 0x02	; 2
     db8:	f1 05       	cpc	r31, r1
     dba:	b4 f0       	brlt	.+44     	; 0xde8 <USART_enuInit+0x7a>
     dbc:	2c 89       	ldd	r18, Y+20	; 0x14
     dbe:	3d 89       	ldd	r19, Y+21	; 0x15
     dc0:	22 30       	cpi	r18, 0x02	; 2
     dc2:	31 05       	cpc	r19, r1
     dc4:	51 f0       	breq	.+20     	; 0xdda <USART_enuInit+0x6c>
     dc6:	8c 89       	ldd	r24, Y+20	; 0x14
     dc8:	9d 89       	ldd	r25, Y+21	; 0x15
     dca:	83 30       	cpi	r24, 0x03	; 3
     dcc:	91 05       	cpc	r25, r1
     dce:	49 f0       	breq	.+18     	; 0xde2 <USART_enuInit+0x74>
     dd0:	0b c0       	rjmp	.+22     	; 0xde8 <USART_enuInit+0x7a>

	case USART_Disable :
		break;

	case USART_Tx_Only :
		UCSRB_u8Temp |=(USART_MSK_BIT<<TXEN);
     dd2:	8e 81       	ldd	r24, Y+6	; 0x06
     dd4:	88 60       	ori	r24, 0x08	; 8
     dd6:	8e 83       	std	Y+6, r24	; 0x06
     dd8:	07 c0       	rjmp	.+14     	; 0xde8 <USART_enuInit+0x7a>
		break;

	case USART_Rx_Only :
		UCSRB_u8Temp |=(USART_MSK_BIT<<RXEN);
     dda:	8e 81       	ldd	r24, Y+6	; 0x06
     ddc:	80 61       	ori	r24, 0x10	; 16
     dde:	8e 83       	std	Y+6, r24	; 0x06
     de0:	03 c0       	rjmp	.+6      	; 0xde8 <USART_enuInit+0x7a>
		break;

	case USART_Tx_Rx:
		UCSRB_u8Temp |=(USART_MSK_BIT<<RXEN)|(USART_MSK_BIT<<TXEN);
     de2:	8e 81       	ldd	r24, Y+6	; 0x06
     de4:	88 61       	ori	r24, 0x18	; 24
     de6:	8e 83       	std	Y+6, r24	; 0x06
		break;

	}//End of switch( USART0.EnableMode ).


	switch( USART0.CommunicationMode )
     de8:	80 91 69 01 	lds	r24, 0x0169
     dec:	e8 2f       	mov	r30, r24
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	fb 8b       	std	Y+19, r31	; 0x13
     df2:	ea 8b       	std	Y+18, r30	; 0x12
     df4:	2a 89       	ldd	r18, Y+18	; 0x12
     df6:	3b 89       	ldd	r19, Y+19	; 0x13
     df8:	21 30       	cpi	r18, 0x01	; 1
     dfa:	31 05       	cpc	r19, r1
     dfc:	d9 f1       	breq	.+118    	; 0xe74 <USART_enuInit+0x106>
     dfe:	8a 89       	ldd	r24, Y+18	; 0x12
     e00:	9b 89       	ldd	r25, Y+19	; 0x13
     e02:	82 30       	cpi	r24, 0x02	; 2
     e04:	91 05       	cpc	r25, r1
     e06:	09 f4       	brne	.+2      	; 0xe0a <USART_enuInit+0x9c>
     e08:	68 c0       	rjmp	.+208    	; 0xeda <USART_enuInit+0x16c>
     e0a:	ea 89       	ldd	r30, Y+18	; 0x12
     e0c:	fb 89       	ldd	r31, Y+19	; 0x13
     e0e:	30 97       	sbiw	r30, 0x00	; 0
     e10:	09 f0       	breq	.+2      	; 0xe14 <USART_enuInit+0xa6>
     e12:	a3 c0       	rjmp	.+326    	; 0xf5a <USART_enuInit+0x1ec>
		 *
		 *             F_CPU
		 * UBRR  =   ----------   - 1
		 *           16 * BAUD
		 */
		UBRR_f32Temp = ((f32)F_CPU/((16.0)*(USART0.BaudRate)))-0.5;
     e14:	80 91 6f 01 	lds	r24, 0x016F
     e18:	90 91 70 01 	lds	r25, 0x0170
     e1c:	cc 01       	movw	r24, r24
     e1e:	a0 e0       	ldi	r26, 0x00	; 0
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	bc 01       	movw	r22, r24
     e24:	cd 01       	movw	r24, r26
     e26:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
     e2a:	dc 01       	movw	r26, r24
     e2c:	cb 01       	movw	r24, r22
     e2e:	bc 01       	movw	r22, r24
     e30:	cd 01       	movw	r24, r26
     e32:	20 e0       	ldi	r18, 0x00	; 0
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	40 e8       	ldi	r20, 0x80	; 128
     e38:	51 e4       	ldi	r21, 0x41	; 65
     e3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e3e:	dc 01       	movw	r26, r24
     e40:	cb 01       	movw	r24, r22
     e42:	9c 01       	movw	r18, r24
     e44:	ad 01       	movw	r20, r26
     e46:	60 e0       	ldi	r22, 0x00	; 0
     e48:	74 e2       	ldi	r23, 0x24	; 36
     e4a:	84 e7       	ldi	r24, 0x74	; 116
     e4c:	99 e4       	ldi	r25, 0x49	; 73
     e4e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     e52:	dc 01       	movw	r26, r24
     e54:	cb 01       	movw	r24, r22
     e56:	bc 01       	movw	r22, r24
     e58:	cd 01       	movw	r24, r26
     e5a:	20 e0       	ldi	r18, 0x00	; 0
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	40 e0       	ldi	r20, 0x00	; 0
     e60:	5f e3       	ldi	r21, 0x3F	; 63
     e62:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
     e66:	dc 01       	movw	r26, r24
     e68:	cb 01       	movw	r24, r22
     e6a:	89 83       	std	Y+1, r24	; 0x01
     e6c:	9a 83       	std	Y+2, r25	; 0x02
     e6e:	ab 83       	std	Y+3, r26	; 0x03
     e70:	bc 83       	std	Y+4, r27	; 0x04
     e72:	73 c0       	rjmp	.+230    	; 0xf5a <USART_enuInit+0x1ec>
		 * UBRR  =   ----------   - 1
		 *            8 * BAUD
		 */

		//_Enable the Double the USART Transmission Speed Mode.
		UCSRA_u8Temp |=(USART_MSK_BIT<<U2X);
     e74:	8f 81       	ldd	r24, Y+7	; 0x07
     e76:	82 60       	ori	r24, 0x02	; 2
     e78:	8f 83       	std	Y+7, r24	; 0x07

		//_Calculate the UBRR Value According the Equation.
		UBRR_f32Temp = ((f32)F_CPU/((8.0)*(USART0.BaudRate)))-0.5;
     e7a:	80 91 6f 01 	lds	r24, 0x016F
     e7e:	90 91 70 01 	lds	r25, 0x0170
     e82:	cc 01       	movw	r24, r24
     e84:	a0 e0       	ldi	r26, 0x00	; 0
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	bc 01       	movw	r22, r24
     e8a:	cd 01       	movw	r24, r26
     e8c:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
     e90:	dc 01       	movw	r26, r24
     e92:	cb 01       	movw	r24, r22
     e94:	bc 01       	movw	r22, r24
     e96:	cd 01       	movw	r24, r26
     e98:	20 e0       	ldi	r18, 0x00	; 0
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	40 e0       	ldi	r20, 0x00	; 0
     e9e:	51 e4       	ldi	r21, 0x41	; 65
     ea0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ea4:	dc 01       	movw	r26, r24
     ea6:	cb 01       	movw	r24, r22
     ea8:	9c 01       	movw	r18, r24
     eaa:	ad 01       	movw	r20, r26
     eac:	60 e0       	ldi	r22, 0x00	; 0
     eae:	74 e2       	ldi	r23, 0x24	; 36
     eb0:	84 e7       	ldi	r24, 0x74	; 116
     eb2:	99 e4       	ldi	r25, 0x49	; 73
     eb4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     eb8:	dc 01       	movw	r26, r24
     eba:	cb 01       	movw	r24, r22
     ebc:	bc 01       	movw	r22, r24
     ebe:	cd 01       	movw	r24, r26
     ec0:	20 e0       	ldi	r18, 0x00	; 0
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	40 e0       	ldi	r20, 0x00	; 0
     ec6:	5f e3       	ldi	r21, 0x3F	; 63
     ec8:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
     ecc:	dc 01       	movw	r26, r24
     ece:	cb 01       	movw	r24, r22
     ed0:	89 83       	std	Y+1, r24	; 0x01
     ed2:	9a 83       	std	Y+2, r25	; 0x02
     ed4:	ab 83       	std	Y+3, r26	; 0x03
     ed6:	bc 83       	std	Y+4, r27	; 0x04
     ed8:	40 c0       	rjmp	.+128    	; 0xf5a <USART_enuInit+0x1ec>
		break;

	case USART_Sync:
		//_For Synchronous Operation.
		UCSRC_u8Temp |=(USART_MSK_BIT<<UMSEL);
     eda:	8d 81       	ldd	r24, Y+5	; 0x05
     edc:	80 64       	ori	r24, 0x40	; 64
     ede:	8d 83       	std	Y+5, r24	; 0x05
		 *
		 *             F_CPU
		 * UBRR  =   ----------   - 1
		 *            2 * BAUD
		 */
		UBRR_f32Temp = ((f32)F_CPU/((2.0)*(USART0.BaudRate)))-0.5;
     ee0:	80 91 6f 01 	lds	r24, 0x016F
     ee4:	90 91 70 01 	lds	r25, 0x0170
     ee8:	cc 01       	movw	r24, r24
     eea:	a0 e0       	ldi	r26, 0x00	; 0
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	bc 01       	movw	r22, r24
     ef0:	cd 01       	movw	r24, r26
     ef2:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
     ef6:	9b 01       	movw	r18, r22
     ef8:	ac 01       	movw	r20, r24
     efa:	ca 01       	movw	r24, r20
     efc:	b9 01       	movw	r22, r18
     efe:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
     f02:	dc 01       	movw	r26, r24
     f04:	cb 01       	movw	r24, r22
     f06:	9c 01       	movw	r18, r24
     f08:	ad 01       	movw	r20, r26
     f0a:	60 e0       	ldi	r22, 0x00	; 0
     f0c:	74 e2       	ldi	r23, 0x24	; 36
     f0e:	84 e7       	ldi	r24, 0x74	; 116
     f10:	99 e4       	ldi	r25, 0x49	; 73
     f12:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     f16:	dc 01       	movw	r26, r24
     f18:	cb 01       	movw	r24, r22
     f1a:	bc 01       	movw	r22, r24
     f1c:	cd 01       	movw	r24, r26
     f1e:	20 e0       	ldi	r18, 0x00	; 0
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	40 e0       	ldi	r20, 0x00	; 0
     f24:	5f e3       	ldi	r21, 0x3F	; 63
     f26:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
     f2a:	dc 01       	movw	r26, r24
     f2c:	cb 01       	movw	r24, r22
     f2e:	89 83       	std	Y+1, r24	; 0x01
     f30:	9a 83       	std	Y+2, r25	; 0x02
     f32:	ab 83       	std	Y+3, r26	; 0x03
     f34:	bc 83       	std	Y+4, r27	; 0x04


		switch(USART0.ClockPolarity)
     f36:	80 91 6e 01 	lds	r24, 0x016E
     f3a:	28 2f       	mov	r18, r24
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	39 8b       	std	Y+17, r19	; 0x11
     f40:	28 8b       	std	Y+16, r18	; 0x10
     f42:	88 89       	ldd	r24, Y+16	; 0x10
     f44:	99 89       	ldd	r25, Y+17	; 0x11
     f46:	00 97       	sbiw	r24, 0x00	; 0
     f48:	41 f0       	breq	.+16     	; 0xf5a <USART_enuInit+0x1ec>
     f4a:	e8 89       	ldd	r30, Y+16	; 0x10
     f4c:	f9 89       	ldd	r31, Y+17	; 0x11
     f4e:	e1 30       	cpi	r30, 0x01	; 1
     f50:	f1 05       	cpc	r31, r1
     f52:	19 f4       	brne	.+6      	; 0xf5a <USART_enuInit+0x1ec>
		{
		case USART_SmapleOnFalling:
			break;

		case USART_SmapleOnRasing:
			UCSRC_u8Temp |=(USART_MSK_BIT<<UCPOL);
     f54:	8d 81       	ldd	r24, Y+5	; 0x05
     f56:	81 60       	ori	r24, 0x01	; 1
     f58:	8d 83       	std	Y+5, r24	; 0x05

		default:
			break;
	}//End of switch( USART0.CommunicationMode).

	switch(USART0.CommunicationTerminal)
     f5a:	80 91 6a 01 	lds	r24, 0x016A
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	3f 87       	std	Y+15, r19	; 0x0f
     f64:	2e 87       	std	Y+14, r18	; 0x0e
     f66:	8e 85       	ldd	r24, Y+14	; 0x0e
     f68:	9f 85       	ldd	r25, Y+15	; 0x0f
     f6a:	00 97       	sbiw	r24, 0x00	; 0
     f6c:	41 f0       	breq	.+16     	; 0xf7e <USART_enuInit+0x210>
     f6e:	ee 85       	ldd	r30, Y+14	; 0x0e
     f70:	ff 85       	ldd	r31, Y+15	; 0x0f
     f72:	e1 30       	cpi	r30, 0x01	; 1
     f74:	f1 05       	cpc	r31, r1
     f76:	19 f4       	brne	.+6      	; 0xf7e <USART_enuInit+0x210>
		//Already Done.
		break;

	case USART_MultiProcessor:
		//_Enable the Multi_processor Communication mode.
		UCSRA_u8Temp |=(USART_MSK_BIT<<MPCM);
     f78:	8f 81       	ldd	r24, Y+7	; 0x07
     f7a:	81 60       	ori	r24, 0x01	; 1
     f7c:	8f 83       	std	Y+7, r24	; 0x07
		break;

	}//End of switch USART0.CommunicationTerminal.


	switch(USART0.InterruptSources)
     f7e:	80 91 6b 01 	lds	r24, 0x016B
     f82:	28 2f       	mov	r18, r24
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	3d 87       	std	Y+13, r19	; 0x0d
     f88:	2c 87       	std	Y+12, r18	; 0x0c
     f8a:	8c 85       	ldd	r24, Y+12	; 0x0c
     f8c:	9d 85       	ldd	r25, Y+13	; 0x0d
     f8e:	83 30       	cpi	r24, 0x03	; 3
     f90:	91 05       	cpc	r25, r1
     f92:	69 f1       	breq	.+90     	; 0xfee <USART_enuInit+0x280>
     f94:	ec 85       	ldd	r30, Y+12	; 0x0c
     f96:	fd 85       	ldd	r31, Y+13	; 0x0d
     f98:	e4 30       	cpi	r30, 0x04	; 4
     f9a:	f1 05       	cpc	r31, r1
     f9c:	5c f4       	brge	.+22     	; 0xfb4 <USART_enuInit+0x246>
     f9e:	2c 85       	ldd	r18, Y+12	; 0x0c
     fa0:	3d 85       	ldd	r19, Y+13	; 0x0d
     fa2:	21 30       	cpi	r18, 0x01	; 1
     fa4:	31 05       	cpc	r19, r1
     fa6:	d9 f0       	breq	.+54     	; 0xfde <USART_enuInit+0x270>
     fa8:	8c 85       	ldd	r24, Y+12	; 0x0c
     faa:	9d 85       	ldd	r25, Y+13	; 0x0d
     fac:	82 30       	cpi	r24, 0x02	; 2
     fae:	91 05       	cpc	r25, r1
     fb0:	d4 f4       	brge	.+52     	; 0xfe6 <USART_enuInit+0x278>
     fb2:	34 c0       	rjmp	.+104    	; 0x101c <USART_enuInit+0x2ae>
     fb4:	ec 85       	ldd	r30, Y+12	; 0x0c
     fb6:	fd 85       	ldd	r31, Y+13	; 0x0d
     fb8:	e5 30       	cpi	r30, 0x05	; 5
     fba:	f1 05       	cpc	r31, r1
     fbc:	21 f1       	breq	.+72     	; 0x1006 <USART_enuInit+0x298>
     fbe:	2c 85       	ldd	r18, Y+12	; 0x0c
     fc0:	3d 85       	ldd	r19, Y+13	; 0x0d
     fc2:	25 30       	cpi	r18, 0x05	; 5
     fc4:	31 05       	cpc	r19, r1
     fc6:	dc f0       	brlt	.+54     	; 0xffe <USART_enuInit+0x290>
     fc8:	8c 85       	ldd	r24, Y+12	; 0x0c
     fca:	9d 85       	ldd	r25, Y+13	; 0x0d
     fcc:	86 30       	cpi	r24, 0x06	; 6
     fce:	91 05       	cpc	r25, r1
     fd0:	f1 f0       	breq	.+60     	; 0x100e <USART_enuInit+0x2a0>
     fd2:	ec 85       	ldd	r30, Y+12	; 0x0c
     fd4:	fd 85       	ldd	r31, Y+13	; 0x0d
     fd6:	e7 30       	cpi	r30, 0x07	; 7
     fd8:	f1 05       	cpc	r31, r1
     fda:	e9 f0       	breq	.+58     	; 0x1016 <USART_enuInit+0x2a8>
     fdc:	1f c0       	rjmp	.+62     	; 0x101c <USART_enuInit+0x2ae>
	case USART_InterruptDisable :
		break;

		//_ Enables interrupt on the RXC Flag.
	case USART_RxCompletEnable:
		UCSRB_u8Temp |=(USART_MSK_BIT<<RXCIE);
     fde:	8e 81       	ldd	r24, Y+6	; 0x06
     fe0:	80 68       	ori	r24, 0x80	; 128
     fe2:	8e 83       	std	Y+6, r24	; 0x06
     fe4:	1b c0       	rjmp	.+54     	; 0x101c <USART_enuInit+0x2ae>
		break;

		//_ Enables interrupt on the TXC Flag.
	case USART_TxCompletEnable :
		UCSRB_u8Temp |=(USART_MSK_BIT<<TXCIE);
     fe6:	8e 81       	ldd	r24, Y+6	; 0x06
     fe8:	80 64       	ori	r24, 0x40	; 64
     fea:	8e 83       	std	Y+6, r24	; 0x06
     fec:	17 c0       	rjmp	.+46     	; 0x101c <USART_enuInit+0x2ae>
		break;

		//_ Enables interrupt on the UDRE Flag.
	case USART_UDR_EmptyEnable :
		UCSRB |=(USART_MSK_BIT<<UDRIE);
     fee:	aa e2       	ldi	r26, 0x2A	; 42
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	ea e2       	ldi	r30, 0x2A	; 42
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	80 62       	ori	r24, 0x20	; 32
     ffa:	8c 93       	st	X, r24
     ffc:	0f c0       	rjmp	.+30     	; 0x101c <USART_enuInit+0x2ae>
		break;

		//_ Enables interrupt on both TXC and RXC Flag.
	case USART_RxComplet_TxComplet_Enable:
		UCSRB_u8Temp |=(USART_MSK_BIT<<RXCIE) | (USART_MSK_BIT<<TXCIE);
     ffe:	8e 81       	ldd	r24, Y+6	; 0x06
    1000:	80 6c       	ori	r24, 0xC0	; 192
    1002:	8e 83       	std	Y+6, r24	; 0x06
    1004:	0b c0       	rjmp	.+22     	; 0x101c <USART_enuInit+0x2ae>
		break;


		//_ Enables interrupt on both RXC and The Date hes ben red from UDR Register.
	case USART_RxComplet_UDREmpty_Enable:
		UCSRB_u8Temp |=(USART_MSK_BIT<<RXCIE)|(USART_MSK_BIT<<UDRIE);
    1006:	8e 81       	ldd	r24, Y+6	; 0x06
    1008:	80 6a       	ori	r24, 0xA0	; 160
    100a:	8e 83       	std	Y+6, r24	; 0x06
    100c:	07 c0       	rjmp	.+14     	; 0x101c <USART_enuInit+0x2ae>
		break;


		//_ Enables interrupt on both TXC and The Date hes ben red from UDR Register.
	case USART_TxComplet_UDREmpty_Enable  :
		UCSRB_u8Temp |=(USART_MSK_BIT<<TXCIE)|(USART_MSK_BIT<<UDRIE);
    100e:	8e 81       	ldd	r24, Y+6	; 0x06
    1010:	80 66       	ori	r24, 0x60	; 96
    1012:	8e 83       	std	Y+6, r24	; 0x06
    1014:	03 c0       	rjmp	.+6      	; 0x101c <USART_enuInit+0x2ae>
		break;


		//_ Enables interrupt on RXC , TXC and The Date hes ben red from UDR Register.
	case USART_TxComplet_RxComplet_UDR_EmptyEnable:
		UCSRB_u8Temp |=(USART_MSK_BIT<<TXCIE)|(USART_MSK_BIT<<RXCIE)|(USART_MSK_BIT<<UDRIE);
    1016:	8e 81       	ldd	r24, Y+6	; 0x06
    1018:	80 6e       	ori	r24, 0xE0	; 224
    101a:	8e 83       	std	Y+6, r24	; 0x06
	/*******************************************
	 * -Character Size in Frame configuration
	 *  Using bits. UCSZ1 UCSZ0 in UCSRC Regis.
	 *  and UCSZ2 in UCSRB Regis.
	 *******************************************/
	switch(USART0.DataFrame)
    101c:	80 91 6c 01 	lds	r24, 0x016C
    1020:	28 2f       	mov	r18, r24
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	3b 87       	std	Y+11, r19	; 0x0b
    1026:	2a 87       	std	Y+10, r18	; 0x0a
    1028:	8a 85       	ldd	r24, Y+10	; 0x0a
    102a:	9b 85       	ldd	r25, Y+11	; 0x0b
    102c:	82 30       	cpi	r24, 0x02	; 2
    102e:	91 05       	cpc	r25, r1
    1030:	f9 f0       	breq	.+62     	; 0x1070 <USART_enuInit+0x302>
    1032:	ea 85       	ldd	r30, Y+10	; 0x0a
    1034:	fb 85       	ldd	r31, Y+11	; 0x0b
    1036:	e3 30       	cpi	r30, 0x03	; 3
    1038:	f1 05       	cpc	r31, r1
    103a:	5c f4       	brge	.+22     	; 0x1052 <USART_enuInit+0x2e4>
    103c:	2a 85       	ldd	r18, Y+10	; 0x0a
    103e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1040:	21 15       	cp	r18, r1
    1042:	31 05       	cpc	r19, r1
    1044:	19 f1       	breq	.+70     	; 0x108c <USART_enuInit+0x31e>
    1046:	8a 85       	ldd	r24, Y+10	; 0x0a
    1048:	9b 85       	ldd	r25, Y+11	; 0x0b
    104a:	81 30       	cpi	r24, 0x01	; 1
    104c:	91 05       	cpc	r25, r1
    104e:	61 f0       	breq	.+24     	; 0x1068 <USART_enuInit+0x2fa>
    1050:	1d c0       	rjmp	.+58     	; 0x108c <USART_enuInit+0x31e>
    1052:	ea 85       	ldd	r30, Y+10	; 0x0a
    1054:	fb 85       	ldd	r31, Y+11	; 0x0b
    1056:	e3 30       	cpi	r30, 0x03	; 3
    1058:	f1 05       	cpc	r31, r1
    105a:	71 f0       	breq	.+28     	; 0x1078 <USART_enuInit+0x30a>
    105c:	2a 85       	ldd	r18, Y+10	; 0x0a
    105e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1060:	24 30       	cpi	r18, 0x04	; 4
    1062:	31 05       	cpc	r19, r1
    1064:	69 f0       	breq	.+26     	; 0x1080 <USART_enuInit+0x312>
    1066:	12 c0       	rjmp	.+36     	; 0x108c <USART_enuInit+0x31e>
	{
	case USART_5bitData :
		break;
	case USART_6bitData :
		UCSRC_u8Temp |=(USART_MSK_BIT<<UCSZ0);
    1068:	8d 81       	ldd	r24, Y+5	; 0x05
    106a:	82 60       	ori	r24, 0x02	; 2
    106c:	8d 83       	std	Y+5, r24	; 0x05
    106e:	0e c0       	rjmp	.+28     	; 0x108c <USART_enuInit+0x31e>
		break;
	case USART_7bitData :
		UCSRC_u8Temp |=(USART_MSK_BIT<<UCSZ1);
    1070:	8d 81       	ldd	r24, Y+5	; 0x05
    1072:	84 60       	ori	r24, 0x04	; 4
    1074:	8d 83       	std	Y+5, r24	; 0x05
    1076:	0a c0       	rjmp	.+20     	; 0x108c <USART_enuInit+0x31e>
		break;
	case USART_8bitData :
		UCSRC_u8Temp |=(USART_MSK_BIT<<UCSZ0)|(USART_MSK_BIT<<UCSZ1);
    1078:	8d 81       	ldd	r24, Y+5	; 0x05
    107a:	86 60       	ori	r24, 0x06	; 6
    107c:	8d 83       	std	Y+5, r24	; 0x05
    107e:	06 c0       	rjmp	.+12     	; 0x108c <USART_enuInit+0x31e>
		break;
	case USART_9bitData :
		UCSRC_u8Temp |=(USART_MSK_BIT<<UCSZ0)|(USART_MSK_BIT<<UCSZ1);
    1080:	8d 81       	ldd	r24, Y+5	; 0x05
    1082:	86 60       	ori	r24, 0x06	; 6
    1084:	8d 83       	std	Y+5, r24	; 0x05
		UCSRB_u8Temp |=(USART_MSK_BIT<<UCSZ2);
    1086:	8e 81       	ldd	r24, Y+6	; 0x06
    1088:	84 60       	ori	r24, 0x04	; 4
    108a:	8e 83       	std	Y+6, r24	; 0x06


	/*******************************************
	 *_Parity and  Stop Bit Handling.
	 *******************************************/
	switch(USART0.FrameControl)
    108c:	80 91 6d 01 	lds	r24, 0x016D
    1090:	e8 2f       	mov	r30, r24
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	f9 87       	std	Y+9, r31	; 0x09
    1096:	e8 87       	std	Y+8, r30	; 0x08
    1098:	28 85       	ldd	r18, Y+8	; 0x08
    109a:	39 85       	ldd	r19, Y+9	; 0x09
    109c:	22 30       	cpi	r18, 0x02	; 2
    109e:	31 05       	cpc	r19, r1
    10a0:	19 f1       	breq	.+70     	; 0x10e8 <USART_enuInit+0x37a>
    10a2:	88 85       	ldd	r24, Y+8	; 0x08
    10a4:	99 85       	ldd	r25, Y+9	; 0x09
    10a6:	83 30       	cpi	r24, 0x03	; 3
    10a8:	91 05       	cpc	r25, r1
    10aa:	54 f4       	brge	.+20     	; 0x10c0 <USART_enuInit+0x352>
    10ac:	e8 85       	ldd	r30, Y+8	; 0x08
    10ae:	f9 85       	ldd	r31, Y+9	; 0x09
    10b0:	30 97       	sbiw	r30, 0x00	; 0
    10b2:	49 f1       	breq	.+82     	; 0x1106 <USART_enuInit+0x398>
    10b4:	28 85       	ldd	r18, Y+8	; 0x08
    10b6:	39 85       	ldd	r19, Y+9	; 0x09
    10b8:	21 30       	cpi	r18, 0x01	; 1
    10ba:	31 05       	cpc	r19, r1
    10bc:	89 f0       	breq	.+34     	; 0x10e0 <USART_enuInit+0x372>
    10be:	23 c0       	rjmp	.+70     	; 0x1106 <USART_enuInit+0x398>
    10c0:	88 85       	ldd	r24, Y+8	; 0x08
    10c2:	99 85       	ldd	r25, Y+9	; 0x09
    10c4:	84 30       	cpi	r24, 0x04	; 4
    10c6:	91 05       	cpc	r25, r1
    10c8:	b9 f0       	breq	.+46     	; 0x10f8 <USART_enuInit+0x38a>
    10ca:	e8 85       	ldd	r30, Y+8	; 0x08
    10cc:	f9 85       	ldd	r31, Y+9	; 0x09
    10ce:	e4 30       	cpi	r30, 0x04	; 4
    10d0:	f1 05       	cpc	r31, r1
    10d2:	74 f0       	brlt	.+28     	; 0x10f0 <USART_enuInit+0x382>
    10d4:	28 85       	ldd	r18, Y+8	; 0x08
    10d6:	39 85       	ldd	r19, Y+9	; 0x09
    10d8:	25 30       	cpi	r18, 0x05	; 5
    10da:	31 05       	cpc	r19, r1
    10dc:	89 f0       	breq	.+34     	; 0x1100 <USART_enuInit+0x392>
    10de:	13 c0       	rjmp	.+38     	; 0x1106 <USART_enuInit+0x398>
	{
	case USART_ParityDisable_1stopBit:
		break;

	case USART_ParityDisable_2stopBit:
		UCSRC_u8Temp |=(USART_MSK_BIT<<USBS);
    10e0:	8d 81       	ldd	r24, Y+5	; 0x05
    10e2:	88 60       	ori	r24, 0x08	; 8
    10e4:	8d 83       	std	Y+5, r24	; 0x05
    10e6:	0f c0       	rjmp	.+30     	; 0x1106 <USART_enuInit+0x398>
		break;

	case USART_ParityEven_1stopBit:
		UCSRC_u8Temp |=(USART_MSK_BIT<<UPM1);
    10e8:	8d 81       	ldd	r24, Y+5	; 0x05
    10ea:	80 62       	ori	r24, 0x20	; 32
    10ec:	8d 83       	std	Y+5, r24	; 0x05
    10ee:	0b c0       	rjmp	.+22     	; 0x1106 <USART_enuInit+0x398>
		break;

	case USART_ParityEven_2stopBit:
		UCSRC_u8Temp |=(USART_MSK_BIT<<UPM1)|(USART_MSK_BIT<<USBS);
    10f0:	8d 81       	ldd	r24, Y+5	; 0x05
    10f2:	88 62       	ori	r24, 0x28	; 40
    10f4:	8d 83       	std	Y+5, r24	; 0x05
    10f6:	07 c0       	rjmp	.+14     	; 0x1106 <USART_enuInit+0x398>
		break;

	case USART_ParityOdd_1stopBit:
		UCSRC_u8Temp |=(USART_MSK_BIT<<UPM0)|(USART_MSK_BIT<<UPM1);
    10f8:	8d 81       	ldd	r24, Y+5	; 0x05
    10fa:	80 63       	ori	r24, 0x30	; 48
    10fc:	8d 83       	std	Y+5, r24	; 0x05
    10fe:	03 c0       	rjmp	.+6      	; 0x1106 <USART_enuInit+0x398>
		break;
	case USART_ParityOdd_2stopBit:
		UCSRC_u8Temp |=(USART_MSK_BIT<<UPM0)|(USART_MSK_BIT<<UPM1)|(USART_MSK_BIT<<USBS);
    1100:	8d 81       	ldd	r24, Y+5	; 0x05
    1102:	88 63       	ori	r24, 0x38	; 56
    1104:	8d 83       	std	Y+5, r24	; 0x05

	} //End of frame Control switch().



	UCSRC_u8Temp |=(USART_MSK_BIT<<URSEL);
    1106:	8d 81       	ldd	r24, Y+5	; 0x05
    1108:	80 68       	ori	r24, 0x80	; 128
    110a:	8d 83       	std	Y+5, r24	; 0x05

	UBRRL = (u8)UBRR_f32Temp;
    110c:	09 e2       	ldi	r16, 0x29	; 41
    110e:	10 e0       	ldi	r17, 0x00	; 0
    1110:	69 81       	ldd	r22, Y+1	; 0x01
    1112:	7a 81       	ldd	r23, Y+2	; 0x02
    1114:	8b 81       	ldd	r24, Y+3	; 0x03
    1116:	9c 81       	ldd	r25, Y+4	; 0x04
    1118:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    111c:	dc 01       	movw	r26, r24
    111e:	cb 01       	movw	r24, r22
    1120:	f8 01       	movw	r30, r16
    1122:	80 83       	st	Z, r24
	UBRRH = ( ((u16)UBRR_f32Temp)>>8 );
    1124:	00 e4       	ldi	r16, 0x40	; 64
    1126:	10 e0       	ldi	r17, 0x00	; 0
    1128:	69 81       	ldd	r22, Y+1	; 0x01
    112a:	7a 81       	ldd	r23, Y+2	; 0x02
    112c:	8b 81       	ldd	r24, Y+3	; 0x03
    112e:	9c 81       	ldd	r25, Y+4	; 0x04
    1130:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1134:	dc 01       	movw	r26, r24
    1136:	cb 01       	movw	r24, r22
    1138:	89 2f       	mov	r24, r25
    113a:	99 27       	eor	r25, r25
    113c:	f8 01       	movw	r30, r16
    113e:	80 83       	st	Z, r24

	UCSRA= UCSRA_u8Temp;
    1140:	eb e2       	ldi	r30, 0x2B	; 43
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	8f 81       	ldd	r24, Y+7	; 0x07
    1146:	80 83       	st	Z, r24

	UCSRC= UCSRC_u8Temp;
    1148:	e0 e4       	ldi	r30, 0x40	; 64
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	8d 81       	ldd	r24, Y+5	; 0x05
    114e:	80 83       	st	Z, r24
	UCSRB= UCSRB_u8Temp;
    1150:	ea e2       	ldi	r30, 0x2A	; 42
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	8e 81       	ldd	r24, Y+6	; 0x06
    1156:	80 83       	st	Z, r24


}//End of UART_enuInit().
    1158:	65 96       	adiw	r28, 0x15	; 21
    115a:	0f b6       	in	r0, 0x3f	; 63
    115c:	f8 94       	cli
    115e:	de bf       	out	0x3e, r29	; 62
    1160:	0f be       	out	0x3f, r0	; 63
    1162:	cd bf       	out	0x3d, r28	; 61
    1164:	cf 91       	pop	r28
    1166:	df 91       	pop	r29
    1168:	1f 91       	pop	r17
    116a:	0f 91       	pop	r16
    116c:	08 95       	ret

0000116e <USART_enuSendByteSync>:
/* Description     : Polling technique based function To Send one Byte.     */
/* Argument        : The byte to be transmitted.                            */
/* Return          : Error state of type ES_t.                              */
/**.........................................................****************/
USART_ES_t USART_enuSendByteSync( u16 const* const Copy_pu16Data  )
{
    116e:	df 93       	push	r29
    1170:	cf 93       	push	r28
    1172:	00 d0       	rcall	.+0      	; 0x1174 <USART_enuSendByteSync+0x6>
    1174:	0f 92       	push	r0
    1176:	cd b7       	in	r28, 0x3d	; 61
    1178:	de b7       	in	r29, 0x3e	; 62
    117a:	9b 83       	std	Y+3, r25	; 0x03
    117c:	8a 83       	std	Y+2, r24	; 0x02
	USART_ES_t Local_enuUSART_Error_State = USART_No_Error ;
    117e:	19 82       	std	Y+1, r1	; 0x01

	if( Copy_pu16Data != NULL )
    1180:	8a 81       	ldd	r24, Y+2	; 0x02
    1182:	9b 81       	ldd	r25, Y+3	; 0x03
    1184:	00 97       	sbiw	r24, 0x00	; 0
    1186:	81 f1       	breq	.+96     	; 0x11e8 <USART_enuSendByteSync+0x7a>
	{
		// Poll the for the UDRE
		while( !((UCSRA>>UDRE) & USART_MSK_BIT) );
    1188:	eb e2       	ldi	r30, 0x2B	; 43
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 81       	ld	r24, Z
    118e:	82 95       	swap	r24
    1190:	86 95       	lsr	r24
    1192:	87 70       	andi	r24, 0x07	; 7
    1194:	88 2f       	mov	r24, r24
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	81 70       	andi	r24, 0x01	; 1
    119a:	90 70       	andi	r25, 0x00	; 0
    119c:	00 97       	sbiw	r24, 0x00	; 0
    119e:	a1 f3       	breq	.-24     	; 0x1188 <USART_enuSendByteSync+0x1a>

		if(  USART0.DataFrame == USART_9bitData )
    11a0:	80 91 6c 01 	lds	r24, 0x016C
    11a4:	84 30       	cpi	r24, 0x04	; 4
    11a6:	c1 f4       	brne	.+48     	; 0x11d8 <USART_enuSendByteSync+0x6a>
		{
		   /**************************************************
			 * Clear the TXB8 bit in the UCSRB to make sure it
			 * is clean before writing the new Data.
			**************************************************/
			UCSRB &=~(USART_MSK_BIT<<TXB8);
    11a8:	aa e2       	ldi	r26, 0x2A	; 42
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	ea e2       	ldi	r30, 0x2A	; 42
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	8e 7f       	andi	r24, 0xFE	; 254
    11b4:	8c 93       	st	X, r24

			//_Write 9th bit in TXB8 in reg. UCSRB.
			UCSRB |=(((*Copy_pu16Data)>>7)&USART_MSK_BIT);
    11b6:	aa e2       	ldi	r26, 0x2A	; 42
    11b8:	b0 e0       	ldi	r27, 0x00	; 0
    11ba:	ea e2       	ldi	r30, 0x2A	; 42
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	20 81       	ld	r18, Z
    11c0:	ea 81       	ldd	r30, Y+2	; 0x02
    11c2:	fb 81       	ldd	r31, Y+3	; 0x03
    11c4:	80 81       	ld	r24, Z
    11c6:	91 81       	ldd	r25, Z+1	; 0x01
    11c8:	88 0f       	add	r24, r24
    11ca:	89 2f       	mov	r24, r25
    11cc:	88 1f       	adc	r24, r24
    11ce:	99 0b       	sbc	r25, r25
    11d0:	91 95       	neg	r25
    11d2:	81 70       	andi	r24, 0x01	; 1
    11d4:	82 2b       	or	r24, r18
    11d6:	8c 93       	st	X, r24
		}
		else{ /*_Nothing to Do!  */ }

		UDR = (u8)(*Copy_pu16Data) ;
    11d8:	ac e2       	ldi	r26, 0x2C	; 44
    11da:	b0 e0       	ldi	r27, 0x00	; 0
    11dc:	ea 81       	ldd	r30, Y+2	; 0x02
    11de:	fb 81       	ldd	r31, Y+3	; 0x03
    11e0:	80 81       	ld	r24, Z
    11e2:	91 81       	ldd	r25, Z+1	; 0x01
    11e4:	8c 93       	st	X, r24
    11e6:	02 c0       	rjmp	.+4      	; 0x11ec <USART_enuSendByteSync+0x7e>

	}
	else
	{
		Local_enuUSART_Error_State = USART_Null_Pointer ;
    11e8:	85 e0       	ldi	r24, 0x05	; 5
    11ea:	89 83       	std	Y+1, r24	; 0x01
	}


	//Check for the Completion of Transmition.
	if( (UCSRA>>TXC)&1 )
    11ec:	eb e2       	ldi	r30, 0x2B	; 43
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	82 95       	swap	r24
    11f4:	86 95       	lsr	r24
    11f6:	86 95       	lsr	r24
    11f8:	83 70       	andi	r24, 0x03	; 3
    11fa:	88 2f       	mov	r24, r24
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	81 70       	andi	r24, 0x01	; 1
    1200:	90 70       	andi	r25, 0x00	; 0
    1202:	88 23       	and	r24, r24
    1204:	49 f0       	breq	.+18     	; 0x1218 <USART_enuSendByteSync+0xaa>
	{
		//Clear the flag.
		UCSRA |=(USART_MSK_BIT<<TXC);
    1206:	ab e2       	ldi	r26, 0x2B	; 43
    1208:	b0 e0       	ldi	r27, 0x00	; 0
    120a:	eb e2       	ldi	r30, 0x2B	; 43
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	80 64       	ori	r24, 0x40	; 64
    1212:	8c 93       	st	X, r24

		Local_enuUSART_Error_State = USART_No_Error ;
    1214:	19 82       	std	Y+1, r1	; 0x01
    1216:	02 c0       	rjmp	.+4      	; 0x121c <USART_enuSendByteSync+0xae>
	}
	else
	{
		Local_enuUSART_Error_State = USART_TX_Error;
    1218:	84 e0       	ldi	r24, 0x04	; 4
    121a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuUSART_Error_State  ;
    121c:	89 81       	ldd	r24, Y+1	; 0x01
}//End of UART_enuSendByte().
    121e:	0f 90       	pop	r0
    1220:	0f 90       	pop	r0
    1222:	0f 90       	pop	r0
    1224:	cf 91       	pop	r28
    1226:	df 91       	pop	r29
    1228:	08 95       	ret

0000122a <USART_enuRecieveByteSync>:
/* Description     : Polling technique based function To Receive one Byte.  */
/* Argument        : Address of u8 Variable to write the Received data in.  */
/* Return          : Error state of type USART_ES_t.                        */
/**...........................................................***************/
USART_ES_t USART_enuRecieveByteSync( u16*const Copy_pu16Data )
{
    122a:	df 93       	push	r29
    122c:	cf 93       	push	r28
    122e:	00 d0       	rcall	.+0      	; 0x1230 <USART_enuRecieveByteSync+0x6>
    1230:	0f 92       	push	r0
    1232:	cd b7       	in	r28, 0x3d	; 61
    1234:	de b7       	in	r29, 0x3e	; 62
    1236:	9b 83       	std	Y+3, r25	; 0x03
    1238:	8a 83       	std	Y+2, r24	; 0x02

	USART_ES_t Local_enuUSART_Error_State = USART_No_Error ;
    123a:	19 82       	std	Y+1, r1	; 0x01

	if(  Copy_pu16Data != NULL  )
    123c:	8a 81       	ldd	r24, Y+2	; 0x02
    123e:	9b 81       	ldd	r25, Y+3	; 0x03
    1240:	00 97       	sbiw	r24, 0x00	; 0
    1242:	09 f4       	brne	.+2      	; 0x1246 <USART_enuRecieveByteSync+0x1c>
    1244:	7b c0       	rjmp	.+246    	; 0x133c <USART_enuRecieveByteSync+0x112>
	{
		//There is NO Data to Read.
		while( !(( UCSRA>>RXC) & USART_MSK_BIT) ){};
    1246:	eb e2       	ldi	r30, 0x2B	; 43
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	80 81       	ld	r24, Z
    124c:	88 23       	and	r24, r24
    124e:	dc f7       	brge	.-10     	; 0x1246 <USART_enuRecieveByteSync+0x1c>

		if( USART_FRAME_ERROR  | USART_DATA_OVER_RUN_ERROR | USART_PRITY_ERROR)
    1250:	eb e2       	ldi	r30, 0x2B	; 43
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	82 95       	swap	r24
    1258:	8f 70       	andi	r24, 0x0F	; 15
    125a:	28 2f       	mov	r18, r24
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	eb e2       	ldi	r30, 0x2B	; 43
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	86 95       	lsr	r24
    1266:	86 95       	lsr	r24
    1268:	86 95       	lsr	r24
    126a:	88 2f       	mov	r24, r24
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	28 2b       	or	r18, r24
    1270:	39 2b       	or	r19, r25
    1272:	eb e2       	ldi	r30, 0x2B	; 43
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	86 95       	lsr	r24
    127a:	86 95       	lsr	r24
    127c:	88 2f       	mov	r24, r24
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	82 2b       	or	r24, r18
    1282:	93 2b       	or	r25, r19
    1284:	81 70       	andi	r24, 0x01	; 1
    1286:	90 70       	andi	r25, 0x00	; 0
    1288:	88 23       	and	r24, r24
    128a:	01 f1       	breq	.+64     	; 0x12cc <USART_enuRecieveByteSync+0xa2>
		{
			if( USART_FRAME_ERROR )
    128c:	eb e2       	ldi	r30, 0x2B	; 43
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	82 95       	swap	r24
    1294:	8f 70       	andi	r24, 0x0F	; 15
    1296:	88 2f       	mov	r24, r24
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	81 70       	andi	r24, 0x01	; 1
    129c:	90 70       	andi	r25, 0x00	; 0
    129e:	88 23       	and	r24, r24
    12a0:	19 f0       	breq	.+6      	; 0x12a8 <USART_enuRecieveByteSync+0x7e>
			{
				//_ Frame Error Handling Code.
				Local_enuUSART_Error_State  = USART_Frame_Error     ;
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	89 83       	std	Y+1, r24	; 0x01
    12a6:	4c c0       	rjmp	.+152    	; 0x1340 <USART_enuRecieveByteSync+0x116>

			}
			else if ( USART_DATA_OVER_RUN_ERROR )
    12a8:	eb e2       	ldi	r30, 0x2B	; 43
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	86 95       	lsr	r24
    12b0:	86 95       	lsr	r24
    12b2:	86 95       	lsr	r24
    12b4:	88 2f       	mov	r24, r24
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	81 70       	andi	r24, 0x01	; 1
    12ba:	90 70       	andi	r25, 0x00	; 0
    12bc:	88 23       	and	r24, r24
    12be:	19 f0       	breq	.+6      	; 0x12c6 <USART_enuRecieveByteSync+0x9c>
			{
				//_ Data Over Run Error Handling Code.
				Local_enuUSART_Error_State  = USART_Data_Over_Run_Error   ;
    12c0:	82 e0       	ldi	r24, 0x02	; 2
    12c2:	89 83       	std	Y+1, r24	; 0x01
    12c4:	3d c0       	rjmp	.+122    	; 0x1340 <USART_enuRecieveByteSync+0x116>
			}
			else
			{
				//_ Parity Error Handling Code.
				Local_enuUSART_Error_State  =  USART_Parity_Error  ;
    12c6:	83 e0       	ldi	r24, 0x03	; 3
    12c8:	89 83       	std	Y+1, r24	; 0x01
    12ca:	3a c0       	rjmp	.+116    	; 0x1340 <USART_enuRecieveByteSync+0x116>
			}

		}
		else  //_ No Error Occurred.
		{
			if( USART0.DataFrame == USART_9bitData )
    12cc:	80 91 6c 01 	lds	r24, 0x016C
    12d0:	84 30       	cpi	r24, 0x04	; 4
    12d2:	d9 f4       	brne	.+54     	; 0x130a <USART_enuRecieveByteSync+0xe0>
				 * *Copy_pu16Data = 0000 0001 0000 0000
				 *
				 */

				//_Clear Variable before Receiving a new data.
				*Copy_pu16Data  &=0x0000   ;
    12d4:	ea 81       	ldd	r30, Y+2	; 0x02
    12d6:	fb 81       	ldd	r31, Y+3	; 0x03
    12d8:	11 82       	std	Z+1, r1	; 0x01
    12da:	10 82       	st	Z, r1

				*Copy_pu16Data = (( (UCSRB>>RXB8)&USART_MSK_BIT)<<7);
    12dc:	ea e2       	ldi	r30, 0x2A	; 42
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	80 81       	ld	r24, Z
    12e2:	86 95       	lsr	r24
    12e4:	88 2f       	mov	r24, r24
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	96 95       	lsr	r25
    12ea:	98 2f       	mov	r25, r24
    12ec:	88 27       	eor	r24, r24
    12ee:	97 95       	ror	r25
    12f0:	87 95       	ror	r24
    12f2:	90 70       	andi	r25, 0x00	; 0
    12f4:	ea 81       	ldd	r30, Y+2	; 0x02
    12f6:	fb 81       	ldd	r31, Y+3	; 0x03
    12f8:	91 83       	std	Z+1, r25	; 0x01
    12fa:	80 83       	st	Z, r24

				//_Clear the RXB8 Bit After Reading.
				UCSRB &=~(USART_MSK_BIT<<RXB8);
    12fc:	aa e2       	ldi	r26, 0x2A	; 42
    12fe:	b0 e0       	ldi	r27, 0x00	; 0
    1300:	ea e2       	ldi	r30, 0x2A	; 42
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	80 81       	ld	r24, Z
    1306:	8d 7f       	andi	r24, 0xFD	; 253
    1308:	8c 93       	st	X, r24

			}
			else{}

			//_Clear the first eight bits in the Variable before Receiving a new data.
			*Copy_pu16Data  &=0xFF00   ;
    130a:	ea 81       	ldd	r30, Y+2	; 0x02
    130c:	fb 81       	ldd	r31, Y+3	; 0x03
    130e:	80 81       	ld	r24, Z
    1310:	91 81       	ldd	r25, Z+1	; 0x01
    1312:	80 70       	andi	r24, 0x00	; 0
    1314:	ea 81       	ldd	r30, Y+2	; 0x02
    1316:	fb 81       	ldd	r31, Y+3	; 0x03
    1318:	91 83       	std	Z+1, r25	; 0x01
    131a:	80 83       	st	Z, r24

			//_Write the new Data in the variable .
			*Copy_pu16Data |= UDR ;
    131c:	ea 81       	ldd	r30, Y+2	; 0x02
    131e:	fb 81       	ldd	r31, Y+3	; 0x03
    1320:	20 81       	ld	r18, Z
    1322:	31 81       	ldd	r19, Z+1	; 0x01
    1324:	ec e2       	ldi	r30, 0x2C	; 44
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	88 2f       	mov	r24, r24
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	82 2b       	or	r24, r18
    1330:	93 2b       	or	r25, r19
    1332:	ea 81       	ldd	r30, Y+2	; 0x02
    1334:	fb 81       	ldd	r31, Y+3	; 0x03
    1336:	91 83       	std	Z+1, r25	; 0x01
    1338:	80 83       	st	Z, r24
    133a:	02 c0       	rjmp	.+4      	; 0x1340 <USART_enuRecieveByteSync+0x116>
		}

	}
	else
	{
		Local_enuUSART_Error_State  = USART_Null_Pointer ;
    133c:	85 e0       	ldi	r24, 0x05	; 5
    133e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuUSART_Error_State  ;
    1340:	89 81       	ldd	r24, Y+1	; 0x01

}//End of USART_enuRecieveByteSync().
    1342:	0f 90       	pop	r0
    1344:	0f 90       	pop	r0
    1346:	0f 90       	pop	r0
    1348:	cf 91       	pop	r28
    134a:	df 91       	pop	r29
    134c:	08 95       	ret

0000134e <USART_enuRecieveStringSync>:




USART_ES_t USART_enuRecieveStringSync( u8*const Copy_pu8Data )
{
    134e:	df 93       	push	r29
    1350:	cf 93       	push	r28
    1352:	00 d0       	rcall	.+0      	; 0x1354 <USART_enuRecieveStringSync+0x6>
    1354:	00 d0       	rcall	.+0      	; 0x1356 <USART_enuRecieveStringSync+0x8>
    1356:	00 d0       	rcall	.+0      	; 0x1358 <USART_enuRecieveStringSync+0xa>
    1358:	cd b7       	in	r28, 0x3d	; 61
    135a:	de b7       	in	r29, 0x3e	; 62
    135c:	9e 83       	std	Y+6, r25	; 0x06
    135e:	8d 83       	std	Y+5, r24	; 0x05
	ES_t Local_enuErrorState  = ES_NOK ;
    1360:	1c 82       	std	Y+4, r1	; 0x04

	if( Copy_pu8Data != 	NULL )
    1362:	8d 81       	ldd	r24, Y+5	; 0x05
    1364:	9e 81       	ldd	r25, Y+6	; 0x06
    1366:	00 97       	sbiw	r24, 0x00	; 0
    1368:	91 f1       	breq	.+100    	; 0x13ce <USART_enuRecieveStringSync+0x80>
	{
		u8 Local_u8Data  = 0  ;
    136a:	1b 82       	std	Y+3, r1	; 0x03

		u8 Local_u8Index = 0  ;
    136c:	1a 82       	std	Y+2, r1	; 0x02

		while( !((UCSRA>>RXC)&USART_MSK_BIT) );
    136e:	eb e2       	ldi	r30, 0x2B	; 43
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	88 23       	and	r24, r24
    1376:	dc f7       	brge	.-10     	; 0x136e <USART_enuRecieveStringSync+0x20>

		u8 Local_u8Terminator = UDR ;
    1378:	ec e2       	ldi	r30, 0x2C	; 44
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	89 83       	std	Y+1, r24	; 0x01

		while(1)
		{
			while( !((UCSRA>>RXC)&USART_MSK_BIT) );
    1380:	eb e2       	ldi	r30, 0x2B	; 43
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	80 81       	ld	r24, Z
    1386:	88 23       	and	r24, r24
    1388:	dc f7       	brge	.-10     	; 0x1380 <USART_enuRecieveStringSync+0x32>

			Local_u8Data = UDR ;
    138a:	ec e2       	ldi	r30, 0x2C	; 44
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	8b 83       	std	Y+3, r24	; 0x03

			if(Local_u8Data == Local_u8Terminator )
    1392:	9b 81       	ldd	r25, Y+3	; 0x03
    1394:	89 81       	ldd	r24, Y+1	; 0x01
    1396:	98 17       	cp	r25, r24
    1398:	61 f4       	brne	.+24     	; 0x13b2 <USART_enuRecieveStringSync+0x64>
			{
				Copy_pu8Data[Local_u8Index] = '\0' ;
    139a:	8a 81       	ldd	r24, Y+2	; 0x02
    139c:	28 2f       	mov	r18, r24
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	8d 81       	ldd	r24, Y+5	; 0x05
    13a2:	9e 81       	ldd	r25, Y+6	; 0x06
    13a4:	fc 01       	movw	r30, r24
    13a6:	e2 0f       	add	r30, r18
    13a8:	f3 1f       	adc	r31, r19
    13aa:	10 82       	st	Z, r1
				Local_u8Index++ ;
			}

		}

		Local_enuErrorState = ES_OK ;
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	8c 83       	std	Y+4, r24	; 0x04
    13b0:	10 c0       	rjmp	.+32     	; 0x13d2 <USART_enuRecieveStringSync+0x84>

				break;
			}
			else
			{
				Copy_pu8Data[Local_u8Index] = Local_u8Data ;
    13b2:	8a 81       	ldd	r24, Y+2	; 0x02
    13b4:	28 2f       	mov	r18, r24
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	8d 81       	ldd	r24, Y+5	; 0x05
    13ba:	9e 81       	ldd	r25, Y+6	; 0x06
    13bc:	fc 01       	movw	r30, r24
    13be:	e2 0f       	add	r30, r18
    13c0:	f3 1f       	adc	r31, r19
    13c2:	8b 81       	ldd	r24, Y+3	; 0x03
    13c4:	80 83       	st	Z, r24

				Local_u8Index++ ;
    13c6:	8a 81       	ldd	r24, Y+2	; 0x02
    13c8:	8f 5f       	subi	r24, 0xFF	; 255
    13ca:	8a 83       	std	Y+2, r24	; 0x02
    13cc:	d9 cf       	rjmp	.-78     	; 0x1380 <USART_enuRecieveStringSync+0x32>

		Local_enuErrorState = ES_OK ;
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER ;
    13ce:	82 e0       	ldi	r24, 0x02	; 2
    13d0:	8c 83       	std	Y+4, r24	; 0x04
	}

	return Local_enuErrorState  ;
    13d2:	8c 81       	ldd	r24, Y+4	; 0x04
}//End of USART_enuRecieveStringSync().
    13d4:	26 96       	adiw	r28, 0x06	; 6
    13d6:	0f b6       	in	r0, 0x3f	; 63
    13d8:	f8 94       	cli
    13da:	de bf       	out	0x3e, r29	; 62
    13dc:	0f be       	out	0x3f, r0	; 63
    13de:	cd bf       	out	0x3d, r28	; 61
    13e0:	cf 91       	pop	r28
    13e2:	df 91       	pop	r29
    13e4:	08 95       	ret

000013e6 <USART_enuSendStringSync>:


USART_ES_t USART_enuSendStringSync( u8 const* Copy_pu8Data )
{
    13e6:	df 93       	push	r29
    13e8:	cf 93       	push	r28
    13ea:	00 d0       	rcall	.+0      	; 0x13ec <USART_enuSendStringSync+0x6>
    13ec:	0f 92       	push	r0
    13ee:	cd b7       	in	r28, 0x3d	; 61
    13f0:	de b7       	in	r29, 0x3e	; 62
    13f2:	9b 83       	std	Y+3, r25	; 0x03
    13f4:	8a 83       	std	Y+2, r24	; 0x02
	USART_ES_t Local_enuUSARTErrorState  = ES_NOK ;
    13f6:	19 82       	std	Y+1, r1	; 0x01

	if( Copy_pu8Data != NULL )
    13f8:	8a 81       	ldd	r24, Y+2	; 0x02
    13fa:	9b 81       	ldd	r25, Y+3	; 0x03
    13fc:	00 97       	sbiw	r24, 0x00	; 0
    13fe:	f1 f0       	breq	.+60     	; 0x143c <USART_enuSendStringSync+0x56>
    1400:	17 c0       	rjmp	.+46     	; 0x1430 <USART_enuSendStringSync+0x4a>
	{

		while( *Copy_pu8Data != '\0')
		{

			while( !((UCSRA>>UDRE)&USART_MSK_BIT) );
    1402:	eb e2       	ldi	r30, 0x2B	; 43
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	80 81       	ld	r24, Z
    1408:	82 95       	swap	r24
    140a:	86 95       	lsr	r24
    140c:	87 70       	andi	r24, 0x07	; 7
    140e:	88 2f       	mov	r24, r24
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	81 70       	andi	r24, 0x01	; 1
    1414:	90 70       	andi	r25, 0x00	; 0
    1416:	00 97       	sbiw	r24, 0x00	; 0
    1418:	a1 f3       	breq	.-24     	; 0x1402 <USART_enuSendStringSync+0x1c>

			UDR = *Copy_pu8Data ;
    141a:	ac e2       	ldi	r26, 0x2C	; 44
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	ea 81       	ldd	r30, Y+2	; 0x02
    1420:	fb 81       	ldd	r31, Y+3	; 0x03
    1422:	80 81       	ld	r24, Z
    1424:	8c 93       	st	X, r24

			Copy_pu8Data++ ;
    1426:	8a 81       	ldd	r24, Y+2	; 0x02
    1428:	9b 81       	ldd	r25, Y+3	; 0x03
    142a:	01 96       	adiw	r24, 0x01	; 1
    142c:	9b 83       	std	Y+3, r25	; 0x03
    142e:	8a 83       	std	Y+2, r24	; 0x02
	USART_ES_t Local_enuUSARTErrorState  = ES_NOK ;

	if( Copy_pu8Data != NULL )
	{

		while( *Copy_pu8Data != '\0')
    1430:	ea 81       	ldd	r30, Y+2	; 0x02
    1432:	fb 81       	ldd	r31, Y+3	; 0x03
    1434:	80 81       	ld	r24, Z
    1436:	88 23       	and	r24, r24
    1438:	21 f7       	brne	.-56     	; 0x1402 <USART_enuSendStringSync+0x1c>
    143a:	02 c0       	rjmp	.+4      	; 0x1440 <USART_enuSendStringSync+0x5a>
		}

	}
	else
	{
		Local_enuUSARTErrorState  = USART_Null_Pointer ;
    143c:	85 e0       	ldi	r24, 0x05	; 5
    143e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuUSARTErrorState  ;
    1440:	89 81       	ldd	r24, Y+1	; 0x01

}//End of USART_enuSendStringSync().
    1442:	0f 90       	pop	r0
    1444:	0f 90       	pop	r0
    1446:	0f 90       	pop	r0
    1448:	cf 91       	pop	r28
    144a:	df 91       	pop	r29
    144c:	08 95       	ret

0000144e <USART_enuRecieveByteASync>:

USART_ES_t USART_enuRecieveByteASync(void (*Cpy_pFunc)(u8*) , u8* Cpy_pu8Para )
{
    144e:	df 93       	push	r29
    1450:	cf 93       	push	r28
    1452:	00 d0       	rcall	.+0      	; 0x1454 <USART_enuRecieveByteASync+0x6>
    1454:	00 d0       	rcall	.+0      	; 0x1456 <USART_enuRecieveByteASync+0x8>
    1456:	0f 92       	push	r0
    1458:	cd b7       	in	r28, 0x3d	; 61
    145a:	de b7       	in	r29, 0x3e	; 62
    145c:	9b 83       	std	Y+3, r25	; 0x03
    145e:	8a 83       	std	Y+2, r24	; 0x02
    1460:	7d 83       	std	Y+5, r23	; 0x05
    1462:	6c 83       	std	Y+4, r22	; 0x04
	USART_ES_t Local_enuUSARTErrorState  = USART_No_Error ;
    1464:	19 82       	std	Y+1, r1	; 0x01

	if( Cpy_pFunc != NULL )
    1466:	8a 81       	ldd	r24, Y+2	; 0x02
    1468:	9b 81       	ldd	r25, Y+3	; 0x03
    146a:	00 97       	sbiw	r24, 0x00	; 0
    146c:	69 f0       	breq	.+26     	; 0x1488 <USART_enuRecieveByteASync+0x3a>
	{
		USART_pFun      =  Cpy_pFunc    ;
    146e:	8a 81       	ldd	r24, Y+2	; 0x02
    1470:	9b 81       	ldd	r25, Y+3	; 0x03
    1472:	90 93 75 01 	sts	0x0175, r25
    1476:	80 93 74 01 	sts	0x0174, r24
		USART_pu8Para   =  Cpy_pu8Para ;
    147a:	8c 81       	ldd	r24, Y+4	; 0x04
    147c:	9d 81       	ldd	r25, Y+5	; 0x05
    147e:	90 93 77 01 	sts	0x0177, r25
    1482:	80 93 76 01 	sts	0x0176, r24
    1486:	02 c0       	rjmp	.+4      	; 0x148c <USART_enuRecieveByteASync+0x3e>
	}
	else
	{
		Local_enuUSARTErrorState  = USART_Null_Pointer ;
    1488:	85 e0       	ldi	r24, 0x05	; 5
    148a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuUSARTErrorState  ;
    148c:	89 81       	ldd	r24, Y+1	; 0x01

}//End of USART_enuRecieveByteASync().
    148e:	0f 90       	pop	r0
    1490:	0f 90       	pop	r0
    1492:	0f 90       	pop	r0
    1494:	0f 90       	pop	r0
    1496:	0f 90       	pop	r0
    1498:	cf 91       	pop	r28
    149a:	df 91       	pop	r29
    149c:	08 95       	ret

0000149e <__vector_13>:


ISR( VECT_USART_RXC )
{
    149e:	1f 92       	push	r1
    14a0:	0f 92       	push	r0
    14a2:	0f b6       	in	r0, 0x3f	; 63
    14a4:	0f 92       	push	r0
    14a6:	11 24       	eor	r1, r1
    14a8:	2f 93       	push	r18
    14aa:	3f 93       	push	r19
    14ac:	4f 93       	push	r20
    14ae:	5f 93       	push	r21
    14b0:	6f 93       	push	r22
    14b2:	7f 93       	push	r23
    14b4:	8f 93       	push	r24
    14b6:	9f 93       	push	r25
    14b8:	af 93       	push	r26
    14ba:	bf 93       	push	r27
    14bc:	ef 93       	push	r30
    14be:	ff 93       	push	r31
    14c0:	df 93       	push	r29
    14c2:	cf 93       	push	r28
    14c4:	cd b7       	in	r28, 0x3d	; 61
    14c6:	de b7       	in	r29, 0x3e	; 62
	 *USART_pu8Para  = UDR      ;
    14c8:	a0 91 76 01 	lds	r26, 0x0176
    14cc:	b0 91 77 01 	lds	r27, 0x0177
    14d0:	ec e2       	ldi	r30, 0x2C	; 44
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	80 81       	ld	r24, Z
    14d6:	8c 93       	st	X, r24
	(*USART_pFun)(USART_pu8Para);
    14d8:	e0 91 74 01 	lds	r30, 0x0174
    14dc:	f0 91 75 01 	lds	r31, 0x0175
    14e0:	80 91 76 01 	lds	r24, 0x0176
    14e4:	90 91 77 01 	lds	r25, 0x0177
    14e8:	09 95       	icall
}
    14ea:	cf 91       	pop	r28
    14ec:	df 91       	pop	r29
    14ee:	ff 91       	pop	r31
    14f0:	ef 91       	pop	r30
    14f2:	bf 91       	pop	r27
    14f4:	af 91       	pop	r26
    14f6:	9f 91       	pop	r25
    14f8:	8f 91       	pop	r24
    14fa:	7f 91       	pop	r23
    14fc:	6f 91       	pop	r22
    14fe:	5f 91       	pop	r21
    1500:	4f 91       	pop	r20
    1502:	3f 91       	pop	r19
    1504:	2f 91       	pop	r18
    1506:	0f 90       	pop	r0
    1508:	0f be       	out	0x3f, r0	; 63
    150a:	0f 90       	pop	r0
    150c:	1f 90       	pop	r1
    150e:	18 95       	reti

00001510 <__vector_15>:

ISR( VECT_USART_TXC )
{
    1510:	1f 92       	push	r1
    1512:	0f 92       	push	r0
    1514:	0f b6       	in	r0, 0x3f	; 63
    1516:	0f 92       	push	r0
    1518:	11 24       	eor	r1, r1
    151a:	df 93       	push	r29
    151c:	cf 93       	push	r28
    151e:	cd b7       	in	r28, 0x3d	; 61
    1520:	de b7       	in	r29, 0x3e	; 62

}
    1522:	cf 91       	pop	r28
    1524:	df 91       	pop	r29
    1526:	0f 90       	pop	r0
    1528:	0f be       	out	0x3f, r0	; 63
    152a:	0f 90       	pop	r0
    152c:	1f 90       	pop	r1
    152e:	18 95       	reti

00001530 <__vector_14>:

ISR( VECT_USART_UDRE )
{
    1530:	1f 92       	push	r1
    1532:	0f 92       	push	r0
    1534:	0f b6       	in	r0, 0x3f	; 63
    1536:	0f 92       	push	r0
    1538:	11 24       	eor	r1, r1
    153a:	df 93       	push	r29
    153c:	cf 93       	push	r28
    153e:	cd b7       	in	r28, 0x3d	; 61
    1540:	de b7       	in	r29, 0x3e	; 62

}
    1542:	cf 91       	pop	r28
    1544:	df 91       	pop	r29
    1546:	0f 90       	pop	r0
    1548:	0f be       	out	0x3f, r0	; 63
    154a:	0f 90       	pop	r0
    154c:	1f 90       	pop	r1
    154e:	18 95       	reti

00001550 <GIE_enuEnable>:

#include "GIE_priv.h"


ES_t GIE_enuEnable( void )
{
    1550:	df 93       	push	r29
    1552:	cf 93       	push	r28
    1554:	0f 92       	push	r0
    1556:	cd b7       	in	r28, 0x3d	; 61
    1558:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK ;
    155a:	19 82       	std	Y+1, r1	; 0x01

	SREG  |=(GIE_MASK_BIT<<I);
    155c:	af e5       	ldi	r26, 0x5F	; 95
    155e:	b0 e0       	ldi	r27, 0x00	; 0
    1560:	ef e5       	ldi	r30, 0x5F	; 95
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	80 81       	ld	r24, Z
    1566:	80 68       	ori	r24, 0x80	; 128
    1568:	8c 93       	st	X, r24


	return Local_enuErrorState ;
    156a:	89 81       	ldd	r24, Y+1	; 0x01
}
    156c:	0f 90       	pop	r0
    156e:	cf 91       	pop	r28
    1570:	df 91       	pop	r29
    1572:	08 95       	ret

00001574 <GIE_enuDisable>:
ES_t GIE_enuDisable( void )
{
    1574:	df 93       	push	r29
    1576:	cf 93       	push	r28
    1578:	0f 92       	push	r0
    157a:	cd b7       	in	r28, 0x3d	; 61
    157c:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK ;
    157e:	19 82       	std	Y+1, r1	; 0x01

	SREG  &=~(GIE_MASK_BIT<<I);
    1580:	af e5       	ldi	r26, 0x5F	; 95
    1582:	b0 e0       	ldi	r27, 0x00	; 0
    1584:	ef e5       	ldi	r30, 0x5F	; 95
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	8f 77       	andi	r24, 0x7F	; 127
    158c:	8c 93       	st	X, r24



	return Local_enuErrorState ;
    158e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1590:	0f 90       	pop	r0
    1592:	cf 91       	pop	r28
    1594:	df 91       	pop	r29
    1596:	08 95       	ret

00001598 <EXTI_enuInit>:
/* Description     : Utility function to initialize the Enabled interrupts. */
/* Argument        : Address array of interrupts .                          */
/* Return          : Error state of type ES_t.                              */
/**............................................******************************/
ES_t   EXTI_enuInit( EXTI_t*  Cpy_pstrEXTICnfg )
{
    1598:	df 93       	push	r29
    159a:	cf 93       	push	r28
    159c:	cd b7       	in	r28, 0x3d	; 61
    159e:	de b7       	in	r29, 0x3e	; 62
    15a0:	2c 97       	sbiw	r28, 0x0c	; 12
    15a2:	0f b6       	in	r0, 0x3f	; 63
    15a4:	f8 94       	cli
    15a6:	de bf       	out	0x3e, r29	; 62
    15a8:	0f be       	out	0x3f, r0	; 63
    15aa:	cd bf       	out	0x3d, r28	; 61
    15ac:	9c 83       	std	Y+4, r25	; 0x04
    15ae:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK ;
    15b0:	1a 82       	std	Y+2, r1	; 0x02


	if( Cpy_pstrEXTICnfg != NULL )
    15b2:	8b 81       	ldd	r24, Y+3	; 0x03
    15b4:	9c 81       	ldd	r25, Y+4	; 0x04
    15b6:	00 97       	sbiw	r24, 0x00	; 0
    15b8:	09 f4       	brne	.+2      	; 0x15bc <EXTI_enuInit+0x24>
    15ba:	15 c1       	rjmp	.+554    	; 0x17e6 <EXTI_enuInit+0x24e>
	{
		u8 Local_u8Iterator = 0;
    15bc:	19 82       	std	Y+1, r1	; 0x01

		for( Local_u8Iterator = 0 ; Local_u8Iterator < EXTI_NUM ; Local_u8Iterator++ )
    15be:	19 82       	std	Y+1, r1	; 0x01
    15c0:	0d c1       	rjmp	.+538    	; 0x17dc <EXTI_enuInit+0x244>
		{

			if( Cpy_pstrEXTICnfg[Local_u8Iterator].EXTI_u8State == EXTI_ACTIVE )
    15c2:	89 81       	ldd	r24, Y+1	; 0x01
    15c4:	88 2f       	mov	r24, r24
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	9c 01       	movw	r18, r24
    15ca:	22 0f       	add	r18, r18
    15cc:	33 1f       	adc	r19, r19
    15ce:	8b 81       	ldd	r24, Y+3	; 0x03
    15d0:	9c 81       	ldd	r25, Y+4	; 0x04
    15d2:	fc 01       	movw	r30, r24
    15d4:	e2 0f       	add	r30, r18
    15d6:	f3 1f       	adc	r31, r19
    15d8:	80 81       	ld	r24, Z
    15da:	81 30       	cpi	r24, 0x01	; 1
    15dc:	09 f0       	breq	.+2      	; 0x15e0 <EXTI_enuInit+0x48>
    15de:	fb c0       	rjmp	.+502    	; 0x17d6 <EXTI_enuInit+0x23e>
			{
				// Enable the appropriate interrupt in each iteration.
				switch(Local_u8Iterator)
    15e0:	89 81       	ldd	r24, Y+1	; 0x01
    15e2:	28 2f       	mov	r18, r24
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	3c 87       	std	Y+12, r19	; 0x0c
    15e8:	2b 87       	std	Y+11, r18	; 0x0b
    15ea:	8b 85       	ldd	r24, Y+11	; 0x0b
    15ec:	9c 85       	ldd	r25, Y+12	; 0x0c
    15ee:	81 30       	cpi	r24, 0x01	; 1
    15f0:	91 05       	cpc	r25, r1
    15f2:	09 f4       	brne	.+2      	; 0x15f6 <EXTI_enuInit+0x5e>
    15f4:	67 c0       	rjmp	.+206    	; 0x16c4 <EXTI_enuInit+0x12c>
    15f6:	2b 85       	ldd	r18, Y+11	; 0x0b
    15f8:	3c 85       	ldd	r19, Y+12	; 0x0c
    15fa:	22 30       	cpi	r18, 0x02	; 2
    15fc:	31 05       	cpc	r19, r1
    15fe:	09 f4       	brne	.+2      	; 0x1602 <EXTI_enuInit+0x6a>
    1600:	b4 c0       	rjmp	.+360    	; 0x176a <EXTI_enuInit+0x1d2>
    1602:	8b 85       	ldd	r24, Y+11	; 0x0b
    1604:	9c 85       	ldd	r25, Y+12	; 0x0c
    1606:	00 97       	sbiw	r24, 0x00	; 0
    1608:	09 f0       	breq	.+2      	; 0x160c <EXTI_enuInit+0x74>
    160a:	e2 c0       	rjmp	.+452    	; 0x17d0 <EXTI_enuInit+0x238>

				/*********************************************************
				 * Configure the interrupt0 and Handling it's cases.     *
				 *********************************************************/
				case EXTI0 :
					MCUCR  &= ~( (EXTI_MASK_BIT<<ISC00) | (EXTI_MASK_BIT<<ISC01) );
    160c:	a5 e5       	ldi	r26, 0x55	; 85
    160e:	b0 e0       	ldi	r27, 0x00	; 0
    1610:	e5 e5       	ldi	r30, 0x55	; 85
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	80 81       	ld	r24, Z
    1616:	8c 7f       	andi	r24, 0xFC	; 252
    1618:	8c 93       	st	X, r24

					switch(Cpy_pstrEXTICnfg[Local_u8Iterator].EXTI_u8SenceLevel)
    161a:	89 81       	ldd	r24, Y+1	; 0x01
    161c:	88 2f       	mov	r24, r24
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	9c 01       	movw	r18, r24
    1622:	22 0f       	add	r18, r18
    1624:	33 1f       	adc	r19, r19
    1626:	8b 81       	ldd	r24, Y+3	; 0x03
    1628:	9c 81       	ldd	r25, Y+4	; 0x04
    162a:	fc 01       	movw	r30, r24
    162c:	e2 0f       	add	r30, r18
    162e:	f3 1f       	adc	r31, r19
    1630:	81 81       	ldd	r24, Z+1	; 0x01
    1632:	28 2f       	mov	r18, r24
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	3a 87       	std	Y+10, r19	; 0x0a
    1638:	29 87       	std	Y+9, r18	; 0x09
    163a:	89 85       	ldd	r24, Y+9	; 0x09
    163c:	9a 85       	ldd	r25, Y+10	; 0x0a
    163e:	81 30       	cpi	r24, 0x01	; 1
    1640:	91 05       	cpc	r25, r1
    1642:	f9 f0       	breq	.+62     	; 0x1682 <EXTI_enuInit+0xea>
    1644:	29 85       	ldd	r18, Y+9	; 0x09
    1646:	3a 85       	ldd	r19, Y+10	; 0x0a
    1648:	22 30       	cpi	r18, 0x02	; 2
    164a:	31 05       	cpc	r19, r1
    164c:	2c f4       	brge	.+10     	; 0x1658 <EXTI_enuInit+0xc0>
    164e:	89 85       	ldd	r24, Y+9	; 0x09
    1650:	9a 85       	ldd	r25, Y+10	; 0x0a
    1652:	00 97       	sbiw	r24, 0x00	; 0
    1654:	61 f0       	breq	.+24     	; 0x166e <EXTI_enuInit+0xd6>
    1656:	2c c0       	rjmp	.+88     	; 0x16b0 <EXTI_enuInit+0x118>
    1658:	29 85       	ldd	r18, Y+9	; 0x09
    165a:	3a 85       	ldd	r19, Y+10	; 0x0a
    165c:	22 30       	cpi	r18, 0x02	; 2
    165e:	31 05       	cpc	r19, r1
    1660:	d1 f0       	breq	.+52     	; 0x1696 <EXTI_enuInit+0xfe>
    1662:	89 85       	ldd	r24, Y+9	; 0x09
    1664:	9a 85       	ldd	r25, Y+10	; 0x0a
    1666:	83 30       	cpi	r24, 0x03	; 3
    1668:	91 05       	cpc	r25, r1
    166a:	f9 f0       	breq	.+62     	; 0x16aa <EXTI_enuInit+0x112>
    166c:	21 c0       	rjmp	.+66     	; 0x16b0 <EXTI_enuInit+0x118>
					{
					case EXTI_RISING_EDGE :
						MCUCR   |= (EXTI_MASK_BIT<<ISC00 )|(EXTI_MASK_BIT<<ISC01 );
    166e:	a5 e5       	ldi	r26, 0x55	; 85
    1670:	b0 e0       	ldi	r27, 0x00	; 0
    1672:	e5 e5       	ldi	r30, 0x55	; 85
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	80 81       	ld	r24, Z
    1678:	83 60       	ori	r24, 0x03	; 3
    167a:	8c 93       	st	X, r24
						Local_enuErrorState = ES_OK ;
    167c:	81 e0       	ldi	r24, 0x01	; 1
    167e:	8a 83       	std	Y+2, r24	; 0x02
    1680:	19 c0       	rjmp	.+50     	; 0x16b4 <EXTI_enuInit+0x11c>
						break;

					case EXTI_FALLING_EDGE :
						MCUCR   |=  (EXTI_MASK_BIT<<ISC01 );
    1682:	a5 e5       	ldi	r26, 0x55	; 85
    1684:	b0 e0       	ldi	r27, 0x00	; 0
    1686:	e5 e5       	ldi	r30, 0x55	; 85
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	80 81       	ld	r24, Z
    168c:	82 60       	ori	r24, 0x02	; 2
    168e:	8c 93       	st	X, r24
						Local_enuErrorState = ES_OK ;
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	8a 83       	std	Y+2, r24	; 0x02
    1694:	0f c0       	rjmp	.+30     	; 0x16b4 <EXTI_enuInit+0x11c>
						break;

					case  EXTI_LOGIC_CHANGE:
						MCUCR   |=  (EXTI_MASK_BIT<<ISC00 );
    1696:	a5 e5       	ldi	r26, 0x55	; 85
    1698:	b0 e0       	ldi	r27, 0x00	; 0
    169a:	e5 e5       	ldi	r30, 0x55	; 85
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	80 81       	ld	r24, Z
    16a0:	81 60       	ori	r24, 0x01	; 1
    16a2:	8c 93       	st	X, r24
						Local_enuErrorState = ES_OK ;
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	8a 83       	std	Y+2, r24	; 0x02
    16a8:	05 c0       	rjmp	.+10     	; 0x16b4 <EXTI_enuInit+0x11c>
						break;

					case EXTI_LOW_LEVEL :
						Local_enuErrorState = ES_OK ;
    16aa:	81 e0       	ldi	r24, 0x01	; 1
    16ac:	8a 83       	std	Y+2, r24	; 0x02
    16ae:	02 c0       	rjmp	.+4      	; 0x16b4 <EXTI_enuInit+0x11c>
						break;

					default:
						Local_enuErrorState = ES_OUT_OF_RANGE ;
    16b0:	83 e0       	ldi	r24, 0x03	; 3
    16b2:	8a 83       	std	Y+2, r24	; 0x02


					}

					//Enable the ENT0.
					GICR |=(EXTI_MASK_BIT<<INT0);
    16b4:	ab e5       	ldi	r26, 0x5B	; 91
    16b6:	b0 e0       	ldi	r27, 0x00	; 0
    16b8:	eb e5       	ldi	r30, 0x5B	; 91
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	80 81       	ld	r24, Z
    16be:	80 64       	ori	r24, 0x40	; 64
    16c0:	8c 93       	st	X, r24
    16c2:	88 c0       	rjmp	.+272    	; 0x17d4 <EXTI_enuInit+0x23c>

					/*********************************************************
					 * Configure the interrupt1 and Handling it's cases.     *
					 *********************************************************/
					case EXTI1 :
						MCUCR  &= ~( (EXTI_MASK_BIT<<ISC10) | (EXTI_MASK_BIT<<ISC11) );
    16c4:	a5 e5       	ldi	r26, 0x55	; 85
    16c6:	b0 e0       	ldi	r27, 0x00	; 0
    16c8:	e5 e5       	ldi	r30, 0x55	; 85
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	83 7f       	andi	r24, 0xF3	; 243
    16d0:	8c 93       	st	X, r24

						switch(Cpy_pstrEXTICnfg[Local_u8Iterator].EXTI_u8SenceLevel)
    16d2:	89 81       	ldd	r24, Y+1	; 0x01
    16d4:	88 2f       	mov	r24, r24
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	9c 01       	movw	r18, r24
    16da:	22 0f       	add	r18, r18
    16dc:	33 1f       	adc	r19, r19
    16de:	8b 81       	ldd	r24, Y+3	; 0x03
    16e0:	9c 81       	ldd	r25, Y+4	; 0x04
    16e2:	fc 01       	movw	r30, r24
    16e4:	e2 0f       	add	r30, r18
    16e6:	f3 1f       	adc	r31, r19
    16e8:	81 81       	ldd	r24, Z+1	; 0x01
    16ea:	28 2f       	mov	r18, r24
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	38 87       	std	Y+8, r19	; 0x08
    16f0:	2f 83       	std	Y+7, r18	; 0x07
    16f2:	8f 81       	ldd	r24, Y+7	; 0x07
    16f4:	98 85       	ldd	r25, Y+8	; 0x08
    16f6:	81 30       	cpi	r24, 0x01	; 1
    16f8:	91 05       	cpc	r25, r1
    16fa:	e9 f0       	breq	.+58     	; 0x1736 <EXTI_enuInit+0x19e>
    16fc:	2f 81       	ldd	r18, Y+7	; 0x07
    16fe:	38 85       	ldd	r19, Y+8	; 0x08
    1700:	22 30       	cpi	r18, 0x02	; 2
    1702:	31 05       	cpc	r19, r1
    1704:	2c f4       	brge	.+10     	; 0x1710 <EXTI_enuInit+0x178>
    1706:	8f 81       	ldd	r24, Y+7	; 0x07
    1708:	98 85       	ldd	r25, Y+8	; 0x08
    170a:	00 97       	sbiw	r24, 0x00	; 0
    170c:	61 f0       	breq	.+24     	; 0x1726 <EXTI_enuInit+0x18e>
    170e:	23 c0       	rjmp	.+70     	; 0x1756 <EXTI_enuInit+0x1be>
    1710:	2f 81       	ldd	r18, Y+7	; 0x07
    1712:	38 85       	ldd	r19, Y+8	; 0x08
    1714:	22 30       	cpi	r18, 0x02	; 2
    1716:	31 05       	cpc	r19, r1
    1718:	b1 f0       	breq	.+44     	; 0x1746 <EXTI_enuInit+0x1ae>
    171a:	8f 81       	ldd	r24, Y+7	; 0x07
    171c:	98 85       	ldd	r25, Y+8	; 0x08
    171e:	83 30       	cpi	r24, 0x03	; 3
    1720:	91 05       	cpc	r25, r1
    1722:	d9 f0       	breq	.+54     	; 0x175a <EXTI_enuInit+0x1c2>
    1724:	18 c0       	rjmp	.+48     	; 0x1756 <EXTI_enuInit+0x1be>
						{
						case EXTI_RISING_EDGE :
							MCUCR   |= (EXTI_MASK_BIT<<ISC10 )|(EXTI_MASK_BIT<<ISC11 );
    1726:	a5 e5       	ldi	r26, 0x55	; 85
    1728:	b0 e0       	ldi	r27, 0x00	; 0
    172a:	e5 e5       	ldi	r30, 0x55	; 85
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	80 81       	ld	r24, Z
    1730:	8c 60       	ori	r24, 0x0C	; 12
    1732:	8c 93       	st	X, r24
    1734:	12 c0       	rjmp	.+36     	; 0x175a <EXTI_enuInit+0x1c2>
							break;

						case EXTI_FALLING_EDGE :
							MCUCR   |=  (EXTI_MASK_BIT<<ISC11 );
    1736:	a5 e5       	ldi	r26, 0x55	; 85
    1738:	b0 e0       	ldi	r27, 0x00	; 0
    173a:	e5 e5       	ldi	r30, 0x55	; 85
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	80 81       	ld	r24, Z
    1740:	88 60       	ori	r24, 0x08	; 8
    1742:	8c 93       	st	X, r24
    1744:	0a c0       	rjmp	.+20     	; 0x175a <EXTI_enuInit+0x1c2>
							break;

						case  EXTI_LOGIC_CHANGE:
							MCUCR   |=  (EXTI_MASK_BIT<<ISC10 );
    1746:	a5 e5       	ldi	r26, 0x55	; 85
    1748:	b0 e0       	ldi	r27, 0x00	; 0
    174a:	e5 e5       	ldi	r30, 0x55	; 85
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	80 81       	ld	r24, Z
    1750:	84 60       	ori	r24, 0x04	; 4
    1752:	8c 93       	st	X, r24
    1754:	02 c0       	rjmp	.+4      	; 0x175a <EXTI_enuInit+0x1c2>

						case EXTI_LOW_LEVEL :
							break;

						default:
							Local_enuErrorState = ES_OUT_OF_RANGE ;
    1756:	83 e0       	ldi	r24, 0x03	; 3
    1758:	8a 83       	std	Y+2, r24	; 0x02
						}

						//Enable the ENT1.
						GICR |=(EXTI_MASK_BIT<<INT1);
    175a:	ab e5       	ldi	r26, 0x5B	; 91
    175c:	b0 e0       	ldi	r27, 0x00	; 0
    175e:	eb e5       	ldi	r30, 0x5B	; 91
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
    1764:	80 68       	ori	r24, 0x80	; 128
    1766:	8c 93       	st	X, r24
    1768:	35 c0       	rjmp	.+106    	; 0x17d4 <EXTI_enuInit+0x23c>

						/*********************************************************
						 * Configure the interrupt2 and Handling it's cases.     *
						 *********************************************************/
						case EXTI2 :
							MCUCSR  &= ~(EXTI_MASK_BIT<<ISC2) ;
    176a:	a4 e5       	ldi	r26, 0x54	; 84
    176c:	b0 e0       	ldi	r27, 0x00	; 0
    176e:	e4 e5       	ldi	r30, 0x54	; 84
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	80 81       	ld	r24, Z
    1774:	8f 7b       	andi	r24, 0xBF	; 191
    1776:	8c 93       	st	X, r24

							switch(Cpy_pstrEXTICnfg[Local_u8Iterator].EXTI_u8SenceLevel)
    1778:	89 81       	ldd	r24, Y+1	; 0x01
    177a:	88 2f       	mov	r24, r24
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	9c 01       	movw	r18, r24
    1780:	22 0f       	add	r18, r18
    1782:	33 1f       	adc	r19, r19
    1784:	8b 81       	ldd	r24, Y+3	; 0x03
    1786:	9c 81       	ldd	r25, Y+4	; 0x04
    1788:	fc 01       	movw	r30, r24
    178a:	e2 0f       	add	r30, r18
    178c:	f3 1f       	adc	r31, r19
    178e:	81 81       	ldd	r24, Z+1	; 0x01
    1790:	28 2f       	mov	r18, r24
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	3e 83       	std	Y+6, r19	; 0x06
    1796:	2d 83       	std	Y+5, r18	; 0x05
    1798:	8d 81       	ldd	r24, Y+5	; 0x05
    179a:	9e 81       	ldd	r25, Y+6	; 0x06
    179c:	00 97       	sbiw	r24, 0x00	; 0
    179e:	31 f0       	breq	.+12     	; 0x17ac <EXTI_enuInit+0x214>
    17a0:	2d 81       	ldd	r18, Y+5	; 0x05
    17a2:	3e 81       	ldd	r19, Y+6	; 0x06
    17a4:	21 30       	cpi	r18, 0x01	; 1
    17a6:	31 05       	cpc	r19, r1
    17a8:	59 f0       	breq	.+22     	; 0x17c0 <EXTI_enuInit+0x228>
    17aa:	08 c0       	rjmp	.+16     	; 0x17bc <EXTI_enuInit+0x224>
							{
							case EXTI_RISING_EDGE :
								MCUCSR   |= (EXTI_MASK_BIT<<ISC2 );
    17ac:	a4 e5       	ldi	r26, 0x54	; 84
    17ae:	b0 e0       	ldi	r27, 0x00	; 0
    17b0:	e4 e5       	ldi	r30, 0x54	; 84
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	80 81       	ld	r24, Z
    17b6:	80 64       	ori	r24, 0x40	; 64
    17b8:	8c 93       	st	X, r24
    17ba:	02 c0       	rjmp	.+4      	; 0x17c0 <EXTI_enuInit+0x228>

							case EXTI_FALLING_EDGE :
								break;

							default:
								Local_enuErrorState = ES_OUT_OF_RANGE ;
    17bc:	83 e0       	ldi	r24, 0x03	; 3
    17be:	8a 83       	std	Y+2, r24	; 0x02
							}

							//Enable the ENT2.
							GICR |=(EXTI_MASK_BIT<<INT2);
    17c0:	ab e5       	ldi	r26, 0x5B	; 91
    17c2:	b0 e0       	ldi	r27, 0x00	; 0
    17c4:	eb e5       	ldi	r30, 0x5B	; 91
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	80 81       	ld	r24, Z
    17ca:	80 62       	ori	r24, 0x20	; 32
    17cc:	8c 93       	st	X, r24
    17ce:	02 c0       	rjmp	.+4      	; 0x17d4 <EXTI_enuInit+0x23c>
							break;



							default:
								Local_enuErrorState = ES_OUT_OF_RANGE ;
    17d0:	83 e0       	ldi	r24, 0x03	; 3
    17d2:	8a 83       	std	Y+2, r24	; 0x02

				}//End of outer Switch case.

				Local_enuErrorState = ES_NOK ;
    17d4:	1a 82       	std	Y+2, r1	; 0x02

	if( Cpy_pstrEXTICnfg != NULL )
	{
		u8 Local_u8Iterator = 0;

		for( Local_u8Iterator = 0 ; Local_u8Iterator < EXTI_NUM ; Local_u8Iterator++ )
    17d6:	89 81       	ldd	r24, Y+1	; 0x01
    17d8:	8f 5f       	subi	r24, 0xFF	; 255
    17da:	89 83       	std	Y+1, r24	; 0x01
    17dc:	89 81       	ldd	r24, Y+1	; 0x01
    17de:	88 23       	and	r24, r24
    17e0:	09 f4       	brne	.+2      	; 0x17e4 <EXTI_enuInit+0x24c>
    17e2:	ef ce       	rjmp	.-546    	; 0x15c2 <EXTI_enuInit+0x2a>
    17e4:	02 c0       	rjmp	.+4      	; 0x17ea <EXTI_enuInit+0x252>
		}

	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER ;
    17e6:	82 e0       	ldi	r24, 0x02	; 2
    17e8:	8a 83       	std	Y+2, r24	; 0x02
	}


	return Local_enuErrorState;
    17ea:	8a 81       	ldd	r24, Y+2	; 0x02
}//End of EXTI_enuInit.
    17ec:	2c 96       	adiw	r28, 0x0c	; 12
    17ee:	0f b6       	in	r0, 0x3f	; 63
    17f0:	f8 94       	cli
    17f2:	de bf       	out	0x3e, r29	; 62
    17f4:	0f be       	out	0x3f, r0	; 63
    17f6:	cd bf       	out	0x3d, r28	; 61
    17f8:	cf 91       	pop	r28
    17fa:	df 91       	pop	r29
    17fc:	08 95       	ret

000017fe <EXTI_enuSetSenceMode>:
/*                                  FALLING_EDGE                            */
/*                                                                          */
/* Return          : Error state of type ES_t.                              */
/*..........................*************************************************/
ES_t   EXTI_enuSetSenceMode( u8 Cpy_u8EXTI_ID  , u8 Cpy_u8SenceLevel )
{
    17fe:	df 93       	push	r29
    1800:	cf 93       	push	r28
    1802:	cd b7       	in	r28, 0x3d	; 61
    1804:	de b7       	in	r29, 0x3e	; 62
    1806:	2b 97       	sbiw	r28, 0x0b	; 11
    1808:	0f b6       	in	r0, 0x3f	; 63
    180a:	f8 94       	cli
    180c:	de bf       	out	0x3e, r29	; 62
    180e:	0f be       	out	0x3f, r0	; 63
    1810:	cd bf       	out	0x3d, r28	; 61
    1812:	8a 83       	std	Y+2, r24	; 0x02
    1814:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK ;
    1816:	19 82       	std	Y+1, r1	; 0x01

	if(Cpy_u8EXTI_ID <= EXTI_NUM )
    1818:	8a 81       	ldd	r24, Y+2	; 0x02
    181a:	82 30       	cpi	r24, 0x02	; 2
    181c:	08 f0       	brcs	.+2      	; 0x1820 <EXTI_enuSetSenceMode+0x22>
    181e:	bd c0       	rjmp	.+378    	; 0x199a <EXTI_enuSetSenceMode+0x19c>
	{

		switch( Cpy_u8EXTI_ID )
    1820:	8a 81       	ldd	r24, Y+2	; 0x02
    1822:	28 2f       	mov	r18, r24
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	3b 87       	std	Y+11, r19	; 0x0b
    1828:	2a 87       	std	Y+10, r18	; 0x0a
    182a:	8a 85       	ldd	r24, Y+10	; 0x0a
    182c:	9b 85       	ldd	r25, Y+11	; 0x0b
    182e:	81 30       	cpi	r24, 0x01	; 1
    1830:	91 05       	cpc	r25, r1
    1832:	09 f4       	brne	.+2      	; 0x1836 <EXTI_enuSetSenceMode+0x38>
    1834:	4d c0       	rjmp	.+154    	; 0x18d0 <EXTI_enuSetSenceMode+0xd2>
    1836:	2a 85       	ldd	r18, Y+10	; 0x0a
    1838:	3b 85       	ldd	r19, Y+11	; 0x0b
    183a:	22 30       	cpi	r18, 0x02	; 2
    183c:	31 05       	cpc	r19, r1
    183e:	09 f4       	brne	.+2      	; 0x1842 <EXTI_enuSetSenceMode+0x44>
    1840:	88 c0       	rjmp	.+272    	; 0x1952 <EXTI_enuSetSenceMode+0x154>
    1842:	8a 85       	ldd	r24, Y+10	; 0x0a
    1844:	9b 85       	ldd	r25, Y+11	; 0x0b
    1846:	00 97       	sbiw	r24, 0x00	; 0
    1848:	09 f0       	breq	.+2      	; 0x184c <EXTI_enuSetSenceMode+0x4e>
    184a:	a4 c0       	rjmp	.+328    	; 0x1994 <EXTI_enuSetSenceMode+0x196>
		{
		/*****************************************************************
		 * Interrupt0  Sense Control Cases Handling.                     *
		 *****************************************************************/
		case EXTI0:
			MCUCR  &= ~( (EXTI_MASK_BIT<<ISC00) | (EXTI_MASK_BIT<<ISC01) );
    184c:	a5 e5       	ldi	r26, 0x55	; 85
    184e:	b0 e0       	ldi	r27, 0x00	; 0
    1850:	e5 e5       	ldi	r30, 0x55	; 85
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	80 81       	ld	r24, Z
    1856:	8c 7f       	andi	r24, 0xFC	; 252
    1858:	8c 93       	st	X, r24

			switch(Cpy_u8SenceLevel)
    185a:	8b 81       	ldd	r24, Y+3	; 0x03
    185c:	28 2f       	mov	r18, r24
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	39 87       	std	Y+9, r19	; 0x09
    1862:	28 87       	std	Y+8, r18	; 0x08
    1864:	88 85       	ldd	r24, Y+8	; 0x08
    1866:	99 85       	ldd	r25, Y+9	; 0x09
    1868:	81 30       	cpi	r24, 0x01	; 1
    186a:	91 05       	cpc	r25, r1
    186c:	f1 f0       	breq	.+60     	; 0x18aa <EXTI_enuSetSenceMode+0xac>
    186e:	28 85       	ldd	r18, Y+8	; 0x08
    1870:	39 85       	ldd	r19, Y+9	; 0x09
    1872:	22 30       	cpi	r18, 0x02	; 2
    1874:	31 05       	cpc	r19, r1
    1876:	2c f4       	brge	.+10     	; 0x1882 <EXTI_enuSetSenceMode+0x84>
    1878:	88 85       	ldd	r24, Y+8	; 0x08
    187a:	99 85       	ldd	r25, Y+9	; 0x09
    187c:	00 97       	sbiw	r24, 0x00	; 0
    187e:	69 f0       	breq	.+26     	; 0x189a <EXTI_enuSetSenceMode+0x9c>
    1880:	24 c0       	rjmp	.+72     	; 0x18ca <EXTI_enuSetSenceMode+0xcc>
    1882:	28 85       	ldd	r18, Y+8	; 0x08
    1884:	39 85       	ldd	r19, Y+9	; 0x09
    1886:	22 30       	cpi	r18, 0x02	; 2
    1888:	31 05       	cpc	r19, r1
    188a:	b9 f0       	breq	.+46     	; 0x18ba <EXTI_enuSetSenceMode+0xbc>
    188c:	88 85       	ldd	r24, Y+8	; 0x08
    188e:	99 85       	ldd	r25, Y+9	; 0x09
    1890:	83 30       	cpi	r24, 0x03	; 3
    1892:	91 05       	cpc	r25, r1
    1894:	09 f4       	brne	.+2      	; 0x1898 <EXTI_enuSetSenceMode+0x9a>
    1896:	7e c0       	rjmp	.+252    	; 0x1994 <EXTI_enuSetSenceMode+0x196>
    1898:	18 c0       	rjmp	.+48     	; 0x18ca <EXTI_enuSetSenceMode+0xcc>
			{
			case EXTI_RISING_EDGE :
				MCUCR   |= (EXTI_MASK_BIT<<ISC00 )|(EXTI_MASK_BIT<<ISC01 );
    189a:	a5 e5       	ldi	r26, 0x55	; 85
    189c:	b0 e0       	ldi	r27, 0x00	; 0
    189e:	e5 e5       	ldi	r30, 0x55	; 85
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	80 81       	ld	r24, Z
    18a4:	83 60       	ori	r24, 0x03	; 3
    18a6:	8c 93       	st	X, r24
    18a8:	75 c0       	rjmp	.+234    	; 0x1994 <EXTI_enuSetSenceMode+0x196>
				break;

			case EXTI_FALLING_EDGE :
				MCUCR   |=  (EXTI_MASK_BIT<<ISC01 );
    18aa:	a5 e5       	ldi	r26, 0x55	; 85
    18ac:	b0 e0       	ldi	r27, 0x00	; 0
    18ae:	e5 e5       	ldi	r30, 0x55	; 85
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	80 81       	ld	r24, Z
    18b4:	82 60       	ori	r24, 0x02	; 2
    18b6:	8c 93       	st	X, r24
    18b8:	6d c0       	rjmp	.+218    	; 0x1994 <EXTI_enuSetSenceMode+0x196>
				break;

			case  EXTI_LOGIC_CHANGE:
				MCUCR   |=  (EXTI_MASK_BIT<<ISC00 );
    18ba:	a5 e5       	ldi	r26, 0x55	; 85
    18bc:	b0 e0       	ldi	r27, 0x00	; 0
    18be:	e5 e5       	ldi	r30, 0x55	; 85
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	80 81       	ld	r24, Z
    18c4:	81 60       	ori	r24, 0x01	; 1
    18c6:	8c 93       	st	X, r24
    18c8:	65 c0       	rjmp	.+202    	; 0x1994 <EXTI_enuSetSenceMode+0x196>

			case EXTI_LOW_LEVEL :
				break;

			default:
				Local_enuErrorState = ES_OUT_OF_RANGE ;
    18ca:	83 e0       	ldi	r24, 0x03	; 3
    18cc:	89 83       	std	Y+1, r24	; 0x01
    18ce:	62 c0       	rjmp	.+196    	; 0x1994 <EXTI_enuSetSenceMode+0x196>

			/*****************************************************************
			 * Interrupt1  Sense Control Cases Handling.                     *
			 *****************************************************************/
			case EXTI1:
				MCUCR  &= ~( (EXTI_MASK_BIT<<ISC10) | (EXTI_MASK_BIT<<ISC11) );
    18d0:	a5 e5       	ldi	r26, 0x55	; 85
    18d2:	b0 e0       	ldi	r27, 0x00	; 0
    18d4:	e5 e5       	ldi	r30, 0x55	; 85
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	80 81       	ld	r24, Z
    18da:	83 7f       	andi	r24, 0xF3	; 243
    18dc:	8c 93       	st	X, r24
				switch(Cpy_u8SenceLevel)
    18de:	8b 81       	ldd	r24, Y+3	; 0x03
    18e0:	28 2f       	mov	r18, r24
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	3f 83       	std	Y+7, r19	; 0x07
    18e6:	2e 83       	std	Y+6, r18	; 0x06
    18e8:	8e 81       	ldd	r24, Y+6	; 0x06
    18ea:	9f 81       	ldd	r25, Y+7	; 0x07
    18ec:	81 30       	cpi	r24, 0x01	; 1
    18ee:	91 05       	cpc	r25, r1
    18f0:	e9 f0       	breq	.+58     	; 0x192c <EXTI_enuSetSenceMode+0x12e>
    18f2:	2e 81       	ldd	r18, Y+6	; 0x06
    18f4:	3f 81       	ldd	r19, Y+7	; 0x07
    18f6:	22 30       	cpi	r18, 0x02	; 2
    18f8:	31 05       	cpc	r19, r1
    18fa:	2c f4       	brge	.+10     	; 0x1906 <EXTI_enuSetSenceMode+0x108>
    18fc:	8e 81       	ldd	r24, Y+6	; 0x06
    18fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1900:	00 97       	sbiw	r24, 0x00	; 0
    1902:	61 f0       	breq	.+24     	; 0x191c <EXTI_enuSetSenceMode+0x11e>
    1904:	23 c0       	rjmp	.+70     	; 0x194c <EXTI_enuSetSenceMode+0x14e>
    1906:	2e 81       	ldd	r18, Y+6	; 0x06
    1908:	3f 81       	ldd	r19, Y+7	; 0x07
    190a:	22 30       	cpi	r18, 0x02	; 2
    190c:	31 05       	cpc	r19, r1
    190e:	b1 f0       	breq	.+44     	; 0x193c <EXTI_enuSetSenceMode+0x13e>
    1910:	8e 81       	ldd	r24, Y+6	; 0x06
    1912:	9f 81       	ldd	r25, Y+7	; 0x07
    1914:	83 30       	cpi	r24, 0x03	; 3
    1916:	91 05       	cpc	r25, r1
    1918:	e9 f1       	breq	.+122    	; 0x1994 <EXTI_enuSetSenceMode+0x196>
    191a:	18 c0       	rjmp	.+48     	; 0x194c <EXTI_enuSetSenceMode+0x14e>
				{
				case EXTI_RISING_EDGE :
					MCUCR   |= (EXTI_MASK_BIT<<ISC10 )|(EXTI_MASK_BIT<<ISC11 );
    191c:	a5 e5       	ldi	r26, 0x55	; 85
    191e:	b0 e0       	ldi	r27, 0x00	; 0
    1920:	e5 e5       	ldi	r30, 0x55	; 85
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	80 81       	ld	r24, Z
    1926:	8c 60       	ori	r24, 0x0C	; 12
    1928:	8c 93       	st	X, r24
    192a:	34 c0       	rjmp	.+104    	; 0x1994 <EXTI_enuSetSenceMode+0x196>
					break;

				case EXTI_FALLING_EDGE :
					MCUCR   |=  (EXTI_MASK_BIT<<ISC11 );
    192c:	a5 e5       	ldi	r26, 0x55	; 85
    192e:	b0 e0       	ldi	r27, 0x00	; 0
    1930:	e5 e5       	ldi	r30, 0x55	; 85
    1932:	f0 e0       	ldi	r31, 0x00	; 0
    1934:	80 81       	ld	r24, Z
    1936:	88 60       	ori	r24, 0x08	; 8
    1938:	8c 93       	st	X, r24
    193a:	2c c0       	rjmp	.+88     	; 0x1994 <EXTI_enuSetSenceMode+0x196>
					break;

				case  EXTI_LOGIC_CHANGE:
					MCUCR   |=  (EXTI_MASK_BIT<<ISC10 );
    193c:	a5 e5       	ldi	r26, 0x55	; 85
    193e:	b0 e0       	ldi	r27, 0x00	; 0
    1940:	e5 e5       	ldi	r30, 0x55	; 85
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	80 81       	ld	r24, Z
    1946:	84 60       	ori	r24, 0x04	; 4
    1948:	8c 93       	st	X, r24
    194a:	24 c0       	rjmp	.+72     	; 0x1994 <EXTI_enuSetSenceMode+0x196>

				case EXTI_LOW_LEVEL :
					break;

				default:
					Local_enuErrorState = ES_OUT_OF_RANGE ;
    194c:	83 e0       	ldi	r24, 0x03	; 3
    194e:	89 83       	std	Y+1, r24	; 0x01
    1950:	21 c0       	rjmp	.+66     	; 0x1994 <EXTI_enuSetSenceMode+0x196>
				/*****************************************************************
				 * Interrupt2  Sense Control Cases Handling.                     *
				 *****************************************************************/
				case EXTI2:

					switch(Cpy_u8SenceLevel)
    1952:	8b 81       	ldd	r24, Y+3	; 0x03
    1954:	28 2f       	mov	r18, r24
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	3d 83       	std	Y+5, r19	; 0x05
    195a:	2c 83       	std	Y+4, r18	; 0x04
    195c:	8c 81       	ldd	r24, Y+4	; 0x04
    195e:	9d 81       	ldd	r25, Y+5	; 0x05
    1960:	00 97       	sbiw	r24, 0x00	; 0
    1962:	31 f0       	breq	.+12     	; 0x1970 <EXTI_enuSetSenceMode+0x172>
    1964:	2c 81       	ldd	r18, Y+4	; 0x04
    1966:	3d 81       	ldd	r19, Y+5	; 0x05
    1968:	21 30       	cpi	r18, 0x01	; 1
    196a:	31 05       	cpc	r19, r1
    196c:	49 f0       	breq	.+18     	; 0x1980 <EXTI_enuSetSenceMode+0x182>
    196e:	10 c0       	rjmp	.+32     	; 0x1990 <EXTI_enuSetSenceMode+0x192>
					{
					case EXTI_RISING_EDGE :
						MCUCSR  |=(EXTI_MASK_BIT<<ISC2) ;
    1970:	a4 e5       	ldi	r26, 0x54	; 84
    1972:	b0 e0       	ldi	r27, 0x00	; 0
    1974:	e4 e5       	ldi	r30, 0x54	; 84
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	80 81       	ld	r24, Z
    197a:	80 64       	ori	r24, 0x40	; 64
    197c:	8c 93       	st	X, r24
    197e:	0a c0       	rjmp	.+20     	; 0x1994 <EXTI_enuSetSenceMode+0x196>
						break;

					case EXTI_FALLING_EDGE :
						MCUCSR  &=~(EXTI_MASK_BIT<<ISC2) ;
    1980:	a4 e5       	ldi	r26, 0x54	; 84
    1982:	b0 e0       	ldi	r27, 0x00	; 0
    1984:	e4 e5       	ldi	r30, 0x54	; 84
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	80 81       	ld	r24, Z
    198a:	8f 7b       	andi	r24, 0xBF	; 191
    198c:	8c 93       	st	X, r24
    198e:	02 c0       	rjmp	.+4      	; 0x1994 <EXTI_enuSetSenceMode+0x196>
						break;

					default:
						Local_enuErrorState = ES_OUT_OF_RANGE ;
    1990:	83 e0       	ldi	r24, 0x03	; 3
    1992:	89 83       	std	Y+1, r24	; 0x01
					break ;


		}

		Local_enuErrorState = ES_OK;
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	89 83       	std	Y+1, r24	; 0x01
    1998:	02 c0       	rjmp	.+4      	; 0x199e <EXTI_enuSetSenceMode+0x1a0>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    199a:	83 e0       	ldi	r24, 0x03	; 3
    199c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    199e:	89 81       	ldd	r24, Y+1	; 0x01

}//End of EXTI_enuSetSenceMode.
    19a0:	2b 96       	adiw	r28, 0x0b	; 11
    19a2:	0f b6       	in	r0, 0x3f	; 63
    19a4:	f8 94       	cli
    19a6:	de bf       	out	0x3e, r29	; 62
    19a8:	0f be       	out	0x3f, r0	; 63
    19aa:	cd bf       	out	0x3d, r28	; 61
    19ac:	cf 91       	pop	r28
    19ae:	df 91       	pop	r29
    19b0:	08 95       	ret

000019b2 <EXTI_enuEnableINT>:
/*                                 EXTI_2 --->for interrupt_2                */
/*                                                                           */
/* Return          : Error state of type ES_t.                               */
/*.......................*****************************************************/
ES_t   EXTI_enuEnableINT( u8 Cpy_u8EXTI_ID  )
{
    19b2:	df 93       	push	r29
    19b4:	cf 93       	push	r28
    19b6:	00 d0       	rcall	.+0      	; 0x19b8 <EXTI_enuEnableINT+0x6>
    19b8:	00 d0       	rcall	.+0      	; 0x19ba <EXTI_enuEnableINT+0x8>
    19ba:	cd b7       	in	r28, 0x3d	; 61
    19bc:	de b7       	in	r29, 0x3e	; 62
    19be:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK ;
    19c0:	19 82       	std	Y+1, r1	; 0x01

	if( Cpy_u8EXTI_ID < EXTI_NUM)
    19c2:	8a 81       	ldd	r24, Y+2	; 0x02
    19c4:	88 23       	and	r24, r24
    19c6:	69 f5       	brne	.+90     	; 0x1a22 <EXTI_enuEnableINT+0x70>
	{
		switch(Cpy_u8EXTI_ID)
    19c8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ca:	28 2f       	mov	r18, r24
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	3c 83       	std	Y+4, r19	; 0x04
    19d0:	2b 83       	std	Y+3, r18	; 0x03
    19d2:	8b 81       	ldd	r24, Y+3	; 0x03
    19d4:	9c 81       	ldd	r25, Y+4	; 0x04
    19d6:	81 30       	cpi	r24, 0x01	; 1
    19d8:	91 05       	cpc	r25, r1
    19da:	89 f0       	breq	.+34     	; 0x19fe <EXTI_enuEnableINT+0x4c>
    19dc:	2b 81       	ldd	r18, Y+3	; 0x03
    19de:	3c 81       	ldd	r19, Y+4	; 0x04
    19e0:	22 30       	cpi	r18, 0x02	; 2
    19e2:	31 05       	cpc	r19, r1
    19e4:	a1 f0       	breq	.+40     	; 0x1a0e <EXTI_enuEnableINT+0x5c>
    19e6:	8b 81       	ldd	r24, Y+3	; 0x03
    19e8:	9c 81       	ldd	r25, Y+4	; 0x04
    19ea:	00 97       	sbiw	r24, 0x00	; 0
    19ec:	b9 f4       	brne	.+46     	; 0x1a1c <EXTI_enuEnableINT+0x6a>
		{

		case EXTI0:
			//Enable interrupt 0 .
			GICR |= (EXTI_MASK_BIT<< INT0);
    19ee:	ab e5       	ldi	r26, 0x5B	; 91
    19f0:	b0 e0       	ldi	r27, 0x00	; 0
    19f2:	eb e5       	ldi	r30, 0x5B	; 91
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	80 81       	ld	r24, Z
    19f8:	80 64       	ori	r24, 0x40	; 64
    19fa:	8c 93       	st	X, r24
    19fc:	0f c0       	rjmp	.+30     	; 0x1a1c <EXTI_enuEnableINT+0x6a>
			break;

		case EXTI1:
			//Enable interrupt 1 .
			GICR |= (EXTI_MASK_BIT<< INT1);
    19fe:	ab e5       	ldi	r26, 0x5B	; 91
    1a00:	b0 e0       	ldi	r27, 0x00	; 0
    1a02:	eb e5       	ldi	r30, 0x5B	; 91
    1a04:	f0 e0       	ldi	r31, 0x00	; 0
    1a06:	80 81       	ld	r24, Z
    1a08:	80 68       	ori	r24, 0x80	; 128
    1a0a:	8c 93       	st	X, r24
    1a0c:	07 c0       	rjmp	.+14     	; 0x1a1c <EXTI_enuEnableINT+0x6a>
			break;

		case EXTI2:
			//Enable interrupt 2 .
			GICR |= (EXTI_MASK_BIT<< INT2);
    1a0e:	ab e5       	ldi	r26, 0x5B	; 91
    1a10:	b0 e0       	ldi	r27, 0x00	; 0
    1a12:	eb e5       	ldi	r30, 0x5B	; 91
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	80 81       	ld	r24, Z
    1a18:	80 62       	ori	r24, 0x20	; 32
    1a1a:	8c 93       	st	X, r24
			break;

		}
		Local_enuErrorState = ES_OK  ;
    1a1c:	81 e0       	ldi	r24, 0x01	; 1
    1a1e:	89 83       	std	Y+1, r24	; 0x01
    1a20:	02 c0       	rjmp	.+4      	; 0x1a26 <EXTI_enuEnableINT+0x74>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE ;
    1a22:	83 e0       	ldi	r24, 0x03	; 3
    1a24:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1a26:	89 81       	ldd	r24, Y+1	; 0x01
}//End of EXTI_enuEnableINT.
    1a28:	0f 90       	pop	r0
    1a2a:	0f 90       	pop	r0
    1a2c:	0f 90       	pop	r0
    1a2e:	0f 90       	pop	r0
    1a30:	cf 91       	pop	r28
    1a32:	df 91       	pop	r29
    1a34:	08 95       	ret

00001a36 <EXTI_enuDisableINT>:
/*                                 EXTI_2 --->for interrupt_2                */
/*                                                                           */
/* Return          : Error state of type ES_t.                               */
/*.......................*****************************************************/
ES_t   EXTI_enuDisableINT(   u8 Cpy_u8EXTI_ID  )
{
    1a36:	df 93       	push	r29
    1a38:	cf 93       	push	r28
    1a3a:	00 d0       	rcall	.+0      	; 0x1a3c <EXTI_enuDisableINT+0x6>
    1a3c:	00 d0       	rcall	.+0      	; 0x1a3e <EXTI_enuDisableINT+0x8>
    1a3e:	cd b7       	in	r28, 0x3d	; 61
    1a40:	de b7       	in	r29, 0x3e	; 62
    1a42:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK ;
    1a44:	19 82       	std	Y+1, r1	; 0x01

	if( Cpy_u8EXTI_ID < EXTI_NUM)
    1a46:	8a 81       	ldd	r24, Y+2	; 0x02
    1a48:	88 23       	and	r24, r24
    1a4a:	69 f5       	brne	.+90     	; 0x1aa6 <EXTI_enuDisableINT+0x70>
	{
		switch(Cpy_u8EXTI_ID)
    1a4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4e:	28 2f       	mov	r18, r24
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	3c 83       	std	Y+4, r19	; 0x04
    1a54:	2b 83       	std	Y+3, r18	; 0x03
    1a56:	8b 81       	ldd	r24, Y+3	; 0x03
    1a58:	9c 81       	ldd	r25, Y+4	; 0x04
    1a5a:	81 30       	cpi	r24, 0x01	; 1
    1a5c:	91 05       	cpc	r25, r1
    1a5e:	89 f0       	breq	.+34     	; 0x1a82 <EXTI_enuDisableINT+0x4c>
    1a60:	2b 81       	ldd	r18, Y+3	; 0x03
    1a62:	3c 81       	ldd	r19, Y+4	; 0x04
    1a64:	22 30       	cpi	r18, 0x02	; 2
    1a66:	31 05       	cpc	r19, r1
    1a68:	a1 f0       	breq	.+40     	; 0x1a92 <EXTI_enuDisableINT+0x5c>
    1a6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a6e:	00 97       	sbiw	r24, 0x00	; 0
    1a70:	b9 f4       	brne	.+46     	; 0x1aa0 <EXTI_enuDisableINT+0x6a>
		{

		    //Disable interrupt 0 .
		case EXTI0:
			GICR &=~(EXTI_MASK_BIT<< INT0);
    1a72:	ab e5       	ldi	r26, 0x5B	; 91
    1a74:	b0 e0       	ldi	r27, 0x00	; 0
    1a76:	eb e5       	ldi	r30, 0x5B	; 91
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	80 81       	ld	r24, Z
    1a7c:	8f 7b       	andi	r24, 0xBF	; 191
    1a7e:	8c 93       	st	X, r24
    1a80:	0f c0       	rjmp	.+30     	; 0x1aa0 <EXTI_enuDisableINT+0x6a>
			break;

			//Disable interrupt 1 .
		case EXTI1:
			GICR &=~(EXTI_MASK_BIT<< INT1);
    1a82:	ab e5       	ldi	r26, 0x5B	; 91
    1a84:	b0 e0       	ldi	r27, 0x00	; 0
    1a86:	eb e5       	ldi	r30, 0x5B	; 91
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	80 81       	ld	r24, Z
    1a8c:	8f 77       	andi	r24, 0x7F	; 127
    1a8e:	8c 93       	st	X, r24
    1a90:	07 c0       	rjmp	.+14     	; 0x1aa0 <EXTI_enuDisableINT+0x6a>
			break;

			//Disable interrupt 2 .
		case EXTI2:
			GICR &=~(EXTI_MASK_BIT<< INT2);
    1a92:	ab e5       	ldi	r26, 0x5B	; 91
    1a94:	b0 e0       	ldi	r27, 0x00	; 0
    1a96:	eb e5       	ldi	r30, 0x5B	; 91
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	80 81       	ld	r24, Z
    1a9c:	8f 7d       	andi	r24, 0xDF	; 223
    1a9e:	8c 93       	st	X, r24
			break;

		}
		Local_enuErrorState = ES_OK  ;
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	89 83       	std	Y+1, r24	; 0x01
    1aa4:	02 c0       	rjmp	.+4      	; 0x1aaa <EXTI_enuDisableINT+0x74>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE ;
    1aa6:	83 e0       	ldi	r24, 0x03	; 3
    1aa8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1aaa:	89 81       	ldd	r24, Y+1	; 0x01

}//End of EXTI_enuDisableINT.
    1aac:	0f 90       	pop	r0
    1aae:	0f 90       	pop	r0
    1ab0:	0f 90       	pop	r0
    1ab2:	0f 90       	pop	r0
    1ab4:	cf 91       	pop	r28
    1ab6:	df 91       	pop	r29
    1ab8:	08 95       	ret

00001aba <EXTI_enuCallBack>:
/*                                                                                                      */
/*                                                                                                      */
/* Return          : Error state of type ES_t.                                                          */
/*.......................********************************************************************************/
ES_t   EXTI_enuCallBack(volatile void (*Cpy_pfunAppFunc)(void*)  , volatile void* Cpy_pvidParameter ,  u8 Cpy_u8EXTI_ID  )
{
    1aba:	df 93       	push	r29
    1abc:	cf 93       	push	r28
    1abe:	00 d0       	rcall	.+0      	; 0x1ac0 <EXTI_enuCallBack+0x6>
    1ac0:	00 d0       	rcall	.+0      	; 0x1ac2 <EXTI_enuCallBack+0x8>
    1ac2:	00 d0       	rcall	.+0      	; 0x1ac4 <EXTI_enuCallBack+0xa>
    1ac4:	cd b7       	in	r28, 0x3d	; 61
    1ac6:	de b7       	in	r29, 0x3e	; 62
    1ac8:	9b 83       	std	Y+3, r25	; 0x03
    1aca:	8a 83       	std	Y+2, r24	; 0x02
    1acc:	7d 83       	std	Y+5, r23	; 0x05
    1ace:	6c 83       	std	Y+4, r22	; 0x04
    1ad0:	4e 83       	std	Y+6, r20	; 0x06
	ES_t Local_enuErrorState =ES_NOK ;
    1ad2:	19 82       	std	Y+1, r1	; 0x01

	if( (Cpy_pfunAppFunc !=NULL)&&(Cpy_u8EXTI_ID < EXTI_NUM) )
    1ad4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ad8:	00 97       	sbiw	r24, 0x00	; 0
    1ada:	f1 f0       	breq	.+60     	; 0x1b18 <EXTI_enuCallBack+0x5e>
    1adc:	8e 81       	ldd	r24, Y+6	; 0x06
    1ade:	88 23       	and	r24, r24
    1ae0:	d9 f4       	brne	.+54     	; 0x1b18 <EXTI_enuCallBack+0x5e>
	{

		EXTI_ApfunINTFunc[Cpy_u8EXTI_ID]= Cpy_pfunAppFunc ;
    1ae2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ae4:	88 2f       	mov	r24, r24
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	88 0f       	add	r24, r24
    1aea:	99 1f       	adc	r25, r25
    1aec:	fc 01       	movw	r30, r24
    1aee:	e8 58       	subi	r30, 0x88	; 136
    1af0:	fe 4f       	sbci	r31, 0xFE	; 254
    1af2:	8a 81       	ldd	r24, Y+2	; 0x02
    1af4:	9b 81       	ldd	r25, Y+3	; 0x03
    1af6:	91 83       	std	Z+1, r25	; 0x01
    1af8:	80 83       	st	Z, r24

		EXTI_ApvidGenericParameter[Cpy_u8EXTI_ID]= Cpy_pvidParameter;
    1afa:	8e 81       	ldd	r24, Y+6	; 0x06
    1afc:	88 2f       	mov	r24, r24
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	88 0f       	add	r24, r24
    1b02:	99 1f       	adc	r25, r25
    1b04:	fc 01       	movw	r30, r24
    1b06:	e2 58       	subi	r30, 0x82	; 130
    1b08:	fe 4f       	sbci	r31, 0xFE	; 254
    1b0a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b0c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b0e:	91 83       	std	Z+1, r25	; 0x01
    1b10:	80 83       	st	Z, r24

		Local_enuErrorState =ES_OK ;
    1b12:	81 e0       	ldi	r24, 0x01	; 1
    1b14:	89 83       	std	Y+1, r24	; 0x01
    1b16:	02 c0       	rjmp	.+4      	; 0x1b1c <EXTI_enuCallBack+0x62>

	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER ;
    1b18:	82 e0       	ldi	r24, 0x02	; 2
    1b1a:	89 83       	std	Y+1, r24	; 0x01
	}




	return Local_enuErrorState;
    1b1c:	89 81       	ldd	r24, Y+1	; 0x01
}//End of EXTI_enuCallBack.
    1b1e:	26 96       	adiw	r28, 0x06	; 6
    1b20:	0f b6       	in	r0, 0x3f	; 63
    1b22:	f8 94       	cli
    1b24:	de bf       	out	0x3e, r29	; 62
    1b26:	0f be       	out	0x3f, r0	; 63
    1b28:	cd bf       	out	0x3d, r28	; 61
    1b2a:	cf 91       	pop	r28
    1b2c:	df 91       	pop	r29
    1b2e:	08 95       	ret

00001b30 <__vector_1>:


/**********************************************************************/
/************* Interrupt service routine for interrupt0 ***************/
ISR(VECT_INT0)
{
    1b30:	1f 92       	push	r1
    1b32:	0f 92       	push	r0
    1b34:	0f b6       	in	r0, 0x3f	; 63
    1b36:	0f 92       	push	r0
    1b38:	11 24       	eor	r1, r1
    1b3a:	2f 93       	push	r18
    1b3c:	3f 93       	push	r19
    1b3e:	4f 93       	push	r20
    1b40:	5f 93       	push	r21
    1b42:	6f 93       	push	r22
    1b44:	7f 93       	push	r23
    1b46:	8f 93       	push	r24
    1b48:	9f 93       	push	r25
    1b4a:	af 93       	push	r26
    1b4c:	bf 93       	push	r27
    1b4e:	ef 93       	push	r30
    1b50:	ff 93       	push	r31
    1b52:	df 93       	push	r29
    1b54:	cf 93       	push	r28
    1b56:	cd b7       	in	r28, 0x3d	; 61
    1b58:	de b7       	in	r29, 0x3e	; 62

	if (  EXTI_ApfunINTFunc[EXTI0] != NULL )
    1b5a:	80 91 78 01 	lds	r24, 0x0178
    1b5e:	90 91 79 01 	lds	r25, 0x0179
    1b62:	00 97       	sbiw	r24, 0x00	; 0
    1b64:	49 f0       	breq	.+18     	; 0x1b78 <__vector_1+0x48>
	{
		(*EXTI_ApfunINTFunc[EXTI0])(EXTI_ApvidGenericParameter[EXTI0]);
    1b66:	e0 91 78 01 	lds	r30, 0x0178
    1b6a:	f0 91 79 01 	lds	r31, 0x0179
    1b6e:	80 91 7e 01 	lds	r24, 0x017E
    1b72:	90 91 7f 01 	lds	r25, 0x017F
    1b76:	09 95       	icall
	else
	{
		//Do nothing.
	}

}
    1b78:	cf 91       	pop	r28
    1b7a:	df 91       	pop	r29
    1b7c:	ff 91       	pop	r31
    1b7e:	ef 91       	pop	r30
    1b80:	bf 91       	pop	r27
    1b82:	af 91       	pop	r26
    1b84:	9f 91       	pop	r25
    1b86:	8f 91       	pop	r24
    1b88:	7f 91       	pop	r23
    1b8a:	6f 91       	pop	r22
    1b8c:	5f 91       	pop	r21
    1b8e:	4f 91       	pop	r20
    1b90:	3f 91       	pop	r19
    1b92:	2f 91       	pop	r18
    1b94:	0f 90       	pop	r0
    1b96:	0f be       	out	0x3f, r0	; 63
    1b98:	0f 90       	pop	r0
    1b9a:	1f 90       	pop	r1
    1b9c:	18 95       	reti

00001b9e <__vector_2>:

/**********************************************************************/
/************* Interrupt service routine for interrupt1 ***************/
ISR(VECT_INT1)
{
    1b9e:	1f 92       	push	r1
    1ba0:	0f 92       	push	r0
    1ba2:	0f b6       	in	r0, 0x3f	; 63
    1ba4:	0f 92       	push	r0
    1ba6:	11 24       	eor	r1, r1
    1ba8:	2f 93       	push	r18
    1baa:	3f 93       	push	r19
    1bac:	4f 93       	push	r20
    1bae:	5f 93       	push	r21
    1bb0:	6f 93       	push	r22
    1bb2:	7f 93       	push	r23
    1bb4:	8f 93       	push	r24
    1bb6:	9f 93       	push	r25
    1bb8:	af 93       	push	r26
    1bba:	bf 93       	push	r27
    1bbc:	ef 93       	push	r30
    1bbe:	ff 93       	push	r31
    1bc0:	df 93       	push	r29
    1bc2:	cf 93       	push	r28
    1bc4:	cd b7       	in	r28, 0x3d	; 61
    1bc6:	de b7       	in	r29, 0x3e	; 62
	if (  EXTI_ApfunINTFunc[EXTI1] != NULL )
    1bc8:	80 91 7a 01 	lds	r24, 0x017A
    1bcc:	90 91 7b 01 	lds	r25, 0x017B
    1bd0:	00 97       	sbiw	r24, 0x00	; 0
    1bd2:	49 f0       	breq	.+18     	; 0x1be6 <__vector_2+0x48>
	{
		(*EXTI_ApfunINTFunc[EXTI1])(EXTI_ApvidGenericParameter[EXTI1]);
    1bd4:	e0 91 7a 01 	lds	r30, 0x017A
    1bd8:	f0 91 7b 01 	lds	r31, 0x017B
    1bdc:	80 91 80 01 	lds	r24, 0x0180
    1be0:	90 91 81 01 	lds	r25, 0x0181
    1be4:	09 95       	icall
	else
	{
		//Do nothing.
	}

}
    1be6:	cf 91       	pop	r28
    1be8:	df 91       	pop	r29
    1bea:	ff 91       	pop	r31
    1bec:	ef 91       	pop	r30
    1bee:	bf 91       	pop	r27
    1bf0:	af 91       	pop	r26
    1bf2:	9f 91       	pop	r25
    1bf4:	8f 91       	pop	r24
    1bf6:	7f 91       	pop	r23
    1bf8:	6f 91       	pop	r22
    1bfa:	5f 91       	pop	r21
    1bfc:	4f 91       	pop	r20
    1bfe:	3f 91       	pop	r19
    1c00:	2f 91       	pop	r18
    1c02:	0f 90       	pop	r0
    1c04:	0f be       	out	0x3f, r0	; 63
    1c06:	0f 90       	pop	r0
    1c08:	1f 90       	pop	r1
    1c0a:	18 95       	reti

00001c0c <__vector_3>:


/**********************************************************************/
/************* Interrupt service routine for interrupt2 ***************/
ISR(VECT_INT2)
{
    1c0c:	1f 92       	push	r1
    1c0e:	0f 92       	push	r0
    1c10:	0f b6       	in	r0, 0x3f	; 63
    1c12:	0f 92       	push	r0
    1c14:	11 24       	eor	r1, r1
    1c16:	2f 93       	push	r18
    1c18:	3f 93       	push	r19
    1c1a:	4f 93       	push	r20
    1c1c:	5f 93       	push	r21
    1c1e:	6f 93       	push	r22
    1c20:	7f 93       	push	r23
    1c22:	8f 93       	push	r24
    1c24:	9f 93       	push	r25
    1c26:	af 93       	push	r26
    1c28:	bf 93       	push	r27
    1c2a:	ef 93       	push	r30
    1c2c:	ff 93       	push	r31
    1c2e:	df 93       	push	r29
    1c30:	cf 93       	push	r28
    1c32:	cd b7       	in	r28, 0x3d	; 61
    1c34:	de b7       	in	r29, 0x3e	; 62

	if (  EXTI_ApfunINTFunc[EXTI2] != NULL )
    1c36:	80 91 7c 01 	lds	r24, 0x017C
    1c3a:	90 91 7d 01 	lds	r25, 0x017D
    1c3e:	00 97       	sbiw	r24, 0x00	; 0
    1c40:	49 f0       	breq	.+18     	; 0x1c54 <__vector_3+0x48>
	{
		(*EXTI_ApfunINTFunc[EXTI2])(EXTI_ApvidGenericParameter[EXTI2]);
    1c42:	e0 91 7c 01 	lds	r30, 0x017C
    1c46:	f0 91 7d 01 	lds	r31, 0x017D
    1c4a:	80 91 82 01 	lds	r24, 0x0182
    1c4e:	90 91 83 01 	lds	r25, 0x0183
    1c52:	09 95       	icall
	else
	{
		//Do nothing.
	}

}
    1c54:	cf 91       	pop	r28
    1c56:	df 91       	pop	r29
    1c58:	ff 91       	pop	r31
    1c5a:	ef 91       	pop	r30
    1c5c:	bf 91       	pop	r27
    1c5e:	af 91       	pop	r26
    1c60:	9f 91       	pop	r25
    1c62:	8f 91       	pop	r24
    1c64:	7f 91       	pop	r23
    1c66:	6f 91       	pop	r22
    1c68:	5f 91       	pop	r21
    1c6a:	4f 91       	pop	r20
    1c6c:	3f 91       	pop	r19
    1c6e:	2f 91       	pop	r18
    1c70:	0f 90       	pop	r0
    1c72:	0f be       	out	0x3f, r0	; 63
    1c74:	0f 90       	pop	r0
    1c76:	1f 90       	pop	r1
    1c78:	18 95       	reti

00001c7a <DIO_enuSetPortDirection>:
/*                 : Arg.2: Copy_u8Dir:                                     */
/*                                        DIO_INPTU_PIN  ,   DIO_OUTPUT_PIN */
/* Return          : ERROR_STATE eum.                                       */
/****************************************************************************/
ES_t DIO_enuSetPortDirection(u8 Copy_u8PortID, u8 Copy_u8Dir)
{
    1c7a:	df 93       	push	r29
    1c7c:	cf 93       	push	r28
    1c7e:	00 d0       	rcall	.+0      	; 0x1c80 <DIO_enuSetPortDirection+0x6>
    1c80:	00 d0       	rcall	.+0      	; 0x1c82 <DIO_enuSetPortDirection+0x8>
    1c82:	0f 92       	push	r0
    1c84:	cd b7       	in	r28, 0x3d	; 61
    1c86:	de b7       	in	r29, 0x3e	; 62
    1c88:	8a 83       	std	Y+2, r24	; 0x02
    1c8a:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuerrorState = ES_NOK ;
    1c8c:	19 82       	std	Y+1, r1	; 0x01

	if( (Copy_u8PortID <= DIO_PORTD )&& (Copy_u8Dir <= OUTPUT_PORT)  )
    1c8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c90:	84 30       	cpi	r24, 0x04	; 4
    1c92:	a8 f5       	brcc	.+106    	; 0x1cfe <DIO_enuSetPortDirection+0x84>
	{
		switch( Copy_u8PortID )
    1c94:	8a 81       	ldd	r24, Y+2	; 0x02
    1c96:	28 2f       	mov	r18, r24
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	3d 83       	std	Y+5, r19	; 0x05
    1c9c:	2c 83       	std	Y+4, r18	; 0x04
    1c9e:	8c 81       	ldd	r24, Y+4	; 0x04
    1ca0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ca2:	81 30       	cpi	r24, 0x01	; 1
    1ca4:	91 05       	cpc	r25, r1
    1ca6:	d1 f0       	breq	.+52     	; 0x1cdc <DIO_enuSetPortDirection+0x62>
    1ca8:	2c 81       	ldd	r18, Y+4	; 0x04
    1caa:	3d 81       	ldd	r19, Y+5	; 0x05
    1cac:	22 30       	cpi	r18, 0x02	; 2
    1cae:	31 05       	cpc	r19, r1
    1cb0:	2c f4       	brge	.+10     	; 0x1cbc <DIO_enuSetPortDirection+0x42>
    1cb2:	8c 81       	ldd	r24, Y+4	; 0x04
    1cb4:	9d 81       	ldd	r25, Y+5	; 0x05
    1cb6:	00 97       	sbiw	r24, 0x00	; 0
    1cb8:	61 f0       	breq	.+24     	; 0x1cd2 <DIO_enuSetPortDirection+0x58>
    1cba:	1e c0       	rjmp	.+60     	; 0x1cf8 <DIO_enuSetPortDirection+0x7e>
    1cbc:	2c 81       	ldd	r18, Y+4	; 0x04
    1cbe:	3d 81       	ldd	r19, Y+5	; 0x05
    1cc0:	22 30       	cpi	r18, 0x02	; 2
    1cc2:	31 05       	cpc	r19, r1
    1cc4:	81 f0       	breq	.+32     	; 0x1ce6 <DIO_enuSetPortDirection+0x6c>
    1cc6:	8c 81       	ldd	r24, Y+4	; 0x04
    1cc8:	9d 81       	ldd	r25, Y+5	; 0x05
    1cca:	83 30       	cpi	r24, 0x03	; 3
    1ccc:	91 05       	cpc	r25, r1
    1cce:	81 f0       	breq	.+32     	; 0x1cf0 <DIO_enuSetPortDirection+0x76>
    1cd0:	13 c0       	rjmp	.+38     	; 0x1cf8 <DIO_enuSetPortDirection+0x7e>
		{
		case DIO_PORTA :
			DDRA = Copy_u8Dir;
    1cd2:	ea e3       	ldi	r30, 0x3A	; 58
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd8:	80 83       	st	Z, r24
    1cda:	0e c0       	rjmp	.+28     	; 0x1cf8 <DIO_enuSetPortDirection+0x7e>
			break;

		case DIO_PORTB :
			DDRB = Copy_u8Dir;
    1cdc:	e7 e3       	ldi	r30, 0x37	; 55
    1cde:	f0 e0       	ldi	r31, 0x00	; 0
    1ce0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce2:	80 83       	st	Z, r24
    1ce4:	09 c0       	rjmp	.+18     	; 0x1cf8 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTC :
			DDRC = Copy_u8Dir;
    1ce6:	e4 e3       	ldi	r30, 0x34	; 52
    1ce8:	f0 e0       	ldi	r31, 0x00	; 0
    1cea:	8b 81       	ldd	r24, Y+3	; 0x03
    1cec:	80 83       	st	Z, r24
    1cee:	04 c0       	rjmp	.+8      	; 0x1cf8 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTD :
			DDRD = Copy_u8Dir;
    1cf0:	e1 e3       	ldi	r30, 0x31	; 49
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf6:	80 83       	st	Z, r24
			break;
		}
		Local_enuerrorState = ES_OK;
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	89 83       	std	Y+1, r24	; 0x01
    1cfc:	02 c0       	rjmp	.+4      	; 0x1d02 <DIO_enuSetPortDirection+0x88>

	}
	else
	{
		Local_enuerrorState = ES_OUT_OF_RANGE;
    1cfe:	83 e0       	ldi	r24, 0x03	; 3
    1d00:	89 83       	std	Y+1, r24	; 0x01

	}


	return Local_enuerrorState  ;
    1d02:	89 81       	ldd	r24, Y+1	; 0x01

}//End of DIO_enuSetPortDirection().
    1d04:	0f 90       	pop	r0
    1d06:	0f 90       	pop	r0
    1d08:	0f 90       	pop	r0
    1d0a:	0f 90       	pop	r0
    1d0c:	0f 90       	pop	r0
    1d0e:	cf 91       	pop	r28
    1d10:	df 91       	pop	r29
    1d12:	08 95       	ret

00001d14 <DIO_enuSetPortValue>:
/*                 : Arg.2: Copy_u8Val:                                     */
/*                                        DIO_INPTU_PIN  ,  DIO_OUTPUT_PIN  */
/* Return          : ERROR_STATE eum.                                       */
/****************************************************************************/
ES_t DIO_enuSetPortValue(u8 Copy_u8PortID, u8 Copy_u8Val)
{
    1d14:	df 93       	push	r29
    1d16:	cf 93       	push	r28
    1d18:	00 d0       	rcall	.+0      	; 0x1d1a <DIO_enuSetPortValue+0x6>
    1d1a:	00 d0       	rcall	.+0      	; 0x1d1c <DIO_enuSetPortValue+0x8>
    1d1c:	0f 92       	push	r0
    1d1e:	cd b7       	in	r28, 0x3d	; 61
    1d20:	de b7       	in	r29, 0x3e	; 62
    1d22:	8a 83       	std	Y+2, r24	; 0x02
    1d24:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuerrorState = ES_NOK ;
    1d26:	19 82       	std	Y+1, r1	; 0x01

	if( Copy_u8PortID <= DIO_PORTD )
    1d28:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2a:	84 30       	cpi	r24, 0x04	; 4
    1d2c:	a8 f5       	brcc	.+106    	; 0x1d98 <DIO_enuSetPortValue+0x84>
	{
		switch( Copy_u8PortID )
    1d2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d30:	28 2f       	mov	r18, r24
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	3d 83       	std	Y+5, r19	; 0x05
    1d36:	2c 83       	std	Y+4, r18	; 0x04
    1d38:	8c 81       	ldd	r24, Y+4	; 0x04
    1d3a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d3c:	81 30       	cpi	r24, 0x01	; 1
    1d3e:	91 05       	cpc	r25, r1
    1d40:	d1 f0       	breq	.+52     	; 0x1d76 <DIO_enuSetPortValue+0x62>
    1d42:	2c 81       	ldd	r18, Y+4	; 0x04
    1d44:	3d 81       	ldd	r19, Y+5	; 0x05
    1d46:	22 30       	cpi	r18, 0x02	; 2
    1d48:	31 05       	cpc	r19, r1
    1d4a:	2c f4       	brge	.+10     	; 0x1d56 <DIO_enuSetPortValue+0x42>
    1d4c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d4e:	9d 81       	ldd	r25, Y+5	; 0x05
    1d50:	00 97       	sbiw	r24, 0x00	; 0
    1d52:	61 f0       	breq	.+24     	; 0x1d6c <DIO_enuSetPortValue+0x58>
    1d54:	1e c0       	rjmp	.+60     	; 0x1d92 <DIO_enuSetPortValue+0x7e>
    1d56:	2c 81       	ldd	r18, Y+4	; 0x04
    1d58:	3d 81       	ldd	r19, Y+5	; 0x05
    1d5a:	22 30       	cpi	r18, 0x02	; 2
    1d5c:	31 05       	cpc	r19, r1
    1d5e:	81 f0       	breq	.+32     	; 0x1d80 <DIO_enuSetPortValue+0x6c>
    1d60:	8c 81       	ldd	r24, Y+4	; 0x04
    1d62:	9d 81       	ldd	r25, Y+5	; 0x05
    1d64:	83 30       	cpi	r24, 0x03	; 3
    1d66:	91 05       	cpc	r25, r1
    1d68:	81 f0       	breq	.+32     	; 0x1d8a <DIO_enuSetPortValue+0x76>
    1d6a:	13 c0       	rjmp	.+38     	; 0x1d92 <DIO_enuSetPortValue+0x7e>
		{
		case DIO_PORTA :
			PORTA = Copy_u8Val;
    1d6c:	eb e3       	ldi	r30, 0x3B	; 59
    1d6e:	f0 e0       	ldi	r31, 0x00	; 0
    1d70:	8b 81       	ldd	r24, Y+3	; 0x03
    1d72:	80 83       	st	Z, r24
    1d74:	0e c0       	rjmp	.+28     	; 0x1d92 <DIO_enuSetPortValue+0x7e>
			break;

		case DIO_PORTB :
			PORTB = Copy_u8Val;
    1d76:	e8 e3       	ldi	r30, 0x38	; 56
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7c:	80 83       	st	Z, r24
    1d7e:	09 c0       	rjmp	.+18     	; 0x1d92 <DIO_enuSetPortValue+0x7e>
			break;

		case DIO_PORTC :
			PORTC = Copy_u8Val;
    1d80:	e5 e3       	ldi	r30, 0x35	; 53
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	8b 81       	ldd	r24, Y+3	; 0x03
    1d86:	80 83       	st	Z, r24
    1d88:	04 c0       	rjmp	.+8      	; 0x1d92 <DIO_enuSetPortValue+0x7e>
			break;

		case DIO_PORTD :
			PORTD = Copy_u8Val;
    1d8a:	e2 e3       	ldi	r30, 0x32	; 50
    1d8c:	f0 e0       	ldi	r31, 0x00	; 0
    1d8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d90:	80 83       	st	Z, r24
			break;
		}

		Local_enuerrorState = ES_OK;
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	89 83       	std	Y+1, r24	; 0x01
    1d96:	02 c0       	rjmp	.+4      	; 0x1d9c <DIO_enuSetPortValue+0x88>

	}
	else
	{
		Local_enuerrorState = ES_OUT_OF_RANGE;
    1d98:	83 e0       	ldi	r24, 0x03	; 3
    1d9a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuerrorState  ;
    1d9c:	89 81       	ldd	r24, Y+1	; 0x01
}//End of DIO_enuSetPortValue().
    1d9e:	0f 90       	pop	r0
    1da0:	0f 90       	pop	r0
    1da2:	0f 90       	pop	r0
    1da4:	0f 90       	pop	r0
    1da6:	0f 90       	pop	r0
    1da8:	cf 91       	pop	r28
    1daa:	df 91       	pop	r29
    1dac:	08 95       	ret

00001dae <DIO_enuToggelPort>:
/*                                        DIO_PORTA      ,   DIO_PORTA      */
/*                                        DIO_PORTA      ,   DIO_PORTA      */
/* Return          : ERROR_STATE eum.                                       */
/****************************************************************************/
ES_t DIO_enuToggelPort(u8  Copy_u8PortID )
{
    1dae:	df 93       	push	r29
    1db0:	cf 93       	push	r28
    1db2:	00 d0       	rcall	.+0      	; 0x1db4 <DIO_enuToggelPort+0x6>
    1db4:	00 d0       	rcall	.+0      	; 0x1db6 <DIO_enuToggelPort+0x8>
    1db6:	cd b7       	in	r28, 0x3d	; 61
    1db8:	de b7       	in	r29, 0x3e	; 62
    1dba:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuerrorState = ES_NOK ;
    1dbc:	19 82       	std	Y+1, r1	; 0x01

	if( Copy_u8PortID <= DIO_PORTD )
    1dbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc0:	84 30       	cpi	r24, 0x04	; 4
    1dc2:	08 f0       	brcs	.+2      	; 0x1dc6 <DIO_enuToggelPort+0x18>
    1dc4:	41 c0       	rjmp	.+130    	; 0x1e48 <DIO_enuToggelPort+0x9a>
	{
		switch( Copy_u8PortID )
    1dc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc8:	28 2f       	mov	r18, r24
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	3c 83       	std	Y+4, r19	; 0x04
    1dce:	2b 83       	std	Y+3, r18	; 0x03
    1dd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd2:	9c 81       	ldd	r25, Y+4	; 0x04
    1dd4:	81 30       	cpi	r24, 0x01	; 1
    1dd6:	91 05       	cpc	r25, r1
    1dd8:	e9 f0       	breq	.+58     	; 0x1e14 <DIO_enuToggelPort+0x66>
    1dda:	2b 81       	ldd	r18, Y+3	; 0x03
    1ddc:	3c 81       	ldd	r19, Y+4	; 0x04
    1dde:	22 30       	cpi	r18, 0x02	; 2
    1de0:	31 05       	cpc	r19, r1
    1de2:	2c f4       	brge	.+10     	; 0x1dee <DIO_enuToggelPort+0x40>
    1de4:	8b 81       	ldd	r24, Y+3	; 0x03
    1de6:	9c 81       	ldd	r25, Y+4	; 0x04
    1de8:	00 97       	sbiw	r24, 0x00	; 0
    1dea:	61 f0       	breq	.+24     	; 0x1e04 <DIO_enuToggelPort+0x56>
    1dec:	2a c0       	rjmp	.+84     	; 0x1e42 <DIO_enuToggelPort+0x94>
    1dee:	2b 81       	ldd	r18, Y+3	; 0x03
    1df0:	3c 81       	ldd	r19, Y+4	; 0x04
    1df2:	22 30       	cpi	r18, 0x02	; 2
    1df4:	31 05       	cpc	r19, r1
    1df6:	b1 f0       	breq	.+44     	; 0x1e24 <DIO_enuToggelPort+0x76>
    1df8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfa:	9c 81       	ldd	r25, Y+4	; 0x04
    1dfc:	83 30       	cpi	r24, 0x03	; 3
    1dfe:	91 05       	cpc	r25, r1
    1e00:	c9 f0       	breq	.+50     	; 0x1e34 <DIO_enuToggelPort+0x86>
    1e02:	1f c0       	rjmp	.+62     	; 0x1e42 <DIO_enuToggelPort+0x94>
		{
		case DIO_PORTA :
			PORTA = ~PORTA;
    1e04:	ab e3       	ldi	r26, 0x3B	; 59
    1e06:	b0 e0       	ldi	r27, 0x00	; 0
    1e08:	eb e3       	ldi	r30, 0x3B	; 59
    1e0a:	f0 e0       	ldi	r31, 0x00	; 0
    1e0c:	80 81       	ld	r24, Z
    1e0e:	80 95       	com	r24
    1e10:	8c 93       	st	X, r24
    1e12:	17 c0       	rjmp	.+46     	; 0x1e42 <DIO_enuToggelPort+0x94>
			break;

		case DIO_PORTB :
			PORTB = ~PORTB;
    1e14:	a8 e3       	ldi	r26, 0x38	; 56
    1e16:	b0 e0       	ldi	r27, 0x00	; 0
    1e18:	e8 e3       	ldi	r30, 0x38	; 56
    1e1a:	f0 e0       	ldi	r31, 0x00	; 0
    1e1c:	80 81       	ld	r24, Z
    1e1e:	80 95       	com	r24
    1e20:	8c 93       	st	X, r24
    1e22:	0f c0       	rjmp	.+30     	; 0x1e42 <DIO_enuToggelPort+0x94>
			break;

		case DIO_PORTC :
			PORTC = ~PORTC;
    1e24:	a5 e3       	ldi	r26, 0x35	; 53
    1e26:	b0 e0       	ldi	r27, 0x00	; 0
    1e28:	e5 e3       	ldi	r30, 0x35	; 53
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	80 81       	ld	r24, Z
    1e2e:	80 95       	com	r24
    1e30:	8c 93       	st	X, r24
    1e32:	07 c0       	rjmp	.+14     	; 0x1e42 <DIO_enuToggelPort+0x94>
			break;

		case DIO_PORTD :
			PORTD = ~PORTD ;
    1e34:	a2 e3       	ldi	r26, 0x32	; 50
    1e36:	b0 e0       	ldi	r27, 0x00	; 0
    1e38:	e2 e3       	ldi	r30, 0x32	; 50
    1e3a:	f0 e0       	ldi	r31, 0x00	; 0
    1e3c:	80 81       	ld	r24, Z
    1e3e:	80 95       	com	r24
    1e40:	8c 93       	st	X, r24
			break;
		}

		Local_enuerrorState = ES_OK;
    1e42:	81 e0       	ldi	r24, 0x01	; 1
    1e44:	89 83       	std	Y+1, r24	; 0x01
    1e46:	02 c0       	rjmp	.+4      	; 0x1e4c <DIO_enuToggelPort+0x9e>

	}
	else
	{
		Local_enuerrorState = ES_OUT_OF_RANGE;
    1e48:	83 e0       	ldi	r24, 0x03	; 3
    1e4a:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuerrorState  ;
    1e4c:	89 81       	ldd	r24, Y+1	; 0x01
}//End of DIO_enuToggelPort().
    1e4e:	0f 90       	pop	r0
    1e50:	0f 90       	pop	r0
    1e52:	0f 90       	pop	r0
    1e54:	0f 90       	pop	r0
    1e56:	cf 91       	pop	r28
    1e58:	df 91       	pop	r29
    1e5a:	08 95       	ret

00001e5c <DIO_enuGetPortVlaue>:
/*                                                                          */
/*                 : Arg.2: Address of u8 variable.                         */
/* Return          : ERROR_STATE eum.                                       */
/****************************************************************************/
ES_t DIO_enuGetPortVlaue(u8 Copy_u8PortID, u8* Copy_pu8PortVal)
{
    1e5c:	df 93       	push	r29
    1e5e:	cf 93       	push	r28
    1e60:	00 d0       	rcall	.+0      	; 0x1e62 <DIO_enuGetPortVlaue+0x6>
    1e62:	00 d0       	rcall	.+0      	; 0x1e64 <DIO_enuGetPortVlaue+0x8>
    1e64:	00 d0       	rcall	.+0      	; 0x1e66 <DIO_enuGetPortVlaue+0xa>
    1e66:	cd b7       	in	r28, 0x3d	; 61
    1e68:	de b7       	in	r29, 0x3e	; 62
    1e6a:	8a 83       	std	Y+2, r24	; 0x02
    1e6c:	7c 83       	std	Y+4, r23	; 0x04
    1e6e:	6b 83       	std	Y+3, r22	; 0x03
	//Local Variable to
	ES_t Local_enuerrorState = ES_NOK ;
    1e70:	19 82       	std	Y+1, r1	; 0x01

	// Check to ensure that the passed address is not equal Null.
	if( Copy_pu8PortVal != NULL )
    1e72:	8b 81       	ldd	r24, Y+3	; 0x03
    1e74:	9c 81       	ldd	r25, Y+4	; 0x04
    1e76:	00 97       	sbiw	r24, 0x00	; 0
    1e78:	09 f4       	brne	.+2      	; 0x1e7c <DIO_enuGetPortVlaue+0x20>
    1e7a:	43 c0       	rjmp	.+134    	; 0x1f02 <DIO_enuGetPortVlaue+0xa6>
	{
		// Check to ensure that the passed PortID is in range.
		if( Copy_u8PortID <= DIO_PORTD )
    1e7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7e:	84 30       	cpi	r24, 0x04	; 4
    1e80:	e8 f5       	brcc	.+122    	; 0x1efc <DIO_enuGetPortVlaue+0xa0>
		{

			/**********************************************************
			 * Switching for the suitable case .
			 **********************************************************/
			switch( Copy_u8PortID )
    1e82:	8a 81       	ldd	r24, Y+2	; 0x02
    1e84:	28 2f       	mov	r18, r24
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	3e 83       	std	Y+6, r19	; 0x06
    1e8a:	2d 83       	std	Y+5, r18	; 0x05
    1e8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e90:	81 30       	cpi	r24, 0x01	; 1
    1e92:	91 05       	cpc	r25, r1
    1e94:	e1 f0       	breq	.+56     	; 0x1ece <DIO_enuGetPortVlaue+0x72>
    1e96:	2d 81       	ldd	r18, Y+5	; 0x05
    1e98:	3e 81       	ldd	r19, Y+6	; 0x06
    1e9a:	22 30       	cpi	r18, 0x02	; 2
    1e9c:	31 05       	cpc	r19, r1
    1e9e:	2c f4       	brge	.+10     	; 0x1eaa <DIO_enuGetPortVlaue+0x4e>
    1ea0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ea4:	00 97       	sbiw	r24, 0x00	; 0
    1ea6:	61 f0       	breq	.+24     	; 0x1ec0 <DIO_enuGetPortVlaue+0x64>
    1ea8:	26 c0       	rjmp	.+76     	; 0x1ef6 <DIO_enuGetPortVlaue+0x9a>
    1eaa:	2d 81       	ldd	r18, Y+5	; 0x05
    1eac:	3e 81       	ldd	r19, Y+6	; 0x06
    1eae:	22 30       	cpi	r18, 0x02	; 2
    1eb0:	31 05       	cpc	r19, r1
    1eb2:	a1 f0       	breq	.+40     	; 0x1edc <DIO_enuGetPortVlaue+0x80>
    1eb4:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb6:	9e 81       	ldd	r25, Y+6	; 0x06
    1eb8:	83 30       	cpi	r24, 0x03	; 3
    1eba:	91 05       	cpc	r25, r1
    1ebc:	b1 f0       	breq	.+44     	; 0x1eea <DIO_enuGetPortVlaue+0x8e>
    1ebe:	1b c0       	rjmp	.+54     	; 0x1ef6 <DIO_enuGetPortVlaue+0x9a>
			{
			case DIO_PORTA :
				*Copy_pu8PortVal = PINA;
    1ec0:	e9 e3       	ldi	r30, 0x39	; 57
    1ec2:	f0 e0       	ldi	r31, 0x00	; 0
    1ec4:	80 81       	ld	r24, Z
    1ec6:	eb 81       	ldd	r30, Y+3	; 0x03
    1ec8:	fc 81       	ldd	r31, Y+4	; 0x04
    1eca:	80 83       	st	Z, r24
    1ecc:	14 c0       	rjmp	.+40     	; 0x1ef6 <DIO_enuGetPortVlaue+0x9a>
				break;

			case DIO_PORTB :
				*Copy_pu8PortVal = PINB;
    1ece:	e6 e3       	ldi	r30, 0x36	; 54
    1ed0:	f0 e0       	ldi	r31, 0x00	; 0
    1ed2:	80 81       	ld	r24, Z
    1ed4:	eb 81       	ldd	r30, Y+3	; 0x03
    1ed6:	fc 81       	ldd	r31, Y+4	; 0x04
    1ed8:	80 83       	st	Z, r24
    1eda:	0d c0       	rjmp	.+26     	; 0x1ef6 <DIO_enuGetPortVlaue+0x9a>
				break;

			case DIO_PORTC :
				*Copy_pu8PortVal = PINC;
    1edc:	e3 e3       	ldi	r30, 0x33	; 51
    1ede:	f0 e0       	ldi	r31, 0x00	; 0
    1ee0:	80 81       	ld	r24, Z
    1ee2:	eb 81       	ldd	r30, Y+3	; 0x03
    1ee4:	fc 81       	ldd	r31, Y+4	; 0x04
    1ee6:	80 83       	st	Z, r24
    1ee8:	06 c0       	rjmp	.+12     	; 0x1ef6 <DIO_enuGetPortVlaue+0x9a>
				break;

			case DIO_PORTD :
				*Copy_pu8PortVal = PIND ;
    1eea:	e0 e3       	ldi	r30, 0x30	; 48
    1eec:	f0 e0       	ldi	r31, 0x00	; 0
    1eee:	80 81       	ld	r24, Z
    1ef0:	eb 81       	ldd	r30, Y+3	; 0x03
    1ef2:	fc 81       	ldd	r31, Y+4	; 0x04
    1ef4:	80 83       	st	Z, r24
				break;
			}

			Local_enuerrorState = ES_OK;
    1ef6:	81 e0       	ldi	r24, 0x01	; 1
    1ef8:	89 83       	std	Y+1, r24	; 0x01
    1efa:	05 c0       	rjmp	.+10     	; 0x1f06 <DIO_enuGetPortVlaue+0xaa>
		else
		{
			/**********************************************************
			 * Handle Out Of Range case.
			 **********************************************************/
			Local_enuerrorState = ES_OUT_OF_RANGE;
    1efc:	83 e0       	ldi	r24, 0x03	; 3
    1efe:	89 83       	std	Y+1, r24	; 0x01
    1f00:	02 c0       	rjmp	.+4      	; 0x1f06 <DIO_enuGetPortVlaue+0xaa>
	else
	{
		/**********************************************************
		 * Handle null pointer case.
		 **********************************************************/
		Local_enuerrorState = ES_NULL_POINTER;
    1f02:	82 e0       	ldi	r24, 0x02	; 2
    1f04:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuerrorState  ;
    1f06:	89 81       	ldd	r24, Y+1	; 0x01

}//End of DIO_enuGetPortVlaue().
    1f08:	26 96       	adiw	r28, 0x06	; 6
    1f0a:	0f b6       	in	r0, 0x3f	; 63
    1f0c:	f8 94       	cli
    1f0e:	de bf       	out	0x3e, r29	; 62
    1f10:	0f be       	out	0x3f, r0	; 63
    1f12:	cd bf       	out	0x3d, r28	; 61
    1f14:	cf 91       	pop	r28
    1f16:	df 91       	pop	r29
    1f18:	08 95       	ret

00001f1a <DIO_enuSetPinDirection>:
/*                 : Arg.3: Copy_u8Dir.                                     */
/*                                       DIO_INPTU_PIN   ,   DIO_OUTPUT_PIN */
/* Return          : ERROR_STATE eum.                                       */
/****************************************************************************/
ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID, u8 Copy_u8PinID , u8 Copy_u8Dir)
{
    1f1a:	df 93       	push	r29
    1f1c:	cf 93       	push	r28
    1f1e:	00 d0       	rcall	.+0      	; 0x1f20 <DIO_enuSetPinDirection+0x6>
    1f20:	00 d0       	rcall	.+0      	; 0x1f22 <DIO_enuSetPinDirection+0x8>
    1f22:	00 d0       	rcall	.+0      	; 0x1f24 <DIO_enuSetPinDirection+0xa>
    1f24:	cd b7       	in	r28, 0x3d	; 61
    1f26:	de b7       	in	r29, 0x3e	; 62
    1f28:	8a 83       	std	Y+2, r24	; 0x02
    1f2a:	6b 83       	std	Y+3, r22	; 0x03
    1f2c:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuerrorState = ES_NOK ;
    1f2e:	19 82       	std	Y+1, r1	; 0x01

	if( (Copy_u8PortID <= DIO_PORTD) && (Copy_u8PinID <= DIO_PIN7) &&( Copy_u8Dir<= OUTPUT_PIN))
    1f30:	8a 81       	ldd	r24, Y+2	; 0x02
    1f32:	84 30       	cpi	r24, 0x04	; 4
    1f34:	08 f0       	brcs	.+2      	; 0x1f38 <DIO_enuSetPinDirection+0x1e>
    1f36:	dc c0       	rjmp	.+440    	; 0x20f0 <DIO_enuSetPinDirection+0x1d6>
    1f38:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3a:	88 30       	cpi	r24, 0x08	; 8
    1f3c:	08 f0       	brcs	.+2      	; 0x1f40 <DIO_enuSetPinDirection+0x26>
    1f3e:	d8 c0       	rjmp	.+432    	; 0x20f0 <DIO_enuSetPinDirection+0x1d6>
    1f40:	8c 81       	ldd	r24, Y+4	; 0x04
    1f42:	82 30       	cpi	r24, 0x02	; 2
    1f44:	08 f0       	brcs	.+2      	; 0x1f48 <DIO_enuSetPinDirection+0x2e>
    1f46:	d4 c0       	rjmp	.+424    	; 0x20f0 <DIO_enuSetPinDirection+0x1d6>
	{

		/**********************************************************
		 * Switching for the suitable case .
		 **********************************************************/
		switch( Copy_u8PortID )
    1f48:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4a:	28 2f       	mov	r18, r24
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	3e 83       	std	Y+6, r19	; 0x06
    1f50:	2d 83       	std	Y+5, r18	; 0x05
    1f52:	8d 81       	ldd	r24, Y+5	; 0x05
    1f54:	9e 81       	ldd	r25, Y+6	; 0x06
    1f56:	81 30       	cpi	r24, 0x01	; 1
    1f58:	91 05       	cpc	r25, r1
    1f5a:	09 f4       	brne	.+2      	; 0x1f5e <DIO_enuSetPinDirection+0x44>
    1f5c:	43 c0       	rjmp	.+134    	; 0x1fe4 <DIO_enuSetPinDirection+0xca>
    1f5e:	2d 81       	ldd	r18, Y+5	; 0x05
    1f60:	3e 81       	ldd	r19, Y+6	; 0x06
    1f62:	22 30       	cpi	r18, 0x02	; 2
    1f64:	31 05       	cpc	r19, r1
    1f66:	2c f4       	brge	.+10     	; 0x1f72 <DIO_enuSetPinDirection+0x58>
    1f68:	8d 81       	ldd	r24, Y+5	; 0x05
    1f6a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f6c:	00 97       	sbiw	r24, 0x00	; 0
    1f6e:	71 f0       	breq	.+28     	; 0x1f8c <DIO_enuSetPinDirection+0x72>
    1f70:	bc c0       	rjmp	.+376    	; 0x20ea <DIO_enuSetPinDirection+0x1d0>
    1f72:	2d 81       	ldd	r18, Y+5	; 0x05
    1f74:	3e 81       	ldd	r19, Y+6	; 0x06
    1f76:	22 30       	cpi	r18, 0x02	; 2
    1f78:	31 05       	cpc	r19, r1
    1f7a:	09 f4       	brne	.+2      	; 0x1f7e <DIO_enuSetPinDirection+0x64>
    1f7c:	5f c0       	rjmp	.+190    	; 0x203c <DIO_enuSetPinDirection+0x122>
    1f7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f80:	9e 81       	ldd	r25, Y+6	; 0x06
    1f82:	83 30       	cpi	r24, 0x03	; 3
    1f84:	91 05       	cpc	r25, r1
    1f86:	09 f4       	brne	.+2      	; 0x1f8a <DIO_enuSetPinDirection+0x70>
    1f88:	85 c0       	rjmp	.+266    	; 0x2094 <DIO_enuSetPinDirection+0x17a>
    1f8a:	af c0       	rjmp	.+350    	; 0x20ea <DIO_enuSetPinDirection+0x1d0>
		{
		case DIO_PORTA :
			if( Copy_u8Dir == INPTU_PIN)
    1f8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f8e:	88 23       	and	r24, r24
    1f90:	a9 f4       	brne	.+42     	; 0x1fbc <DIO_enuSetPinDirection+0xa2>
			{
				DDRA &=~(DIO_MASK_BIT<<Copy_u8PinID);
    1f92:	aa e3       	ldi	r26, 0x3A	; 58
    1f94:	b0 e0       	ldi	r27, 0x00	; 0
    1f96:	ea e3       	ldi	r30, 0x3A	; 58
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	80 81       	ld	r24, Z
    1f9c:	48 2f       	mov	r20, r24
    1f9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa0:	28 2f       	mov	r18, r24
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	81 e0       	ldi	r24, 0x01	; 1
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	02 2e       	mov	r0, r18
    1faa:	02 c0       	rjmp	.+4      	; 0x1fb0 <DIO_enuSetPinDirection+0x96>
    1fac:	88 0f       	add	r24, r24
    1fae:	99 1f       	adc	r25, r25
    1fb0:	0a 94       	dec	r0
    1fb2:	e2 f7       	brpl	.-8      	; 0x1fac <DIO_enuSetPinDirection+0x92>
    1fb4:	80 95       	com	r24
    1fb6:	84 23       	and	r24, r20
    1fb8:	8c 93       	st	X, r24
    1fba:	97 c0       	rjmp	.+302    	; 0x20ea <DIO_enuSetPinDirection+0x1d0>
			}
			else
			{
				DDRA |=(DIO_MASK_BIT<<Copy_u8PinID);
    1fbc:	aa e3       	ldi	r26, 0x3A	; 58
    1fbe:	b0 e0       	ldi	r27, 0x00	; 0
    1fc0:	ea e3       	ldi	r30, 0x3A	; 58
    1fc2:	f0 e0       	ldi	r31, 0x00	; 0
    1fc4:	80 81       	ld	r24, Z
    1fc6:	48 2f       	mov	r20, r24
    1fc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fca:	28 2f       	mov	r18, r24
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	81 e0       	ldi	r24, 0x01	; 1
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	02 2e       	mov	r0, r18
    1fd4:	02 c0       	rjmp	.+4      	; 0x1fda <DIO_enuSetPinDirection+0xc0>
    1fd6:	88 0f       	add	r24, r24
    1fd8:	99 1f       	adc	r25, r25
    1fda:	0a 94       	dec	r0
    1fdc:	e2 f7       	brpl	.-8      	; 0x1fd6 <DIO_enuSetPinDirection+0xbc>
    1fde:	84 2b       	or	r24, r20
    1fe0:	8c 93       	st	X, r24
    1fe2:	83 c0       	rjmp	.+262    	; 0x20ea <DIO_enuSetPinDirection+0x1d0>
			}

			break;

		case DIO_PORTB :
			if( Copy_u8Dir == INPTU_PIN)
    1fe4:	8c 81       	ldd	r24, Y+4	; 0x04
    1fe6:	88 23       	and	r24, r24
    1fe8:	a9 f4       	brne	.+42     	; 0x2014 <DIO_enuSetPinDirection+0xfa>
			{
				DDRB &=~(DIO_MASK_BIT<<Copy_u8PinID);
    1fea:	a7 e3       	ldi	r26, 0x37	; 55
    1fec:	b0 e0       	ldi	r27, 0x00	; 0
    1fee:	e7 e3       	ldi	r30, 0x37	; 55
    1ff0:	f0 e0       	ldi	r31, 0x00	; 0
    1ff2:	80 81       	ld	r24, Z
    1ff4:	48 2f       	mov	r20, r24
    1ff6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff8:	28 2f       	mov	r18, r24
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	81 e0       	ldi	r24, 0x01	; 1
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	02 2e       	mov	r0, r18
    2002:	02 c0       	rjmp	.+4      	; 0x2008 <DIO_enuSetPinDirection+0xee>
    2004:	88 0f       	add	r24, r24
    2006:	99 1f       	adc	r25, r25
    2008:	0a 94       	dec	r0
    200a:	e2 f7       	brpl	.-8      	; 0x2004 <DIO_enuSetPinDirection+0xea>
    200c:	80 95       	com	r24
    200e:	84 23       	and	r24, r20
    2010:	8c 93       	st	X, r24
    2012:	6b c0       	rjmp	.+214    	; 0x20ea <DIO_enuSetPinDirection+0x1d0>
			}
			else
			{
				DDRB |=(DIO_MASK_BIT<<Copy_u8PinID);
    2014:	a7 e3       	ldi	r26, 0x37	; 55
    2016:	b0 e0       	ldi	r27, 0x00	; 0
    2018:	e7 e3       	ldi	r30, 0x37	; 55
    201a:	f0 e0       	ldi	r31, 0x00	; 0
    201c:	80 81       	ld	r24, Z
    201e:	48 2f       	mov	r20, r24
    2020:	8b 81       	ldd	r24, Y+3	; 0x03
    2022:	28 2f       	mov	r18, r24
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	81 e0       	ldi	r24, 0x01	; 1
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	02 2e       	mov	r0, r18
    202c:	02 c0       	rjmp	.+4      	; 0x2032 <DIO_enuSetPinDirection+0x118>
    202e:	88 0f       	add	r24, r24
    2030:	99 1f       	adc	r25, r25
    2032:	0a 94       	dec	r0
    2034:	e2 f7       	brpl	.-8      	; 0x202e <DIO_enuSetPinDirection+0x114>
    2036:	84 2b       	or	r24, r20
    2038:	8c 93       	st	X, r24
    203a:	57 c0       	rjmp	.+174    	; 0x20ea <DIO_enuSetPinDirection+0x1d0>
			}
			break;

		case DIO_PORTC :

			if( Copy_u8Dir == INPTU_PIN)
    203c:	8c 81       	ldd	r24, Y+4	; 0x04
    203e:	88 23       	and	r24, r24
    2040:	a9 f4       	brne	.+42     	; 0x206c <DIO_enuSetPinDirection+0x152>
			{
				DDRC &=~(DIO_MASK_BIT<<Copy_u8PinID);
    2042:	a4 e3       	ldi	r26, 0x34	; 52
    2044:	b0 e0       	ldi	r27, 0x00	; 0
    2046:	e4 e3       	ldi	r30, 0x34	; 52
    2048:	f0 e0       	ldi	r31, 0x00	; 0
    204a:	80 81       	ld	r24, Z
    204c:	48 2f       	mov	r20, r24
    204e:	8b 81       	ldd	r24, Y+3	; 0x03
    2050:	28 2f       	mov	r18, r24
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	81 e0       	ldi	r24, 0x01	; 1
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	02 2e       	mov	r0, r18
    205a:	02 c0       	rjmp	.+4      	; 0x2060 <DIO_enuSetPinDirection+0x146>
    205c:	88 0f       	add	r24, r24
    205e:	99 1f       	adc	r25, r25
    2060:	0a 94       	dec	r0
    2062:	e2 f7       	brpl	.-8      	; 0x205c <DIO_enuSetPinDirection+0x142>
    2064:	80 95       	com	r24
    2066:	84 23       	and	r24, r20
    2068:	8c 93       	st	X, r24
    206a:	3f c0       	rjmp	.+126    	; 0x20ea <DIO_enuSetPinDirection+0x1d0>
			}
			else
			{
				DDRC |=(DIO_MASK_BIT<<Copy_u8PinID);
    206c:	a4 e3       	ldi	r26, 0x34	; 52
    206e:	b0 e0       	ldi	r27, 0x00	; 0
    2070:	e4 e3       	ldi	r30, 0x34	; 52
    2072:	f0 e0       	ldi	r31, 0x00	; 0
    2074:	80 81       	ld	r24, Z
    2076:	48 2f       	mov	r20, r24
    2078:	8b 81       	ldd	r24, Y+3	; 0x03
    207a:	28 2f       	mov	r18, r24
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	81 e0       	ldi	r24, 0x01	; 1
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	02 2e       	mov	r0, r18
    2084:	02 c0       	rjmp	.+4      	; 0x208a <DIO_enuSetPinDirection+0x170>
    2086:	88 0f       	add	r24, r24
    2088:	99 1f       	adc	r25, r25
    208a:	0a 94       	dec	r0
    208c:	e2 f7       	brpl	.-8      	; 0x2086 <DIO_enuSetPinDirection+0x16c>
    208e:	84 2b       	or	r24, r20
    2090:	8c 93       	st	X, r24
    2092:	2b c0       	rjmp	.+86     	; 0x20ea <DIO_enuSetPinDirection+0x1d0>
			}
			break;

		case DIO_PORTD :
			if( Copy_u8Dir == INPTU_PIN)
    2094:	8c 81       	ldd	r24, Y+4	; 0x04
    2096:	88 23       	and	r24, r24
    2098:	a9 f4       	brne	.+42     	; 0x20c4 <DIO_enuSetPinDirection+0x1aa>
			{
				DDRD &=~(DIO_MASK_BIT<<Copy_u8PinID);
    209a:	a1 e3       	ldi	r26, 0x31	; 49
    209c:	b0 e0       	ldi	r27, 0x00	; 0
    209e:	e1 e3       	ldi	r30, 0x31	; 49
    20a0:	f0 e0       	ldi	r31, 0x00	; 0
    20a2:	80 81       	ld	r24, Z
    20a4:	48 2f       	mov	r20, r24
    20a6:	8b 81       	ldd	r24, Y+3	; 0x03
    20a8:	28 2f       	mov	r18, r24
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	81 e0       	ldi	r24, 0x01	; 1
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	02 2e       	mov	r0, r18
    20b2:	02 c0       	rjmp	.+4      	; 0x20b8 <DIO_enuSetPinDirection+0x19e>
    20b4:	88 0f       	add	r24, r24
    20b6:	99 1f       	adc	r25, r25
    20b8:	0a 94       	dec	r0
    20ba:	e2 f7       	brpl	.-8      	; 0x20b4 <DIO_enuSetPinDirection+0x19a>
    20bc:	80 95       	com	r24
    20be:	84 23       	and	r24, r20
    20c0:	8c 93       	st	X, r24
    20c2:	13 c0       	rjmp	.+38     	; 0x20ea <DIO_enuSetPinDirection+0x1d0>
			}
			else
			{
				DDRD |=(DIO_MASK_BIT<<Copy_u8PinID);
    20c4:	a1 e3       	ldi	r26, 0x31	; 49
    20c6:	b0 e0       	ldi	r27, 0x00	; 0
    20c8:	e1 e3       	ldi	r30, 0x31	; 49
    20ca:	f0 e0       	ldi	r31, 0x00	; 0
    20cc:	80 81       	ld	r24, Z
    20ce:	48 2f       	mov	r20, r24
    20d0:	8b 81       	ldd	r24, Y+3	; 0x03
    20d2:	28 2f       	mov	r18, r24
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	81 e0       	ldi	r24, 0x01	; 1
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	02 2e       	mov	r0, r18
    20dc:	02 c0       	rjmp	.+4      	; 0x20e2 <DIO_enuSetPinDirection+0x1c8>
    20de:	88 0f       	add	r24, r24
    20e0:	99 1f       	adc	r25, r25
    20e2:	0a 94       	dec	r0
    20e4:	e2 f7       	brpl	.-8      	; 0x20de <DIO_enuSetPinDirection+0x1c4>
    20e6:	84 2b       	or	r24, r20
    20e8:	8c 93       	st	X, r24
			}
			break;

		}
		Local_enuerrorState = ES_OK;
    20ea:	81 e0       	ldi	r24, 0x01	; 1
    20ec:	89 83       	std	Y+1, r24	; 0x01
    20ee:	02 c0       	rjmp	.+4      	; 0x20f4 <DIO_enuSetPinDirection+0x1da>
	}
	else
	{
		Local_enuerrorState = ES_OUT_OF_RANGE;
    20f0:	83 e0       	ldi	r24, 0x03	; 3
    20f2:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuerrorState  ;
    20f4:	89 81       	ldd	r24, Y+1	; 0x01

}//End of DIO_enuSetPinDirection().
    20f6:	26 96       	adiw	r28, 0x06	; 6
    20f8:	0f b6       	in	r0, 0x3f	; 63
    20fa:	f8 94       	cli
    20fc:	de bf       	out	0x3e, r29	; 62
    20fe:	0f be       	out	0x3f, r0	; 63
    2100:	cd bf       	out	0x3d, r28	; 61
    2102:	cf 91       	pop	r28
    2104:	df 91       	pop	r29
    2106:	08 95       	ret

00002108 <DIO_enuSetPinValue>:
/*                 : Arg.3: Copy_u8Val.                                     */
/*                                        DIO_LOW        ,   DIO_HIGH       */
/* Return          : ERROR_STATE eum.                                       */
/****************************************************************************/
ES_t DIO_enuSetPinValue(u8 Copy_u8PortID, u8 Copy_u8PinID ,u8 Copy_u8Val)
{
    2108:	df 93       	push	r29
    210a:	cf 93       	push	r28
    210c:	00 d0       	rcall	.+0      	; 0x210e <DIO_enuSetPinValue+0x6>
    210e:	00 d0       	rcall	.+0      	; 0x2110 <DIO_enuSetPinValue+0x8>
    2110:	00 d0       	rcall	.+0      	; 0x2112 <DIO_enuSetPinValue+0xa>
    2112:	cd b7       	in	r28, 0x3d	; 61
    2114:	de b7       	in	r29, 0x3e	; 62
    2116:	8a 83       	std	Y+2, r24	; 0x02
    2118:	6b 83       	std	Y+3, r22	; 0x03
    211a:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuerrorState = ES_NOK ;
    211c:	19 82       	std	Y+1, r1	; 0x01

	if( (Copy_u8PortID <= DIO_PORTD) && (Copy_u8PinID <= DIO_PIN7) &&( Copy_u8Val<=DIO_HIGH))
    211e:	8a 81       	ldd	r24, Y+2	; 0x02
    2120:	84 30       	cpi	r24, 0x04	; 4
    2122:	08 f0       	brcs	.+2      	; 0x2126 <DIO_enuSetPinValue+0x1e>
    2124:	dc c0       	rjmp	.+440    	; 0x22de <DIO_enuSetPinValue+0x1d6>
    2126:	8b 81       	ldd	r24, Y+3	; 0x03
    2128:	88 30       	cpi	r24, 0x08	; 8
    212a:	08 f0       	brcs	.+2      	; 0x212e <DIO_enuSetPinValue+0x26>
    212c:	d8 c0       	rjmp	.+432    	; 0x22de <DIO_enuSetPinValue+0x1d6>
    212e:	8c 81       	ldd	r24, Y+4	; 0x04
    2130:	82 30       	cpi	r24, 0x02	; 2
    2132:	08 f0       	brcs	.+2      	; 0x2136 <DIO_enuSetPinValue+0x2e>
    2134:	d4 c0       	rjmp	.+424    	; 0x22de <DIO_enuSetPinValue+0x1d6>
	{

		/**********************************************************
		 * Switching for the suitable case .
		 **********************************************************/
		switch( Copy_u8PortID )
    2136:	8a 81       	ldd	r24, Y+2	; 0x02
    2138:	28 2f       	mov	r18, r24
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	3e 83       	std	Y+6, r19	; 0x06
    213e:	2d 83       	std	Y+5, r18	; 0x05
    2140:	8d 81       	ldd	r24, Y+5	; 0x05
    2142:	9e 81       	ldd	r25, Y+6	; 0x06
    2144:	81 30       	cpi	r24, 0x01	; 1
    2146:	91 05       	cpc	r25, r1
    2148:	09 f4       	brne	.+2      	; 0x214c <DIO_enuSetPinValue+0x44>
    214a:	43 c0       	rjmp	.+134    	; 0x21d2 <DIO_enuSetPinValue+0xca>
    214c:	2d 81       	ldd	r18, Y+5	; 0x05
    214e:	3e 81       	ldd	r19, Y+6	; 0x06
    2150:	22 30       	cpi	r18, 0x02	; 2
    2152:	31 05       	cpc	r19, r1
    2154:	2c f4       	brge	.+10     	; 0x2160 <DIO_enuSetPinValue+0x58>
    2156:	8d 81       	ldd	r24, Y+5	; 0x05
    2158:	9e 81       	ldd	r25, Y+6	; 0x06
    215a:	00 97       	sbiw	r24, 0x00	; 0
    215c:	71 f0       	breq	.+28     	; 0x217a <DIO_enuSetPinValue+0x72>
    215e:	bc c0       	rjmp	.+376    	; 0x22d8 <DIO_enuSetPinValue+0x1d0>
    2160:	2d 81       	ldd	r18, Y+5	; 0x05
    2162:	3e 81       	ldd	r19, Y+6	; 0x06
    2164:	22 30       	cpi	r18, 0x02	; 2
    2166:	31 05       	cpc	r19, r1
    2168:	09 f4       	brne	.+2      	; 0x216c <DIO_enuSetPinValue+0x64>
    216a:	5f c0       	rjmp	.+190    	; 0x222a <DIO_enuSetPinValue+0x122>
    216c:	8d 81       	ldd	r24, Y+5	; 0x05
    216e:	9e 81       	ldd	r25, Y+6	; 0x06
    2170:	83 30       	cpi	r24, 0x03	; 3
    2172:	91 05       	cpc	r25, r1
    2174:	09 f4       	brne	.+2      	; 0x2178 <DIO_enuSetPinValue+0x70>
    2176:	85 c0       	rjmp	.+266    	; 0x2282 <DIO_enuSetPinValue+0x17a>
    2178:	af c0       	rjmp	.+350    	; 0x22d8 <DIO_enuSetPinValue+0x1d0>
		{
		case DIO_PORTA :
			if( Copy_u8Val == DIO_LOW)
    217a:	8c 81       	ldd	r24, Y+4	; 0x04
    217c:	88 23       	and	r24, r24
    217e:	a9 f4       	brne	.+42     	; 0x21aa <DIO_enuSetPinValue+0xa2>
			{
				PORTA &=~(DIO_MASK_BIT<<Copy_u8PinID);
    2180:	ab e3       	ldi	r26, 0x3B	; 59
    2182:	b0 e0       	ldi	r27, 0x00	; 0
    2184:	eb e3       	ldi	r30, 0x3B	; 59
    2186:	f0 e0       	ldi	r31, 0x00	; 0
    2188:	80 81       	ld	r24, Z
    218a:	48 2f       	mov	r20, r24
    218c:	8b 81       	ldd	r24, Y+3	; 0x03
    218e:	28 2f       	mov	r18, r24
    2190:	30 e0       	ldi	r19, 0x00	; 0
    2192:	81 e0       	ldi	r24, 0x01	; 1
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	02 2e       	mov	r0, r18
    2198:	02 c0       	rjmp	.+4      	; 0x219e <DIO_enuSetPinValue+0x96>
    219a:	88 0f       	add	r24, r24
    219c:	99 1f       	adc	r25, r25
    219e:	0a 94       	dec	r0
    21a0:	e2 f7       	brpl	.-8      	; 0x219a <DIO_enuSetPinValue+0x92>
    21a2:	80 95       	com	r24
    21a4:	84 23       	and	r24, r20
    21a6:	8c 93       	st	X, r24
    21a8:	97 c0       	rjmp	.+302    	; 0x22d8 <DIO_enuSetPinValue+0x1d0>
			}
			else
			{
				PORTA |=(DIO_MASK_BIT<<Copy_u8PinID);
    21aa:	ab e3       	ldi	r26, 0x3B	; 59
    21ac:	b0 e0       	ldi	r27, 0x00	; 0
    21ae:	eb e3       	ldi	r30, 0x3B	; 59
    21b0:	f0 e0       	ldi	r31, 0x00	; 0
    21b2:	80 81       	ld	r24, Z
    21b4:	48 2f       	mov	r20, r24
    21b6:	8b 81       	ldd	r24, Y+3	; 0x03
    21b8:	28 2f       	mov	r18, r24
    21ba:	30 e0       	ldi	r19, 0x00	; 0
    21bc:	81 e0       	ldi	r24, 0x01	; 1
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	02 2e       	mov	r0, r18
    21c2:	02 c0       	rjmp	.+4      	; 0x21c8 <DIO_enuSetPinValue+0xc0>
    21c4:	88 0f       	add	r24, r24
    21c6:	99 1f       	adc	r25, r25
    21c8:	0a 94       	dec	r0
    21ca:	e2 f7       	brpl	.-8      	; 0x21c4 <DIO_enuSetPinValue+0xbc>
    21cc:	84 2b       	or	r24, r20
    21ce:	8c 93       	st	X, r24
    21d0:	83 c0       	rjmp	.+262    	; 0x22d8 <DIO_enuSetPinValue+0x1d0>
			}

			break;

		case DIO_PORTB :
			if( Copy_u8Val == DIO_LOW)
    21d2:	8c 81       	ldd	r24, Y+4	; 0x04
    21d4:	88 23       	and	r24, r24
    21d6:	a9 f4       	brne	.+42     	; 0x2202 <DIO_enuSetPinValue+0xfa>
			{
				PORTB &=~(DIO_MASK_BIT<<Copy_u8PinID);
    21d8:	a8 e3       	ldi	r26, 0x38	; 56
    21da:	b0 e0       	ldi	r27, 0x00	; 0
    21dc:	e8 e3       	ldi	r30, 0x38	; 56
    21de:	f0 e0       	ldi	r31, 0x00	; 0
    21e0:	80 81       	ld	r24, Z
    21e2:	48 2f       	mov	r20, r24
    21e4:	8b 81       	ldd	r24, Y+3	; 0x03
    21e6:	28 2f       	mov	r18, r24
    21e8:	30 e0       	ldi	r19, 0x00	; 0
    21ea:	81 e0       	ldi	r24, 0x01	; 1
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	02 2e       	mov	r0, r18
    21f0:	02 c0       	rjmp	.+4      	; 0x21f6 <DIO_enuSetPinValue+0xee>
    21f2:	88 0f       	add	r24, r24
    21f4:	99 1f       	adc	r25, r25
    21f6:	0a 94       	dec	r0
    21f8:	e2 f7       	brpl	.-8      	; 0x21f2 <DIO_enuSetPinValue+0xea>
    21fa:	80 95       	com	r24
    21fc:	84 23       	and	r24, r20
    21fe:	8c 93       	st	X, r24
    2200:	6b c0       	rjmp	.+214    	; 0x22d8 <DIO_enuSetPinValue+0x1d0>
			}
			else
			{
				PORTB |=(DIO_MASK_BIT<<Copy_u8PinID);
    2202:	a8 e3       	ldi	r26, 0x38	; 56
    2204:	b0 e0       	ldi	r27, 0x00	; 0
    2206:	e8 e3       	ldi	r30, 0x38	; 56
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	80 81       	ld	r24, Z
    220c:	48 2f       	mov	r20, r24
    220e:	8b 81       	ldd	r24, Y+3	; 0x03
    2210:	28 2f       	mov	r18, r24
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	81 e0       	ldi	r24, 0x01	; 1
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	02 2e       	mov	r0, r18
    221a:	02 c0       	rjmp	.+4      	; 0x2220 <DIO_enuSetPinValue+0x118>
    221c:	88 0f       	add	r24, r24
    221e:	99 1f       	adc	r25, r25
    2220:	0a 94       	dec	r0
    2222:	e2 f7       	brpl	.-8      	; 0x221c <DIO_enuSetPinValue+0x114>
    2224:	84 2b       	or	r24, r20
    2226:	8c 93       	st	X, r24
    2228:	57 c0       	rjmp	.+174    	; 0x22d8 <DIO_enuSetPinValue+0x1d0>

			break;

		case DIO_PORTC :

			if( Copy_u8Val == DIO_LOW)
    222a:	8c 81       	ldd	r24, Y+4	; 0x04
    222c:	88 23       	and	r24, r24
    222e:	a9 f4       	brne	.+42     	; 0x225a <DIO_enuSetPinValue+0x152>
			{
				PORTC &=~(DIO_MASK_BIT<<Copy_u8PinID);
    2230:	a5 e3       	ldi	r26, 0x35	; 53
    2232:	b0 e0       	ldi	r27, 0x00	; 0
    2234:	e5 e3       	ldi	r30, 0x35	; 53
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	80 81       	ld	r24, Z
    223a:	48 2f       	mov	r20, r24
    223c:	8b 81       	ldd	r24, Y+3	; 0x03
    223e:	28 2f       	mov	r18, r24
    2240:	30 e0       	ldi	r19, 0x00	; 0
    2242:	81 e0       	ldi	r24, 0x01	; 1
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	02 2e       	mov	r0, r18
    2248:	02 c0       	rjmp	.+4      	; 0x224e <DIO_enuSetPinValue+0x146>
    224a:	88 0f       	add	r24, r24
    224c:	99 1f       	adc	r25, r25
    224e:	0a 94       	dec	r0
    2250:	e2 f7       	brpl	.-8      	; 0x224a <DIO_enuSetPinValue+0x142>
    2252:	80 95       	com	r24
    2254:	84 23       	and	r24, r20
    2256:	8c 93       	st	X, r24
    2258:	3f c0       	rjmp	.+126    	; 0x22d8 <DIO_enuSetPinValue+0x1d0>
			}
			else
			{
				PORTC |=(DIO_MASK_BIT<<Copy_u8PinID);
    225a:	a5 e3       	ldi	r26, 0x35	; 53
    225c:	b0 e0       	ldi	r27, 0x00	; 0
    225e:	e5 e3       	ldi	r30, 0x35	; 53
    2260:	f0 e0       	ldi	r31, 0x00	; 0
    2262:	80 81       	ld	r24, Z
    2264:	48 2f       	mov	r20, r24
    2266:	8b 81       	ldd	r24, Y+3	; 0x03
    2268:	28 2f       	mov	r18, r24
    226a:	30 e0       	ldi	r19, 0x00	; 0
    226c:	81 e0       	ldi	r24, 0x01	; 1
    226e:	90 e0       	ldi	r25, 0x00	; 0
    2270:	02 2e       	mov	r0, r18
    2272:	02 c0       	rjmp	.+4      	; 0x2278 <DIO_enuSetPinValue+0x170>
    2274:	88 0f       	add	r24, r24
    2276:	99 1f       	adc	r25, r25
    2278:	0a 94       	dec	r0
    227a:	e2 f7       	brpl	.-8      	; 0x2274 <DIO_enuSetPinValue+0x16c>
    227c:	84 2b       	or	r24, r20
    227e:	8c 93       	st	X, r24
    2280:	2b c0       	rjmp	.+86     	; 0x22d8 <DIO_enuSetPinValue+0x1d0>
			}

			break;

		case DIO_PORTD :
			if( Copy_u8Val == DIO_LOW)
    2282:	8c 81       	ldd	r24, Y+4	; 0x04
    2284:	88 23       	and	r24, r24
    2286:	a9 f4       	brne	.+42     	; 0x22b2 <DIO_enuSetPinValue+0x1aa>
			{
				PORTD &=~(DIO_MASK_BIT<<Copy_u8PinID);
    2288:	a2 e3       	ldi	r26, 0x32	; 50
    228a:	b0 e0       	ldi	r27, 0x00	; 0
    228c:	e2 e3       	ldi	r30, 0x32	; 50
    228e:	f0 e0       	ldi	r31, 0x00	; 0
    2290:	80 81       	ld	r24, Z
    2292:	48 2f       	mov	r20, r24
    2294:	8b 81       	ldd	r24, Y+3	; 0x03
    2296:	28 2f       	mov	r18, r24
    2298:	30 e0       	ldi	r19, 0x00	; 0
    229a:	81 e0       	ldi	r24, 0x01	; 1
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	02 2e       	mov	r0, r18
    22a0:	02 c0       	rjmp	.+4      	; 0x22a6 <DIO_enuSetPinValue+0x19e>
    22a2:	88 0f       	add	r24, r24
    22a4:	99 1f       	adc	r25, r25
    22a6:	0a 94       	dec	r0
    22a8:	e2 f7       	brpl	.-8      	; 0x22a2 <DIO_enuSetPinValue+0x19a>
    22aa:	80 95       	com	r24
    22ac:	84 23       	and	r24, r20
    22ae:	8c 93       	st	X, r24
    22b0:	13 c0       	rjmp	.+38     	; 0x22d8 <DIO_enuSetPinValue+0x1d0>
			}
			else
			{
				PORTD |=(DIO_MASK_BIT<<Copy_u8PinID);
    22b2:	a2 e3       	ldi	r26, 0x32	; 50
    22b4:	b0 e0       	ldi	r27, 0x00	; 0
    22b6:	e2 e3       	ldi	r30, 0x32	; 50
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	80 81       	ld	r24, Z
    22bc:	48 2f       	mov	r20, r24
    22be:	8b 81       	ldd	r24, Y+3	; 0x03
    22c0:	28 2f       	mov	r18, r24
    22c2:	30 e0       	ldi	r19, 0x00	; 0
    22c4:	81 e0       	ldi	r24, 0x01	; 1
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	02 2e       	mov	r0, r18
    22ca:	02 c0       	rjmp	.+4      	; 0x22d0 <DIO_enuSetPinValue+0x1c8>
    22cc:	88 0f       	add	r24, r24
    22ce:	99 1f       	adc	r25, r25
    22d0:	0a 94       	dec	r0
    22d2:	e2 f7       	brpl	.-8      	; 0x22cc <DIO_enuSetPinValue+0x1c4>
    22d4:	84 2b       	or	r24, r20
    22d6:	8c 93       	st	X, r24
			}

			break;

		}
		Local_enuerrorState = ES_OK;
    22d8:	81 e0       	ldi	r24, 0x01	; 1
    22da:	89 83       	std	Y+1, r24	; 0x01
    22dc:	02 c0       	rjmp	.+4      	; 0x22e2 <DIO_enuSetPinValue+0x1da>
	}
	else
	{
		Local_enuerrorState = ES_OUT_OF_RANGE;
    22de:	83 e0       	ldi	r24, 0x03	; 3
    22e0:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuerrorState  ;
    22e2:	89 81       	ldd	r24, Y+1	; 0x01
}//End of DIO_enuSetPinValue().
    22e4:	26 96       	adiw	r28, 0x06	; 6
    22e6:	0f b6       	in	r0, 0x3f	; 63
    22e8:	f8 94       	cli
    22ea:	de bf       	out	0x3e, r29	; 62
    22ec:	0f be       	out	0x3f, r0	; 63
    22ee:	cd bf       	out	0x3d, r28	; 61
    22f0:	cf 91       	pop	r28
    22f2:	df 91       	pop	r29
    22f4:	08 95       	ret

000022f6 <DIO_enuToggelPin>:
/*                                        DIO_PIN2       ,   DIO_PIN6       */
/*                                        DIO_PIN3       ,   DIO_PIN7       */
/* Return          : ERROR_STATE eum.                                       */
/****************************************************************************/
ES_t DIO_enuToggelPin(u8  Copy_u8PortID, u8 Copy_u8PinID  )
{
    22f6:	df 93       	push	r29
    22f8:	cf 93       	push	r28
    22fa:	00 d0       	rcall	.+0      	; 0x22fc <DIO_enuToggelPin+0x6>
    22fc:	00 d0       	rcall	.+0      	; 0x22fe <DIO_enuToggelPin+0x8>
    22fe:	0f 92       	push	r0
    2300:	cd b7       	in	r28, 0x3d	; 61
    2302:	de b7       	in	r29, 0x3e	; 62
    2304:	8a 83       	std	Y+2, r24	; 0x02
    2306:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuerrorState = ES_NOK ;
    2308:	19 82       	std	Y+1, r1	; 0x01

	if( (Copy_u8PortID <= DIO_PORTD) &&  (Copy_u8PinID <= DIO_PIN7) )
    230a:	8a 81       	ldd	r24, Y+2	; 0x02
    230c:	84 30       	cpi	r24, 0x04	; 4
    230e:	08 f0       	brcs	.+2      	; 0x2312 <DIO_enuToggelPin+0x1c>
    2310:	75 c0       	rjmp	.+234    	; 0x23fc <DIO_enuToggelPin+0x106>
    2312:	8b 81       	ldd	r24, Y+3	; 0x03
    2314:	88 30       	cpi	r24, 0x08	; 8
    2316:	08 f0       	brcs	.+2      	; 0x231a <DIO_enuToggelPin+0x24>
    2318:	71 c0       	rjmp	.+226    	; 0x23fc <DIO_enuToggelPin+0x106>
	{
		/**********************************************************
		 * Switching for the suitable case .
		 **********************************************************/
		switch( Copy_u8PortID )
    231a:	8a 81       	ldd	r24, Y+2	; 0x02
    231c:	28 2f       	mov	r18, r24
    231e:	30 e0       	ldi	r19, 0x00	; 0
    2320:	3d 83       	std	Y+5, r19	; 0x05
    2322:	2c 83       	std	Y+4, r18	; 0x04
    2324:	8c 81       	ldd	r24, Y+4	; 0x04
    2326:	9d 81       	ldd	r25, Y+5	; 0x05
    2328:	81 30       	cpi	r24, 0x01	; 1
    232a:	91 05       	cpc	r25, r1
    232c:	49 f1       	breq	.+82     	; 0x2380 <DIO_enuToggelPin+0x8a>
    232e:	2c 81       	ldd	r18, Y+4	; 0x04
    2330:	3d 81       	ldd	r19, Y+5	; 0x05
    2332:	22 30       	cpi	r18, 0x02	; 2
    2334:	31 05       	cpc	r19, r1
    2336:	2c f4       	brge	.+10     	; 0x2342 <DIO_enuToggelPin+0x4c>
    2338:	8c 81       	ldd	r24, Y+4	; 0x04
    233a:	9d 81       	ldd	r25, Y+5	; 0x05
    233c:	00 97       	sbiw	r24, 0x00	; 0
    233e:	61 f0       	breq	.+24     	; 0x2358 <DIO_enuToggelPin+0x62>
    2340:	5a c0       	rjmp	.+180    	; 0x23f6 <DIO_enuToggelPin+0x100>
    2342:	2c 81       	ldd	r18, Y+4	; 0x04
    2344:	3d 81       	ldd	r19, Y+5	; 0x05
    2346:	22 30       	cpi	r18, 0x02	; 2
    2348:	31 05       	cpc	r19, r1
    234a:	71 f1       	breq	.+92     	; 0x23a8 <DIO_enuToggelPin+0xb2>
    234c:	8c 81       	ldd	r24, Y+4	; 0x04
    234e:	9d 81       	ldd	r25, Y+5	; 0x05
    2350:	83 30       	cpi	r24, 0x03	; 3
    2352:	91 05       	cpc	r25, r1
    2354:	e9 f1       	breq	.+122    	; 0x23d0 <DIO_enuToggelPin+0xda>
    2356:	4f c0       	rjmp	.+158    	; 0x23f6 <DIO_enuToggelPin+0x100>
		{
		case DIO_PORTA :
			PORTA ^=(DIO_MASK_BIT<<Copy_u8PinID);
    2358:	ab e3       	ldi	r26, 0x3B	; 59
    235a:	b0 e0       	ldi	r27, 0x00	; 0
    235c:	eb e3       	ldi	r30, 0x3B	; 59
    235e:	f0 e0       	ldi	r31, 0x00	; 0
    2360:	80 81       	ld	r24, Z
    2362:	48 2f       	mov	r20, r24
    2364:	8b 81       	ldd	r24, Y+3	; 0x03
    2366:	28 2f       	mov	r18, r24
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	81 e0       	ldi	r24, 0x01	; 1
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	02 2e       	mov	r0, r18
    2370:	02 c0       	rjmp	.+4      	; 0x2376 <DIO_enuToggelPin+0x80>
    2372:	88 0f       	add	r24, r24
    2374:	99 1f       	adc	r25, r25
    2376:	0a 94       	dec	r0
    2378:	e2 f7       	brpl	.-8      	; 0x2372 <DIO_enuToggelPin+0x7c>
    237a:	84 27       	eor	r24, r20
    237c:	8c 93       	st	X, r24
    237e:	3b c0       	rjmp	.+118    	; 0x23f6 <DIO_enuToggelPin+0x100>
			break;

		case DIO_PORTB :
			PORTB ^=(DIO_MASK_BIT<<Copy_u8PinID);
    2380:	a8 e3       	ldi	r26, 0x38	; 56
    2382:	b0 e0       	ldi	r27, 0x00	; 0
    2384:	e8 e3       	ldi	r30, 0x38	; 56
    2386:	f0 e0       	ldi	r31, 0x00	; 0
    2388:	80 81       	ld	r24, Z
    238a:	48 2f       	mov	r20, r24
    238c:	8b 81       	ldd	r24, Y+3	; 0x03
    238e:	28 2f       	mov	r18, r24
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	81 e0       	ldi	r24, 0x01	; 1
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	02 2e       	mov	r0, r18
    2398:	02 c0       	rjmp	.+4      	; 0x239e <DIO_enuToggelPin+0xa8>
    239a:	88 0f       	add	r24, r24
    239c:	99 1f       	adc	r25, r25
    239e:	0a 94       	dec	r0
    23a0:	e2 f7       	brpl	.-8      	; 0x239a <DIO_enuToggelPin+0xa4>
    23a2:	84 27       	eor	r24, r20
    23a4:	8c 93       	st	X, r24
    23a6:	27 c0       	rjmp	.+78     	; 0x23f6 <DIO_enuToggelPin+0x100>
			break;

		case DIO_PORTC :
			PORTC ^=(DIO_MASK_BIT<<Copy_u8PinID);
    23a8:	a5 e3       	ldi	r26, 0x35	; 53
    23aa:	b0 e0       	ldi	r27, 0x00	; 0
    23ac:	e5 e3       	ldi	r30, 0x35	; 53
    23ae:	f0 e0       	ldi	r31, 0x00	; 0
    23b0:	80 81       	ld	r24, Z
    23b2:	48 2f       	mov	r20, r24
    23b4:	8b 81       	ldd	r24, Y+3	; 0x03
    23b6:	28 2f       	mov	r18, r24
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	81 e0       	ldi	r24, 0x01	; 1
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	02 2e       	mov	r0, r18
    23c0:	02 c0       	rjmp	.+4      	; 0x23c6 <DIO_enuToggelPin+0xd0>
    23c2:	88 0f       	add	r24, r24
    23c4:	99 1f       	adc	r25, r25
    23c6:	0a 94       	dec	r0
    23c8:	e2 f7       	brpl	.-8      	; 0x23c2 <DIO_enuToggelPin+0xcc>
    23ca:	84 27       	eor	r24, r20
    23cc:	8c 93       	st	X, r24
    23ce:	13 c0       	rjmp	.+38     	; 0x23f6 <DIO_enuToggelPin+0x100>
			break;

		case DIO_PORTD :
			PORTD ^=(DIO_MASK_BIT<<Copy_u8PinID);
    23d0:	a2 e3       	ldi	r26, 0x32	; 50
    23d2:	b0 e0       	ldi	r27, 0x00	; 0
    23d4:	e2 e3       	ldi	r30, 0x32	; 50
    23d6:	f0 e0       	ldi	r31, 0x00	; 0
    23d8:	80 81       	ld	r24, Z
    23da:	48 2f       	mov	r20, r24
    23dc:	8b 81       	ldd	r24, Y+3	; 0x03
    23de:	28 2f       	mov	r18, r24
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	81 e0       	ldi	r24, 0x01	; 1
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	02 2e       	mov	r0, r18
    23e8:	02 c0       	rjmp	.+4      	; 0x23ee <DIO_enuToggelPin+0xf8>
    23ea:	88 0f       	add	r24, r24
    23ec:	99 1f       	adc	r25, r25
    23ee:	0a 94       	dec	r0
    23f0:	e2 f7       	brpl	.-8      	; 0x23ea <DIO_enuToggelPin+0xf4>
    23f2:	84 27       	eor	r24, r20
    23f4:	8c 93       	st	X, r24
			break;
		}

		Local_enuerrorState = ES_OK;
    23f6:	81 e0       	ldi	r24, 0x01	; 1
    23f8:	89 83       	std	Y+1, r24	; 0x01
    23fa:	02 c0       	rjmp	.+4      	; 0x2400 <DIO_enuToggelPin+0x10a>

	}
	else
	{
		Local_enuerrorState = ES_OUT_OF_RANGE;
    23fc:	83 e0       	ldi	r24, 0x03	; 3
    23fe:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuerrorState  ;
    2400:	89 81       	ldd	r24, Y+1	; 0x01
}//End of DIO_enuToggelPin().
    2402:	0f 90       	pop	r0
    2404:	0f 90       	pop	r0
    2406:	0f 90       	pop	r0
    2408:	0f 90       	pop	r0
    240a:	0f 90       	pop	r0
    240c:	cf 91       	pop	r28
    240e:	df 91       	pop	r29
    2410:	08 95       	ret

00002412 <DIO_enuGetPinVlaue>:
/*                 : Arg.3: Address of u8 variable.                              */
/*                                                                               */
/* Return          : ERROR_STATE eum.                                            */
/*********************************************************************************/
ES_t DIO_enuGetPinVlaue(u8 Copy_u8PortID , u8 Copy_u8PinID , u8* Copy_pu8PinVal)
{
    2412:	df 93       	push	r29
    2414:	cf 93       	push	r28
    2416:	cd b7       	in	r28, 0x3d	; 61
    2418:	de b7       	in	r29, 0x3e	; 62
    241a:	27 97       	sbiw	r28, 0x07	; 7
    241c:	0f b6       	in	r0, 0x3f	; 63
    241e:	f8 94       	cli
    2420:	de bf       	out	0x3e, r29	; 62
    2422:	0f be       	out	0x3f, r0	; 63
    2424:	cd bf       	out	0x3d, r28	; 61
    2426:	8a 83       	std	Y+2, r24	; 0x02
    2428:	6b 83       	std	Y+3, r22	; 0x03
    242a:	5d 83       	std	Y+5, r21	; 0x05
    242c:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuerrorState = ES_NOK ;
    242e:	19 82       	std	Y+1, r1	; 0x01

	// Check to ensure that the passed address is not equal Null.
	if( Copy_pu8PinVal != NULL )
    2430:	8c 81       	ldd	r24, Y+4	; 0x04
    2432:	9d 81       	ldd	r25, Y+5	; 0x05
    2434:	00 97       	sbiw	r24, 0x00	; 0
    2436:	09 f4       	brne	.+2      	; 0x243a <DIO_enuGetPinVlaue+0x28>
    2438:	7e c0       	rjmp	.+252    	; 0x2536 <DIO_enuGetPinVlaue+0x124>
	{
		if( (Copy_u8PortID <= DIO_PORTD) &&  (Copy_u8PinID <= DIO_PIN7) )
    243a:	8a 81       	ldd	r24, Y+2	; 0x02
    243c:	84 30       	cpi	r24, 0x04	; 4
    243e:	08 f0       	brcs	.+2      	; 0x2442 <DIO_enuGetPinVlaue+0x30>
    2440:	77 c0       	rjmp	.+238    	; 0x2530 <DIO_enuGetPinVlaue+0x11e>
    2442:	8b 81       	ldd	r24, Y+3	; 0x03
    2444:	88 30       	cpi	r24, 0x08	; 8
    2446:	08 f0       	brcs	.+2      	; 0x244a <DIO_enuGetPinVlaue+0x38>
    2448:	73 c0       	rjmp	.+230    	; 0x2530 <DIO_enuGetPinVlaue+0x11e>
		{
			/**********************************************************
			 * Switching for the suitable case .
			 **********************************************************/
			switch( Copy_u8PortID )
    244a:	8a 81       	ldd	r24, Y+2	; 0x02
    244c:	28 2f       	mov	r18, r24
    244e:	30 e0       	ldi	r19, 0x00	; 0
    2450:	3f 83       	std	Y+7, r19	; 0x07
    2452:	2e 83       	std	Y+6, r18	; 0x06
    2454:	4e 81       	ldd	r20, Y+6	; 0x06
    2456:	5f 81       	ldd	r21, Y+7	; 0x07
    2458:	41 30       	cpi	r20, 0x01	; 1
    245a:	51 05       	cpc	r21, r1
    245c:	59 f1       	breq	.+86     	; 0x24b4 <DIO_enuGetPinVlaue+0xa2>
    245e:	8e 81       	ldd	r24, Y+6	; 0x06
    2460:	9f 81       	ldd	r25, Y+7	; 0x07
    2462:	82 30       	cpi	r24, 0x02	; 2
    2464:	91 05       	cpc	r25, r1
    2466:	34 f4       	brge	.+12     	; 0x2474 <DIO_enuGetPinVlaue+0x62>
    2468:	2e 81       	ldd	r18, Y+6	; 0x06
    246a:	3f 81       	ldd	r19, Y+7	; 0x07
    246c:	21 15       	cp	r18, r1
    246e:	31 05       	cpc	r19, r1
    2470:	69 f0       	breq	.+26     	; 0x248c <DIO_enuGetPinVlaue+0x7a>
    2472:	5b c0       	rjmp	.+182    	; 0x252a <DIO_enuGetPinVlaue+0x118>
    2474:	4e 81       	ldd	r20, Y+6	; 0x06
    2476:	5f 81       	ldd	r21, Y+7	; 0x07
    2478:	42 30       	cpi	r20, 0x02	; 2
    247a:	51 05       	cpc	r21, r1
    247c:	79 f1       	breq	.+94     	; 0x24dc <DIO_enuGetPinVlaue+0xca>
    247e:	8e 81       	ldd	r24, Y+6	; 0x06
    2480:	9f 81       	ldd	r25, Y+7	; 0x07
    2482:	83 30       	cpi	r24, 0x03	; 3
    2484:	91 05       	cpc	r25, r1
    2486:	09 f4       	brne	.+2      	; 0x248a <DIO_enuGetPinVlaue+0x78>
    2488:	3d c0       	rjmp	.+122    	; 0x2504 <DIO_enuGetPinVlaue+0xf2>
    248a:	4f c0       	rjmp	.+158    	; 0x252a <DIO_enuGetPinVlaue+0x118>
			{
			case DIO_PORTA :
				*Copy_pu8PinVal = (PINA>>Copy_u8PinID)&DIO_MASK_BIT;
    248c:	e9 e3       	ldi	r30, 0x39	; 57
    248e:	f0 e0       	ldi	r31, 0x00	; 0
    2490:	80 81       	ld	r24, Z
    2492:	28 2f       	mov	r18, r24
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	8b 81       	ldd	r24, Y+3	; 0x03
    2498:	88 2f       	mov	r24, r24
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	a9 01       	movw	r20, r18
    249e:	02 c0       	rjmp	.+4      	; 0x24a4 <DIO_enuGetPinVlaue+0x92>
    24a0:	55 95       	asr	r21
    24a2:	47 95       	ror	r20
    24a4:	8a 95       	dec	r24
    24a6:	e2 f7       	brpl	.-8      	; 0x24a0 <DIO_enuGetPinVlaue+0x8e>
    24a8:	ca 01       	movw	r24, r20
    24aa:	81 70       	andi	r24, 0x01	; 1
    24ac:	ec 81       	ldd	r30, Y+4	; 0x04
    24ae:	fd 81       	ldd	r31, Y+5	; 0x05
    24b0:	80 83       	st	Z, r24
    24b2:	3b c0       	rjmp	.+118    	; 0x252a <DIO_enuGetPinVlaue+0x118>
				break;

			case DIO_PORTB :
				*Copy_pu8PinVal = (PINB>>Copy_u8PinID)&DIO_MASK_BIT;
    24b4:	e6 e3       	ldi	r30, 0x36	; 54
    24b6:	f0 e0       	ldi	r31, 0x00	; 0
    24b8:	80 81       	ld	r24, Z
    24ba:	28 2f       	mov	r18, r24
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	8b 81       	ldd	r24, Y+3	; 0x03
    24c0:	88 2f       	mov	r24, r24
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	a9 01       	movw	r20, r18
    24c6:	02 c0       	rjmp	.+4      	; 0x24cc <DIO_enuGetPinVlaue+0xba>
    24c8:	55 95       	asr	r21
    24ca:	47 95       	ror	r20
    24cc:	8a 95       	dec	r24
    24ce:	e2 f7       	brpl	.-8      	; 0x24c8 <DIO_enuGetPinVlaue+0xb6>
    24d0:	ca 01       	movw	r24, r20
    24d2:	81 70       	andi	r24, 0x01	; 1
    24d4:	ec 81       	ldd	r30, Y+4	; 0x04
    24d6:	fd 81       	ldd	r31, Y+5	; 0x05
    24d8:	80 83       	st	Z, r24
    24da:	27 c0       	rjmp	.+78     	; 0x252a <DIO_enuGetPinVlaue+0x118>
				break;

			case DIO_PORTC :
				*Copy_pu8PinVal = (PINC>>Copy_u8PinID)&DIO_MASK_BIT;
    24dc:	e3 e3       	ldi	r30, 0x33	; 51
    24de:	f0 e0       	ldi	r31, 0x00	; 0
    24e0:	80 81       	ld	r24, Z
    24e2:	28 2f       	mov	r18, r24
    24e4:	30 e0       	ldi	r19, 0x00	; 0
    24e6:	8b 81       	ldd	r24, Y+3	; 0x03
    24e8:	88 2f       	mov	r24, r24
    24ea:	90 e0       	ldi	r25, 0x00	; 0
    24ec:	a9 01       	movw	r20, r18
    24ee:	02 c0       	rjmp	.+4      	; 0x24f4 <DIO_enuGetPinVlaue+0xe2>
    24f0:	55 95       	asr	r21
    24f2:	47 95       	ror	r20
    24f4:	8a 95       	dec	r24
    24f6:	e2 f7       	brpl	.-8      	; 0x24f0 <DIO_enuGetPinVlaue+0xde>
    24f8:	ca 01       	movw	r24, r20
    24fa:	81 70       	andi	r24, 0x01	; 1
    24fc:	ec 81       	ldd	r30, Y+4	; 0x04
    24fe:	fd 81       	ldd	r31, Y+5	; 0x05
    2500:	80 83       	st	Z, r24
    2502:	13 c0       	rjmp	.+38     	; 0x252a <DIO_enuGetPinVlaue+0x118>
				break;

			case DIO_PORTD :
				*Copy_pu8PinVal = (PIND>>Copy_u8PinID)&DIO_MASK_BIT;
    2504:	e0 e3       	ldi	r30, 0x30	; 48
    2506:	f0 e0       	ldi	r31, 0x00	; 0
    2508:	80 81       	ld	r24, Z
    250a:	28 2f       	mov	r18, r24
    250c:	30 e0       	ldi	r19, 0x00	; 0
    250e:	8b 81       	ldd	r24, Y+3	; 0x03
    2510:	88 2f       	mov	r24, r24
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	a9 01       	movw	r20, r18
    2516:	02 c0       	rjmp	.+4      	; 0x251c <DIO_enuGetPinVlaue+0x10a>
    2518:	55 95       	asr	r21
    251a:	47 95       	ror	r20
    251c:	8a 95       	dec	r24
    251e:	e2 f7       	brpl	.-8      	; 0x2518 <DIO_enuGetPinVlaue+0x106>
    2520:	ca 01       	movw	r24, r20
    2522:	81 70       	andi	r24, 0x01	; 1
    2524:	ec 81       	ldd	r30, Y+4	; 0x04
    2526:	fd 81       	ldd	r31, Y+5	; 0x05
    2528:	80 83       	st	Z, r24
				break;
			}

			Local_enuerrorState = ES_OK;
    252a:	81 e0       	ldi	r24, 0x01	; 1
    252c:	89 83       	std	Y+1, r24	; 0x01
    252e:	05 c0       	rjmp	.+10     	; 0x253a <DIO_enuGetPinVlaue+0x128>

		}
		else
		{
			Local_enuerrorState = ES_OUT_OF_RANGE;
    2530:	83 e0       	ldi	r24, 0x03	; 3
    2532:	89 83       	std	Y+1, r24	; 0x01
    2534:	02 c0       	rjmp	.+4      	; 0x253a <DIO_enuGetPinVlaue+0x128>
	else
	{
		/**********************************************************
		 * Handle null pointer case.
		 **********************************************************/
		Local_enuerrorState = ES_NULL_POINTER;
    2536:	82 e0       	ldi	r24, 0x02	; 2
    2538:	89 83       	std	Y+1, r24	; 0x01
	}



	return Local_enuerrorState  ;
    253a:	89 81       	ldd	r24, Y+1	; 0x01
}//End of DIO_enuGetPinVlaue().
    253c:	27 96       	adiw	r28, 0x07	; 7
    253e:	0f b6       	in	r0, 0x3f	; 63
    2540:	f8 94       	cli
    2542:	de bf       	out	0x3e, r29	; 62
    2544:	0f be       	out	0x3f, r0	; 63
    2546:	cd bf       	out	0x3d, r28	; 61
    2548:	cf 91       	pop	r28
    254a:	df 91       	pop	r29
    254c:	08 95       	ret

0000254e <func>:
#endif

u16 Local_u16Data ;

void func( u8* para )
{
    254e:	df 93       	push	r29
    2550:	cf 93       	push	r28
    2552:	00 d0       	rcall	.+0      	; 0x2554 <func+0x6>
    2554:	cd b7       	in	r28, 0x3d	; 61
    2556:	de b7       	in	r29, 0x3e	; 62
    2558:	9a 83       	std	Y+2, r25	; 0x02
    255a:	89 83       	std	Y+1, r24	; 0x01
	Local_u16Data = (u16)(*para);
    255c:	e9 81       	ldd	r30, Y+1	; 0x01
    255e:	fa 81       	ldd	r31, Y+2	; 0x02
    2560:	80 81       	ld	r24, Z
    2562:	88 2f       	mov	r24, r24
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	90 93 85 01 	sts	0x0185, r25
    256a:	80 93 84 01 	sts	0x0184, r24
}
    256e:	0f 90       	pop	r0
    2570:	0f 90       	pop	r0
    2572:	cf 91       	pop	r28
    2574:	df 91       	pop	r29
    2576:	08 95       	ret

00002578 <main>:

int main(void)
{
    2578:	df 93       	push	r29
    257a:	cf 93       	push	r28
    257c:	cd b7       	in	r28, 0x3d	; 61
    257e:	de b7       	in	r29, 0x3e	; 62

	GIE_enuEnable();
    2580:	0e 94 a8 0a 	call	0x1550	; 0x1550 <GIE_enuEnable>


	//Configure the TXD(PD1) pin as output pin
	DIO_enuSetPinDirection(DIO_PORTD , DIO_PIN1 , DIO_OUTPUT_PIN);
    2584:	83 e0       	ldi	r24, 0x03	; 3
    2586:	61 e0       	ldi	r22, 0x01	; 1
    2588:	41 e0       	ldi	r20, 0x01	; 1
    258a:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <DIO_enuSetPinDirection>

	//Configure the RXD(PD0) pin as INPUT pin
	DIO_enuSetPinDirection(DIO_PORTD , DIO_PIN0 , DIO_INPTU_PIN);
    258e:	83 e0       	ldi	r24, 0x03	; 3
    2590:	60 e0       	ldi	r22, 0x00	; 0
    2592:	40 e0       	ldi	r20, 0x00	; 0
    2594:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <DIO_enuSetPinDirection>

	USART_enuInit();
    2598:	0e 94 b7 06 	call	0xd6e	; 0xd6e <USART_enuInit>
	//USART_enuRecieveByteASync(void (*Cpy_pFunc)(void*) , u8* Cpy_pu8Para );

	while(1)
	{

		USART_enuRecieveByteASync( func , (u8*)Local_u16Data);
    259c:	80 91 84 01 	lds	r24, 0x0184
    25a0:	90 91 85 01 	lds	r25, 0x0185
    25a4:	9c 01       	movw	r18, r24
    25a6:	87 ea       	ldi	r24, 0xA7	; 167
    25a8:	92 e1       	ldi	r25, 0x12	; 18
    25aa:	b9 01       	movw	r22, r18
    25ac:	0e 94 27 0a 	call	0x144e	; 0x144e <USART_enuRecieveByteASync>
		//USART_enuRecieveByteSync( &Local_u16Data );
		USART_enuSendByteSync( &Local_u16Data  );
    25b0:	84 e8       	ldi	r24, 0x84	; 132
    25b2:	91 e0       	ldi	r25, 0x01	; 1
    25b4:	0e 94 b7 08 	call	0x116e	; 0x116e <USART_enuSendByteSync>
    25b8:	f1 cf       	rjmp	.-30     	; 0x259c <main+0x24>

000025ba <__prologue_saves__>:
    25ba:	2f 92       	push	r2
    25bc:	3f 92       	push	r3
    25be:	4f 92       	push	r4
    25c0:	5f 92       	push	r5
    25c2:	6f 92       	push	r6
    25c4:	7f 92       	push	r7
    25c6:	8f 92       	push	r8
    25c8:	9f 92       	push	r9
    25ca:	af 92       	push	r10
    25cc:	bf 92       	push	r11
    25ce:	cf 92       	push	r12
    25d0:	df 92       	push	r13
    25d2:	ef 92       	push	r14
    25d4:	ff 92       	push	r15
    25d6:	0f 93       	push	r16
    25d8:	1f 93       	push	r17
    25da:	cf 93       	push	r28
    25dc:	df 93       	push	r29
    25de:	cd b7       	in	r28, 0x3d	; 61
    25e0:	de b7       	in	r29, 0x3e	; 62
    25e2:	ca 1b       	sub	r28, r26
    25e4:	db 0b       	sbc	r29, r27
    25e6:	0f b6       	in	r0, 0x3f	; 63
    25e8:	f8 94       	cli
    25ea:	de bf       	out	0x3e, r29	; 62
    25ec:	0f be       	out	0x3f, r0	; 63
    25ee:	cd bf       	out	0x3d, r28	; 61
    25f0:	09 94       	ijmp

000025f2 <__epilogue_restores__>:
    25f2:	2a 88       	ldd	r2, Y+18	; 0x12
    25f4:	39 88       	ldd	r3, Y+17	; 0x11
    25f6:	48 88       	ldd	r4, Y+16	; 0x10
    25f8:	5f 84       	ldd	r5, Y+15	; 0x0f
    25fa:	6e 84       	ldd	r6, Y+14	; 0x0e
    25fc:	7d 84       	ldd	r7, Y+13	; 0x0d
    25fe:	8c 84       	ldd	r8, Y+12	; 0x0c
    2600:	9b 84       	ldd	r9, Y+11	; 0x0b
    2602:	aa 84       	ldd	r10, Y+10	; 0x0a
    2604:	b9 84       	ldd	r11, Y+9	; 0x09
    2606:	c8 84       	ldd	r12, Y+8	; 0x08
    2608:	df 80       	ldd	r13, Y+7	; 0x07
    260a:	ee 80       	ldd	r14, Y+6	; 0x06
    260c:	fd 80       	ldd	r15, Y+5	; 0x05
    260e:	0c 81       	ldd	r16, Y+4	; 0x04
    2610:	1b 81       	ldd	r17, Y+3	; 0x03
    2612:	aa 81       	ldd	r26, Y+2	; 0x02
    2614:	b9 81       	ldd	r27, Y+1	; 0x01
    2616:	ce 0f       	add	r28, r30
    2618:	d1 1d       	adc	r29, r1
    261a:	0f b6       	in	r0, 0x3f	; 63
    261c:	f8 94       	cli
    261e:	de bf       	out	0x3e, r29	; 62
    2620:	0f be       	out	0x3f, r0	; 63
    2622:	cd bf       	out	0x3d, r28	; 61
    2624:	ed 01       	movw	r28, r26
    2626:	08 95       	ret

00002628 <_exit>:
    2628:	f8 94       	cli

0000262a <__stop_program>:
    262a:	ff cf       	rjmp	.-2      	; 0x262a <__stop_program>
